{"version":3,"sources":["zprint/zprint.cljc"],"mappings":"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","names":["zprint.zprint/dots","n","cljs.core.apply","cljs.core/str","cljs.core.repeat","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","zprint.zprint/conj-it!","seq59683","G__59684","cljs.core/first","cljs.core/next","self__4723__auto__","to","rest","cljs.core.reduce","cljs.core/conj!","zprint.zprint/split-lf-2","s","temp__5733__auto__","next-lf","clojure.string.index_of","cljs.core.subs","G__59693","zprint.zprint/zpmap","js/Error","options","f","coll","cljs.core.map","coll1","coll2","zprint.zprint/zat","value","zprint.zprint/fzprint-dbg","cljs.core.atom","p__59697","map__59698","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","zprint.zprint/log-lines","dbg-print?","dbg-indent","in-hang?","dbg-output","ind","style-vec","cljs.core.println","cljs.core.prn","p__59700","map__59701","zprint.zprint/showfn?","fn-map","color?","and__4115__auto__","f-str","or__4126__auto__","cljs.core/re-find","cljs.core/Symbol","e59703","cljs.core/meta","G__59704","cljs.core/name","e","p__59711","map__59712","zprint.zprint/show-user-fn?","user-fn-map","e59714","cljs.core/empty?","zprint.zprint/right-separator-map","p__59716","p__59717","p__59718","map__59719","map__59720","map__59721","vec__59722","cljs.core.nth","vec__59725","zprint.zprint/good-enough?","caller","width","rightcnt","dbg?","hang-flow","hang-type-flow","hang-flow-limit","general-hang-adjust","hang-if-equal-flow?","hang-expand","hang-diff","hang-size","hang-adjust","fn-style","p-count","indent-diff","p-lines","p-maxwidth","p-length-seq","p-what","b-lines","b-maxwidth","_","b-what","p-last-maxwidth","cljs.core/last","cljs.core.assoc","result","cljs.core/not","zprint.zprint/fix-rightcnt","cljs.core._EQ_","factor","zprint.zprint/in-hang","zprint.zprint/contains-nil?","p1__59737#","cljs.core/some","cljs.core/coll?","zprint.zprint/concat-no-nil-pre-noseq","seq59738","self__4724__auto__","cljs.core/seq","v","o","cljs.core/reduced","cljs.core.conj_BANG_","cljs.core/transient","cljs.core/persistent!","zprint.zprint/concat-no-nil","seq59739","cljs.core/count","vec__59740","what","right-ind","last-element","cljs.core/peek","vec__59743","previous-index","color","previous-what","zprint.zprint/count-right-blanks","new-previous","zprint.zprint/trimr-blanks","zprint.comment/blanks","zprint.zprint/concat-no-nil-pre-right","seq59746","zprint.zprint/remove-one","index","cljs.core.concat","cljs.core.take","cljs.core.drop","zprint.zprint/force-vector","cljs.core/vector?","cljs.core.into","zprint.zprint/keyword-fn?","vec__59750","left","right","clojure.string.split","fexpr__59753","p__59754","map__59755","zprint.zprint/get-max-length","max-length","depth","x__4217__auto__","y__4218__auto__","zprint.zprint/no-max-length","p__59758","vec__59759","zprint.zprint/accumulate-ll","count-comment?","out","cur-len","just-eol?","just-comment?","in","tag","eol?","comment?","count-s","cljs.core.conj","p__59762","p__59763","vec__59764","vec__59767","zprint.zprint/generate-ll","element","vec__59770","l","r","cljs.core/List","zprint.zprint/line-lengths-iter","cljs.core.pr_str","next-vec","current-string","line-length","previous-comment?","vec__59779","vec__59782","advance?","next-string","force-newline?","new-line-length","zprint.zprint/line-lengths","length-vec","vec__59785","cljs.core.partial","zprint.zprint/single-line?","p1__59788#","p2__59789#","p1__59790#","clojure.string/includes?","zprint.zprint/find-what","s-vec","vec__59791","this","zprint.zprint/first-nl?","vec__59794","zprint.zprint/prepend-nl","zprint.zprint.concat_no_nil","zprint.zprint/style-lines","lengths","count-lengths","cljs.core/max","dbg-ge","p__59797","p__59798","map__59799","vec__59800","zprint.zprint/fzfit","line-count","max-width","style-lines-return","zprint.zprint/fzfit-one-line","lines","zprint.zprint/rightmost","zprint.zprint/not-rightmost","cljs.core.dissoc","zprint.zprint/c-r-pair","commas?","rightmost-pair?","rightmost?","zprint.zprint/str->key","p__59804","map__59805","zprint.zprint/zcolor-map","color-map","key-or-str","G__59807","cljs.core/Keyword","zprint.zprint/hangflow","hangflow?","hang-or-flow","zprint.zprint/fzprint-hang-unless-fail","hindent","findent","fzfn","zloc","G__59811","zprint.zfns/zstring","zprint.zfns/zfirst","hanging","cljs.core.not_EQ_","G__59818","G__59819","G__59820","value__46722__auto__","zprint.zprint/replace-color","local-color","vec__59823","vec__59826","string","p__59829","map__59830","map__59831","zprint.zprint/use-hang?","hang-accept","ha-depth-factor","ha-width-factor","hang-count","hanging-line-count","p__59848","p__59849","map__59850","map__59852","vec__59853","zprint.zprint/fzprint-two-up","one-line?","do-in-hang?","map-depth","hang?","dbg-local?","dbg-cnt?","indent","indent-arg","flow?","key-color","key-depth-color","key-value-color","justify-width","lloc","rloc","xloc","pair","zprint.zfns/ztag","vec__59864","vec__59867","local-hang?","local-options","loptions","roptions","local-roptions","value-color-map","G__59870","zprint.zfns/zsexpr","zprint.config.merge_deep","modifier-set","modifier?","G__59879","zprint.zprint/middle-element?","G__59884","arg-1","zprint.zprint/fzprint*","arg-1-newline?","zprint.zfns/znewline?","arg-1-line-count","arg-1-max-width","arg-1-lines","combined-arg-1","G__59885","G__59886","G__59887","arg-1-fit-oneline?","arg-1-fit?","arg-1-width","hanging-width","hanging-spaces","hanging-indent","flow-indent","zprint.zfns/zvector?","vec__59891","zprint.zprint/fzprint-binding-vec","G__59903","G__59904","G__59905","zprint.zfns/zcount","hanging-lines","fit?","flow-it?","flow","flow-lines","G__59923","G__59924","G__59925","G__59926","G__59927","zprint.zprint/fzprint-flow-seq","cljs.core/nnext","p__59938","map__59939","map__59940","zprint.zprint/fzprint-justify-width","justify?","firsts","cljs.core.remove","cljs.core/nil?","p1__59933#","G__59943","G__59944","G__59945","style-seq","each-one-line?","p1__59934#","p2__59935#","p1__59936#","p2__59937#","x__4214__auto__","y__4215__auto__","cljs.core/second","G__59951","zprint.zprint/fit-within?","size","zprint.zprint.fit_within_QMARK_","remaining","zprint.zprint/remove-hangflow","hf-style-vec","p__59964","map__59965","map__59966","zprint.zprint/fzprint-map-two-up","force-nl?","parallel?","caller-map","len","caller-options","justify-options","beginning-coll","cljs.core/butlast","beginning-remaining","beginning","zprint.zprint.zpmap","end-coll","end-remaining","end","temp__5735__auto__","end-result","zprint.zprint/compare-keys","x","y","cljs.core/compare","zprint.zprint/compare-ordered-keys","key-value","zdotdotdot","p__59979","map__59981","map__59982","zprint.zprint/order-out","sort?","sort-in-code?","key-order","in-code?","access","p1__59977#","p2__59978#","cljs.core.sort","zprint.zfns/zdotdotdot","G__59988","G__59989","zprint.zprint/pair-element?","zprint.zfns/zcomment?","zprint.zfns/zuneval?","p__59990","map__59991","zprint.zprint/remove-key-seq","m","ks","this-key","next-key","removed-map","G__59993","G__59994","zprint.zprint/ignore-key-seq-silent","cljs.core.get_in","zprint.zprint/ignore-key-seq","cljs.core/assoc-in","p__59996","map__59997","map__59998","zprint.zprint/map-ignore","key-ignore","key-ignore-silent","ignored-silent","ignored","zprint.zprint/partition-all-2-nc","no-sort?","G__60027","G__60031","vec__60035","new-remaining","pair-vec","new-no-sort?","vec__60038","comment-seq","rest-seq","p1__60013#","cljs.core/split-with","G__60053","G__60054","G__60055","zprint.zprint/cleave-end","G__60067","zprint.zfns/zsymbol?","G__60070","zprint.zfns/zreader-cond-w-symbol?","vec__60076","rev-seq","cljs.core/reverse","split-non-coll","p1__60056#","zprint.zfns/zcoll?","zprint.zfns/zreader-cond-w-coll?","cljs.core/list","remainder","zprint.zprint/partition-all-sym","part-sym","p1__60084#","cljs.core.partition_by","zprint.zfns/znil?","cljs.core.mapcat","vec__60127","next-remaining","new-out","G__60141","cljs.core/ffirst","G__60143","G__60144","G__60162","G__60163","G__60164","cljs.core/nthnext","G__60165","G__60166","cljs.core/cons","G__60168","zprint.zprint/rstr-vec","r-str","r-type","zprint.zprint.rstr_vec","p__60169","map__60170","map__60171","nl-separator?","G__60174","l-str","l-str-vec","r-str-vec","G__60175","G__60176","G__60177","zprint.zprint/interpose-nl-hf","zprint.zprint/fzprint-get-zloc-seq","p__60178","map__60179","zprint.zprint/fzprint-hang","force-eol-blanks?","zloc-count","fexpr__60184","G__60185","G__60186","G__60187","G__60188","hr-lines","fd-lines","hr-good?","p__60189","map__60190","map__60191","zprint.zprint/fzprint-pairs","respect-nl?","zloc-seq","G__60194","G__60195","G__60196","G__60197","vec__60198","part","cljs.core.comp","p__60202","map__60203","map__60204","zprint.zprint/fzprint-extend","G__60207","G__60208","G__60209","G__60210","p1__60201#","zprint.zprint/concatv!","seq60211","G__60212","cols","col","zprint.zprint/fzprint-one-line","seq-right","last-index","gt-1?","new-ind","cljs.core/long","vec__60219","vec__60222","next-zloc","sep","next-options","next-out","next-lines","zprint.zprint.concatv_BANG_","zprint.zprint/fzprint-seq","p1__60225#","p2__60226#","G__60227","G__60228","G__60229","G__60230","G__60231","G__60232","G__60236","nl-first?","coll-print","one-line","cljs.core.interpose","one-line-lines","G__60237","G__60238","G__60239","G__60240","zprint.zprint/precede-w-nl","zprint.zprint.fzprint_flow_seq","p__60243","map__60244","map__60245","zprint.zprint/fzprint-hang-one","hang-avoid","G__60249","G__60250","G__60251","G__60252","zprint.zprint/count-constant-pairs","constant-pair-fn","zloc-seq-rev","element-count","paired-element-count","constant-required?","pair-size","actual-pair-size","comment-or-newline?","zprint.zprint/zcomment-or-newline?","zprint.zfns/zsexpr?","G__60258","zprint.zfns/zconstant?","p__60261","map__60262","map__60263","zprint.zprint/constant-pair","constant-pair?","constant-pair-min","vec__60266","paired-item-count","actual-paired-items","non-paired-item-count","pair-seq","zprint.zprint/ensure-start-w-nl","element-type","zprint.zprint/ensure-end-w-nl","G__60273","zprint.zprint/fzprint-hang-remaining","p__60274","map__60275","map__60276","G__60279","G__60280","vec__60281","vec__60284","vec__60287","vec__60290","hang-result","flow-result","zprint.zprint.fzprint_hang_remaining","zprint.zfns/zmap-w-nl","cljs.core/identity","zprint.zfns/zmap-w-bl","zprint.zfns/zmap","zprint.zprint/newline-or-comment?","zloc-tag","zprint.zprint/remove-last-newline","ssv","last-style-vec","last-len","total-len","remove-one","cljs.core/PersistentVector","zprint.zprint/remove-one-newline","zprint.zprint/add-newline-to-comment","fzprint*-return","the-type","zprint.zprint/gather-up-to-next-zloc","nloc-seq","next-count","p__60296","vec__60297","zprint.zprint/fzprint-up-to-next-zloc","current-count","next-data","starting-count","vec__60300","pre-next-zloc-seq","cljs.core.mapv","cljs.core/vector","coll-out","first-type","zprint.zprint/fzprint-up-to-first-zloc","p__60303","vec__60304","zprint.zprint/get-zloc-seq-right","input-data","zprint.zprint/at-newline?","this-tag","zprint.zprint/next-newline","nloc","next-right","zprint.zutil/right*","zprint.zutil/whitespace?","zprint.zprint/next-actual","next-nloc","zprint.zutil/zrightnws","next-tag","zprint.zutil/tag","zprint.zprint/first-actual","zprint.zprint/hang-zloc?","vec__60307","count-prior-to-newline","newline","second-element","second-indent","zprint.comment/length-before","third-element","third-indent","zprint.zprint/indent-shift","actual-ind","svec","shift-ind","cur-seq","cur-ind","vec__60319","this-seq","new-seq","vec__60322","type","next-seq","this-shift","linecnt","last-width","G__60326","zprint.zprint/indent-zmap","p__60327","map__60328","map__60329","wrap-after-multi?","first-indent-only?","zprint.zprint/merge-fzprint-seq","actual-indent","beginning?","l-str-indent?","vec__60335","multi?","thetype","newline?","comma?","isempty?","newline-next?","zprint.zprint.indent_zmap","zprint.zprint/hang-indent","zprint.zprint/flow-indent","zprint.zprint/newline-seq?","newline-vec","starts-with-nl-vec","p1__60338#","clojure.string/starts-with?","true-seq","cljs.core.distinct","fzprint-seq-vec","p1__60340#","p2__60339#","G__60345","zprint.zprint/fzprint-indent","arg-1-indent","l-str-len","zprint.zfns/zmap-w-nl-comma","indent-only-style","already-hung?","zprint.zutil/down*","raw-indent","coll-print-contains-nil?","output","zprint.zprint.fzprint_indent","zprint.zprint/zfind-seq","zthing?","i","G__60346","zprint.zprint/body-set","zprint.zprint/body-map","zprint.zprint/noarg1-set","zprint.zprint/noarg1-map","zprint.zprint/noarg1","fn-type","zprint.zprint/fn-style->caller","zprint.zprint/get-respect-indent","backup","respect-bl?","indent-only?","p__60347","map__60348","zprint.zprint/allow-one-line?","fn-force-nl","fn-gt2-force-nl","fn-gt3-force-nl","future-caller","zprint.zprint/modify-zloc","vec__60350","trigger-symbol","modify-fn","return-altered-zipper-value","call-fn?","G__60364","return","p__60369","map__60370","zprint.zprint/fzprint-list*","no-arg1?","vec__60376","vec__60379","vec__60382","vec__60385","G__60388","G__60389","G__60390","zprint.zfns/ztake-append","pre-arg-1-style-vec","arg-1-zloc","arg-1-count","first-data","arg-1-coll?","zprint.zfns/zkeyword?","arg-1-indent-alt?","fn-str","G__60391","zprint.config/config-and-validate","pre-arg-2-style-vec","arg-2-zloc","arg-2-count","second-data","zprint.zfns/zcount-zloc-seq-nc-nws","cljs.core.update_in","cljs.core/dissoc","one-line-ok?","fexpr__60392","indent-adj","default-indent","zprint.zfns/zlist?","one-line-ind","vec__60394","binding-style-vec","G__60397","G__60398","G__60399","zloc-seq-right-first","G__60402","G__60403","G__60404","G__60405","G__60406","G__60407","vec__60409","vec__60412","pre-arg-3-style-vec","arg-3-zloc","arg-3-count","third-data","zloc-seq-right-third","first-three","first-two-wo-pre-arg-1","G__60416","G__60417","G__60418","first-two-one-line?","first-two","G__60439","G__60440","G__60441","vec__60446","vec__60449","pre-arg-4-style-vec","arg-4-zloc","arg-4-count","fourth-data","arg-vec-index","p1__60365#","G__60454","doc-string?","mixin-start","mixin-length","mixins?","doc-string","mixins","vec__60461","mixin-sentinal","G__60476","G__60477","G__60478","G__60488","G__60489","G__60490","zloc-seq-right-second","G__60492","G__60493","G__60494","G__60495","G__60496","G__60497","G__60499","G__60500","G__60501","G__60507","G__60508","G__60509","local-indent","zprint.zprint/fzprint-list","zprint.zprint/fzprint-anon-fn","zprint.zprint/any-zcoll?","coll?-seq","p1__60528#","p2__60529#","p__60535","map__60536","map__60537","zprint.zprint/wrap-zmap","previous-newline?","vec__60545","comment-inline?","this-seq-next","zprint.zprint/remove-nl","p1__60548#","zprint.zprint/internal-validate","error-str","errors","zprint.config.validate_options","zprint.zprint/lazy-sexpr-seq","nws-seq","cljs.core/LazySeq","G__60549","G__60550","cljs.core/rest","zprint.zprint/comment-in-zloc-seq?","p1__60552#","p2__60551#","p__60553","map__60554","map__60555","zprint.zprint/fzprint-vec*","wrap-coll?","wrap?","binding?","option-fn-first","option-fn","fn-format","vec__60558","map__60561","map__60562","new-options","first-sexpr","G__60565","zprint.zfns/zfirst-no-comment","zprint.zfns/zwhitespaceorcomment?","zprint.zfns/zseqnws","nws-count","sexpr-seq","zprint.zprint/fzprint-vec","zprint.zprint/fzprint-array","zprint.zprint/fzprint-set","zprint.zprint/interpose-either","sep-true","sep-nil","pred?","interpose?","zprint.zprint.conj_it_BANG_","G__60604","not-first?","ind-seq","added-nl?","previous-element-index","previous-type","vec__60645","vec__60648","last-what","next-ind","next-coll","vec__60655","vec__60659","next-what","zprint.zprint/count-newline-types","newline-style-vec","count-of-types","p1__60666#","clojure.string/ends-with?","zprint.zprint/repeat-style-vec-nl","no-space-n","vec__60688","no-space-element","no-space-style-vec","p__60694","vec__60695","zprint.zprint/trimr-blanks-element","zprint.zprint/trimr-blanks-style-vec","zprint.zprint/repeat-element-nl","vec__60707","zprint.zprint/next-non-comment-nl","vec__60717","vec__60720","p__60724","map__60725","zprint.zprint/interpose-either-nl-hf","sep-comma","sep-comma-nl","sep-nl","nl-separator-all?","suboptions","previous-needs-comma?","add-nl?","first?","newline-count","vec__60772","vec__60775","hangflow","vec__60785","interpose-style-vec","interpose-count","addtl-nl-needed","p__60827","map__60828","map__60829","zprint.zprint/fzprint-map*","ztype","lift-ns?","lift-ns-in-code?","map-options","ns","vec__60836","vec__60848","vec__60851","zprint.zfns/zseqnws-w-nl","zprint.zfns/zseqnws-w-bl","lift-pair-seq","G__60862","G__60863","G__60864","zprint.zfns/zlift-ns","pair-count","pair-print-one-line","cljs.core/constantly","pair-print","zprint.zprint/fzprint-map","vec__60888","lifted-map","zprint.zfns/znamespacedmap?","G__60900","zprint.zprint/object-str?","G__60917","zprint.zprint/fzprint-object","zloc-value","zprint.zfns/zobj-to-vec","zprint.zprint/hash-identity-str","obj","cljs.core/hash","p__60926","map__60928","map__60929","zprint.zprint/fzprint-atom","object?","zprint.zprint.fzprint_object","zprint.zfns/zderef","zprint.zprint/fzprint-future-promise-delay-agent","zloc-type","zprint.zfns/zfuture?","zprint.zfns/zpromise?","zprint.zfns/zdelay?","zprint.zfns/zagent?","cljs.core/realized?","type-str","G__60950","zloc-realized?","G__60952","p__60957","map__60958","map__60959","zprint.zprint/fzprint-fn-obj","arg-1-left","arg-1-right","class-str","cljs.core/type","name-js","name-split","arg-2","zprint.zprint/fzprint-ns","cljs.core/ns-name","zprint.zprint/dec-depth","p__61001","map__61002","map__61003","zprint.zprint/fzprint-record","record-type?","to-string?","G__61007","G__61008","G__61009","G__61012","G__61013","G__61014","clojure.string/replace","tokens","zprint.zprint/fzprint-meta","zprint.zprint/fzprint-reader-macro","vec__61034","zstr","G__61037","alt-at?","reader-cond?","namespaced?","at?","G__61040","zprint.zfns/zsecond","G__61053","G__61055","floc","G__61057","l-str-io","r-str-io","l-str-vec-io","r-str-vec-io","zprint.zfns/znextnws-w-nl","zprint.zprint/fzprint-newline","vec__61064","zprint.finish/newline-vec","zprint.zprint/prefix-tags","zprint.zprint/prefix-options","prefix-tag","zprint.zprint/make-caller","new-caller","existing-caller","key-seq","p1__61069#","p__61082","map__61084","hex?","shift-seq","string-str?","string-color","max-depth","trim-comments?","max-hang-depth","max-hang-span","max-hang-count","next-inner","cljs.core/deref","avail","dbg-data","dbg-focus?","zprint.zfns/zfind-path","zprint.zfns/zrecord?","zprint.zfns/zmap?","zprint.zfns/zset?","zprint.zfns/zanonfn?","zprint.zfns/zfn-obj?","zprint.zfns/zarray?","zprint.zfns/zexpandarray","zprint.zfns/zatom?","zprint.zfns/zmeta?","G__61123","G__61125","zprint.zfns/zns?","zprint.zfns/zreader-macro?","overflow-in-hang?","zcomment","clojure.string/trimr","inline-comment-vec","zprint.comment/inlinecomment?","zloc-sexpr","zprint.zfns/znumstr","cljs.core/char?","c__4162__auto__","x__4163__auto__","zprint.zprint/fzprint","zprint.zutil/add-spec-to-docstring","zprint.zprint/line-count","cljs.core/re-seq","zprint.zprint/line-widths","zprint.zprint/max-width","G__61158","zprint.zprint/expand-tabs","tab-size","char-seq","this-char","tab-expansion","cljs.core/mod","zprint.zprint.expand_tabs","zprint.zprint/determine-ending-split-lines","first-lines","nl-count","p1__61164#","p2__61163#","line-ending","this__4380__auto__","k__4381__auto__","this__4382__auto__","k61172","else__4383__auto__","G__61185","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","ret__4402__auto__","p__61188","vec__61190","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","G__61171","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this61173","other61174","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__61204","cljs.core/keyword-identical?","expr__61205","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/-nth","cljs.core/-conj","zprint.zprint/r","this__4423__auto__","writer__4424__auto__","cljs.core/-write","G__61175","extmap__4419__auto__","G__61221","cljs.core/record?","zprint.zprint/->r","zprint.zprint/map->r","zprint.zprint/make-record"],"sourcesContent":["(ns ^:no-doc zprint.zprint\n  #?@(:cljs [[:require-macros\n              [zprint.macros :refer [dbg dbg-pr dbg-form dbg-print zfuture]]]])\n  (:require\n    #?@(:clj [[zprint.macros :refer [dbg-pr dbg dbg-form dbg-print zfuture]]])\n    [clojure.string :as s]\n    [zprint.finish :refer [newline-vec]]\n    [zprint.zfns :refer\n     [zstring znumstr zbyte-array? zcomment? zsexpr zseqnws zseqnws-w-nl\n      zfocus-style zstart zfirst zfirst-no-comment zsecond znthnext zcount zmap\n      zanonfn? zfn-obj? zfocus zfind-path zwhitespace? zlist?\n      zcount-zloc-seq-nc-nws zvector? zmap? zset? zcoll? zuneval? zmeta? ztag\n      zlast zarray? zatom? zderef zrecord? zns? zobj-to-vec zexpandarray\n      znewline? zwhitespaceorcomment? zmap-all zpromise? zfuture? zdelay?\n      zkeyword? zconstant? zagent? zreader-macro? zarray-to-shift-seq zdotdotdot\n      zsymbol? znil? zreader-cond-w-symbol? zreader-cond-w-coll? zlift-ns zfind\n      zmap-w-nl zmap-w-nl-comma ztake-append znextnws-w-nl znextnws\n      znamespacedmap? zmap-w-bl zseqnws-w-bl zsexpr?]]\n    [zprint.comment :refer [blanks inlinecomment? length-before]]\n    [zprint.ansi :refer [color-str]]\n    [zprint.config :refer [validate-options merge-deep]]\n    [zprint.zutil :refer [add-spec-to-docstring]]\n    [rewrite-clj.parser :as p]\n    [rewrite-clj.zip :as z]\n    #_[taoensso.tufte :as tufte :refer (p defnp profiled profile)]))\n\n#_(tufte/add-basic-println-handler! {})\n\n;;\n;; # Utility Functions\n;;\n\n(defn dots\n  \"Produce a dot string of desired size.\"\n  [n]\n  (apply str (repeat n \".\")))\n\n; This is about 10% faster than:\n;\n;(defn conj-it!-orig\n;  \"Make a version of conj! that take multiple arguments.\"\n;  [& rest]\n;  (loop [out (first rest)\n;         more (next rest)]\n;    (if more (recur (conj! out (first more)) (next more)) out)))\n\n(defn conj-it!\n  \"Make a version of conj! that takes multiple arguments.\"\n  [to & rest]\n  (reduce conj! to rest))\n\n(defn split-lf-2\n  \"Do split for newlines, instead of using regular expressions.\n  Maximum split is 2.\"\n  [s]\n  (if-let [next-lf (clojure.string/index-of s \"\\n\")]\n    [(subs s 0 next-lf) (subs s (inc next-lf))]\n    [s]))\n\n;;\n;; # Use pmap when we have it\n;;\n\n#?(:clj (defn zpmap\n          ([options f coll]\n           (if (:parallel? options) (pmap f coll) (map f coll)))\n          ([options f coll1 coll2]\n           (if (:parallel? options) (pmap f coll1 coll2) (map f coll1 coll2))))\n   :cljs (defn zpmap\n           ([options f coll] (map f coll))\n           ([options f coll1 coll2] (map f coll1 coll2))))\n\n;;\n;; # More parallelism issues -- zderef to go with zfuture macro\n;;\n\n(defn zat\n  \"Takes an option map and the return from zfuture.  If the\n  options map has (:parallel? options) as true, then deref\n  the value, otherwise just pass it through.\"\n  [options value]\n  #?(:clj (if (:parallel? options) (deref value) value)\n     :cljs value))\n\n;;\n;; # Debugging Assistance\n;;\n\n(def fzprint-dbg (atom nil))\n\n(defn log-lines\n  \"Accept a style-vec that we are about to hand to style-lines, and\n  output it if called for, to aid in debugging.\"\n  [{:keys [dbg-print? dbg-indent in-hang?], :as options} dbg-output ind\n   style-vec]\n  (when dbg-print?\n    (if style-vec\n      (do (println dbg-indent dbg-output \"--------------\" \"in-hang?\" in-hang?)\n          (prn style-vec)\n          #_(println (apply str (blanks ind) (map first style-vec))))\n      (println dbg-indent dbg-output \"--------------- no style-vec\"))))\n\n;;\n;; # What is a function?\n;;\n\n(defn showfn?\n  \"Show this thing as a function?\"\n  [{:keys [fn-map color?], :as options} f]\n  (when (and color? (not (string? f)))\n    (let [f-str (str f)\n          fn-map (:fn-map options)]\n      (or (fn-map f-str)\n          (re-find #\"clojure\" f-str)\n          (if (symbol? f)\n            ; This is necessary because f can be a symbol that\n            ; resolve will have a problem with.  The obvious ones\n            ; were (ns-name <some-namespace>), but there are almost\n            ; certainly others.\n            (try (or (re-find #\"clojure\"\n                              (str (:ns (meta #?(:clj (resolve f)\n                                                 :cljs f)))))\n                     (fn-map (name f)))\n                 (catch #?(:clj Exception\n                           :cljs :default)\n                   e\n                   nil)))))))\n\n(defn show-user-fn?\n  \"Show this thing as a user defined function?  Assumes that we\n  have already handled any clojure defined functions!\"\n  [{:keys [user-fn-map color?], :as options} f]\n  (when (and color? (not (string? f)))\n    (let [f-str (str f)]\n      (or (get user-fn-map f-str)\n          (if (symbol? f)\n            ; This is necessary because f can be a symbol that\n            ; resolve will have a problem with.  The obvious ones\n            ; were (ns-name <some-namespace>), but there are almost\n            ; certainly others.\n            (try (or (not (empty? (str (:ns (meta #?(:clj (resolve f)\n                                                     :cljs f))))))\n                     (get user-fn-map (name f)))\n                 (catch #?(:clj Exception\n                           :cljs :default)\n                   e\n                   nil)))))))\n\n(def right-separator-map {\")\" 1, \"]\" 1, \"}\" 1})\n\n;;\n;; # Functions to compare alternative printing approaches\n;;\n\n(declare fix-rightcnt)\n(declare contains-nil?)\n\n(defn good-enough?\n  \"Given the fn-style, is the first output good enough to be worth\n  doing. p is pretty, which is typically hanging, and b is basic, which\n  is typically flow. p-count is the number of elements in the hang.\"\n  [caller\n   {:keys [width rightcnt dbg?],\n    {:keys [hang-flow hang-type-flow hang-flow-limit general-hang-adjust\n            hang-if-equal-flow?]}\n      :tuning,\n    {:keys [hang-expand hang-diff hang-size hang-adjust]} caller,\n    :as options} fn-style p-count indent-diff\n   [p-lines p-maxwidth p-length-seq p-what] [b-lines b-maxwidth _ b-what]]\n  (let [p-last-maxwidth (last p-length-seq)\n        hang-diff (or hang-diff 0)\n        hang-expand (or hang-expand 1000.)\n        hang-adjust (or hang-adjust general-hang-adjust)\n        #_(options (if (and p-lines\n                            p-count\n                            (pos? p-count)\n                            (not (<= indent-diff hang-diff))\n                            (not (<= (/ (dec p-lines) p-count) hang-expand)))\n                     (assoc options :dbg? true)\n                     options))\n        options (if (or p-what b-what) (assoc options :dbg? true) options)\n        result (if (not b-lines)\n                 true\n                 (and p-lines\n                      ; Does the last line fit, including the collection ending\n                      ; stuff?\n                      ; Do we really need this anymore?\n                      (<= p-last-maxwidth (- width (fix-rightcnt rightcnt)))\n                      ; Does it widest line fit?\n                      ; Do we have a problem if the widest line has a rightcnt?\n                      (<= p-maxwidth width)\n                      ;      (<= p-maxwidth (- width (fix-rightcnt rightcnt)))\n                      (or (zero? p-lines)\n                          (and ; do we have lines to operate on?\n                            (> b-lines 0)\n                            (> p-count 0)\n                            ; if the hang and the flow are the same size, why\n                            ; not\n                            ; hang?\n                            (if (and (= p-lines b-lines) hang-if-equal-flow?)\n                              true\n                              ; is the difference between the indents so small\n                              ; that\n                              ; we don't care?\n                              (and (if (<= indent-diff hang-diff)\n                                     true\n                                     ; Do the number of lines in the hang exceed\n                                     ; the number\n                                     ; of elements in the hang?\n                                     (<= (/ (dec p-lines) p-count) hang-expand))\n                                   (if hang-size (< p-lines hang-size) true)\n                                   (let [factor (if (= fn-style :hang)\n                                                  hang-type-flow\n                                                  hang-flow)]\n                                     ; if we have more than n lines, take the\n                                     ; shortest\n                                     (if (> p-lines hang-flow-limit)\n                                       (<= (dec p-lines) b-lines)\n                                       ; if we have less then n lines, we don't\n                                       ; necessarily\n                                       ; take the shortest\n                                       ; once we did (dec p-lines) here, fwiw\n                                       ; then we tried it w/out the dec, now we\n                                       ; let you\n                                       ; set it in :tuning.  The whole point of\n                                       ; having a\n                                       ; hang-adjust of -1 is to allow hangs\n                                       ; when\n                                       ; the\n                                       ; number of lines in a hang is the same\n                                       ; as\n                                       ; the\n                                       ; number of lines in a flow.\n                                       ;(< (/ p-lines b-lines) factor)))))))]\n                                       (< (/ (+ p-lines hang-adjust) b-lines)\n                                          factor)))))))))]\n    (dbg options\n         (if result \"++++++\" \"XXXXXX\")\n         \"p-what\" p-what\n         \"good-enough? caller:\" caller\n         \"fn-style:\" fn-style\n         \"width:\" width\n         \"rightcnt:\" rightcnt\n         \"hang-expand:\" hang-expand\n         \"p-count:\" p-count\n         \"p-lines:\" p-lines\n         \"p-maxwidth:\" p-maxwidth\n         \"indent-diff:\" indent-diff\n         \"hang-diff:\" hang-diff\n         \"p-last-maxwidth:\" p-last-maxwidth\n         \"b-lines:\" b-lines\n         \"b-maxwidth:\" b-maxwidth)\n    result))\n\n;;\n;; # Utility Functions\n;;\n\n(defn in-hang\n  \"Add :in-hang? true to the options map.\"\n  [options]\n  (if (:in-hang? options)\n    options\n    (if (:do-in-hang? options)\n      (assoc options :in-hang? (or (:depth options) true))\n      options)))\n\n(defn contains-nil?\n  \"Scan a collection, and return true if it contains any nils or empty\n  collections.\"\n  [coll]\n  (some #(if (coll? %) (empty? %) (nil? %)) coll))\n\n#_(defn concat-no-nil-alt\n    \"Concatentate multiple sequences, but if any of them are nil, return nil.\n  This version is 15-20% slower than the version below. Keeping it around\n  just for illustrative purposes.\"\n    [& rest]\n    (loop [coll rest\n           out (transient [])]\n      (let [c (first coll)]\n        (if-not c\n          (persistent! out)\n          (when (or (and (coll? c) (not (empty? c))) (not (nil? c)))\n            (recur (next coll) (conj! out c)))))))\n\n(defn concat-no-nil-pre-noseq\n  \"Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil.\"\n  [& rest]\n  (let [result (reduce (fn [v o]\n                         (if (coll? o)\n                           (if (empty? o) (reduced nil) (reduce conj! v o))\n                           (if (nil? o) (reduced nil) (conj! v o))))\n                 (transient [])\n                 rest)]\n    (when result (persistent! result))))\n\n(declare count-right-blanks)\n(declare trimr-blanks)\n\n(defn concat-no-nil\n  \"Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil. If any of them are :noseq, just skip them.\n  When complete, check the last element-- if it is a :right, and if it\n  the previous element is a :newline or :indent, then ensure that the\n  number of spaces in that previous element matches the number to the\n  right of the :right.\"\n  [& rest]\n  (let [result (reduce (fn [v o]\n                         (if (coll? o)\n                           (if (empty? o) (reduced nil) (reduce conj! v o))\n                           (if (= :noseq o)\n                             ; if the supposed sequence is :noseq, skip it\n                             v\n                             (if (nil? o) (reduced nil) (conj! v o)))))\n                 (transient [])\n                 rest)]\n    (when result\n      (let [result (persistent! result)]\n        (if (< (count result) 2)\n          result\n          (let [[_ _ what right-ind :as last-element] (peek result)]\n            (if (= what :right)\n              ; we have a right paren, bracket, brace as the last thing\n              (let [previous-index (- (count result) 2)\n                    [s color previous-what] (nth result previous-index)]\n                (if (or (= previous-what :newline) (= previous-what :indent))\n                  ; we have a newline or equivalent before the last thing\n                  (if (= (count-right-blanks s) right-ind)\n                    ; we already have the right number of blanks!\n                    result\n                    (let [new-previous [(str (trimr-blanks s)\n                                             (blanks right-ind)) color\n                                        previous-what]]\n                      (assoc result previous-index new-previous)))\n                  result))\n              result)))))))\n\n\n(defn concat-no-nil-pre-right\n  \"Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil. If any of them are :noseq, just skip them.\"\n  [& rest]\n  (let [result (reduce (fn [v o]\n                         (if (coll? o)\n                           (if (empty? o) (reduced nil) (reduce conj! v o))\n                           (if (= :noseq o)\n                             ; if the supposed sequence is :noseq, skip it\n                             v\n                             (if (nil? o) (reduced nil) (conj! v o)))))\n                 (transient [])\n                 rest)]\n    (when result (persistent! result))))\n\n(defn remove-one\n  \"Remove a single thing from a sequence.\"\n  [s index]\n  (concat (take index s) (drop (inc index) s)))\n\n(defn force-vector\n  \"Ensure that whatever we have is a vector.\"\n  [coll]\n  (if (vector? coll) coll (into [] coll)))\n\n(defn keyword-fn?\n  \"Takes a string, and returns the fn-style if it is a keyword and\n  without the : it can be found in the fn-map.\"\n  [options s]\n  (let [[left right] (clojure.string/split s #\"^:\")]\n    (when right ((:fn-map options) right))))\n\n(defn get-max-length\n  \"Given the options map, return the max length.  This might be\n  a constant number, but it might be based on the depth as well.\n  Returns nil of there is no max-length set.\"\n  [{:as options, :keys [max-length depth]}]\n  (when max-length\n    (if (vector? max-length)\n      (nth max-length (min (dec depth) (dec (count max-length))))\n      max-length)))\n\n(defn no-max-length\n  \"Given an options map, return another options map with no\n  :max-length key.  This is to that you can call a routine that\n  normally deals with :max-length and get it to do the normal\n  thing.\"\n  [options]\n  (assoc options :max-length 10000))\n\n;;\n;; # Work with style-vecs and analyze results\n;;\n\n;; Transients don't help here, though they don't hurt much either.\n\n(defn accumulate-ll\n  \"Take the vector carrying the intermediate results, and\n  do the right thing with a new string. Vector is\n  [ 0 out - vector accumulating line lengths \n    1 cur-len - length of current line\n    just-eol? - did we just do an eol?\n    ]\n  s - string to add to current line\n  tag - element type of string (comment's don't count in length)\n  eol? - should we terminate line after adding count of s\"\n  [count-comment? [out cur-len just-eol? just-comment? :as in] s tag eol?]\n  (let [comment? (or (= tag :comment) (= tag :comment-inline))\n        count-s (if (and comment? (not count-comment?)) 0 (count s))]\n    (cond\n      ; if we are told to terminate the line or it\n      ; is a comment, we terminate the line with the\n      ; size of the string added to it\n      (or (and eol? (not (and just-eol? (zero? count-s)))) comment?)\n        [(conj out (+ cur-len count-s)) 0 true comment?]\n      ;(assoc in 0 (conj out (+ cur-len count-s)) 1 0 2 true 3 comment?)\n      ; no reason to terminate the line, just accumulate\n      ; the size in cur-len\n      :else [out (+ cur-len count-s) nil comment?])))\n\n(defn generate-ll\n  [count-comment? [out cur-len just-eol? just-comment? :as in]\n   [s _ tag :as element]]\n  (let [[l r] (if (or (= tag :whitespace) (= tag :indent) (= tag :newline))\n                (split-lf-2 s)\n                (list s))\n        ; if tag = :comment, shouldn't have \\n and\n        ; therefore shouldn't have r\n        ; if r is non-nil, then we had a newline, so we want to\n        ; terminate the current line\n        ; if we are already in a comment and we have something\n        ; that is not whitespace, then we want to terminate the\n        ; current line\n        in (accumulate-ll count-comment? in l tag (not (nil? r)))\n        in (if (empty? r) in (accumulate-ll count-comment? in r tag nil))]\n    in))\n\n\n(defn line-lengths-iter\n  \"Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments elsewhere.\n  Note that only vectors with :whitespace, :indent, or :newline are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character. A single comment is counted as two lines. Lots of edge\n  conditions that are really quite important.\"\n  [options ind style-vec]\n  (let [count-comment? (:count? (:comment options))\n        ind (if (coll? ind) (first ind) ind)]\n    (dbg-pr options \"line-lengths-iter: style-vec:\" style-vec)\n    (loop [next-vec style-vec\n           current-string nil\n           line-length ind\n           previous-comment? nil\n           out []]\n      (if (or (and (empty? next-vec) (empty? current-string)))\n        ; A trailing newline isn't counted.\n        (cond (and (zero? line-length) (not previous-comment?)) out\n              previous-comment? (conj out line-length 0)\n              :else (conj out line-length))\n        (let [advance? (empty? current-string)\n              [next-string _ tag] (when advance? (first next-vec))\n              comment? (or (= tag :comment) (= tag :comment-inline))\n              s (if advance? next-string current-string)\n              [l r] (when s\n                      ; if we have a current-string, then we are looking for\n                      ; newlines\n                      (cond (and comment? (not count-comment?)) [\"\"]\n                            (or (and advance?\n                                     (or (= tag :whitespace)\n                                         (= tag :newline)\n                                         (= tag :indent)))\n                                current-string)\n                              (split-lf-2 s)\n                            :else [s]))\n              ; If r non-nil, we had a newline at end of l.\n              ; If we had a previous-comment, then we want to\n              ; imply a newline unless we have a newline at the\n              ; start of s.\n              ; If r is non-nil, and l is empty, then the newline\n              ; was at the front of r, in which case we don't need to\n              ; do an implied newline for the comment (if any).\n              ; Choices:\n              ;  leave l and r alone\n              ;  l becomes nil and r is (str l r)\n              force-newline? (and previous-comment? (not (empty? l)))\n              #_(prn \"l:\" l\n                     \"r:\" r\n                     \"force-newline?\" force-newline?\n                     \"comment?\" comment?)\n              r (if force-newline? (str l r) r)\n              l (if force-newline? nil l)\n              new-line-length (+ line-length (count l))]\n          #_(prn \"current-string:\" current-string\n                 \"line-length:\" line-length\n                 \"advance?\" advance?\n                 \"s:\" s\n                 \"l:\" l\n                 \"r:\" r\n                 \"new-line-length:\" new-line-length)\n          (recur (if advance? (next next-vec) next-vec)\n                 r\n                 (if r 0 new-line-length)\n                 comment?\n                 (if r (conj out new-line-length) out)))))))\n\n(defn line-lengths\n  \"Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments at the\n  end. Note that only vectors with :whitespace or :indent are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character.\"\n  [options ind style-vec]\n  (let [length-vec (first ; this final accumulate-ll is to terminate the last\n                          ; line, the one in progress\n                     (let [count-comment? (:count? (:comment options))\n                           [_ _ just-eol? just-comment? :as result]\n                             (reduce (partial generate-ll count-comment?)\n                               [[] (if (coll? ind) (first ind) ind) nil nil]\n                               style-vec)]\n                       (if (and just-eol? (not just-comment?))\n                         result\n                         (accumulate-ll count-comment?\n                                        (assoc result 2 nil)\n                                        \"\"\n                                        nil\n                                        true))))]\n    (dbg-pr options\n            \"line-lengths: style-vec:\" style-vec\n            \"ind:\" ind\n            \"length-vec:\" length-vec)\n    length-vec))\n\n(defn single-line?\n  \"This looks at a style vec and doesn't do all that style-lines does.\n  It just looks for a new-line in the strings, and returns true if it\n  doesn't find one.\"\n  [style-vec]\n  #_(prn \"style-vec:\" style-vec)\n  (not (reduce #(or %1 %2)\n         false\n         (map #(clojure.string/includes? (first %) \"\\n\") style-vec))))\n\n(defn find-what\n  \"Given a style-vec, come up with a string that gives some hint of \n  where this style-vec came from.\"\n  [style-vec]\n  (loop [s-vec style-vec]\n    (when s-vec\n      (let [[what _ this] (first s-vec)]\n        (if (= this :element) what (recur (next s-vec)))))))\n\n(defn first-nl?\n  \"Look at a style vec ready to be given to concat-no-nil, and see if\n  the first thing in there is a newline of some sort.\"\n  [style-vec]\n  (let [[s color what] (first style-vec)]\n    (or (= what :newline) (= what :indent))))\n\n(defn prepend-nl\n  \"Given an indent ind and a style-vec coll, place a newline (actually an\n  indent) at the front of coll.  If the first thing in coll is a newline,\n  then don't add any spaces after the newline that we prepend.\"\n  [options ind coll]\n  (concat-no-nil [[(str \"\\n\" (blanks (if (first-nl? coll) 0 ind))) :none :indent\n                   1]]\n                 coll))\n\n; Debugging help to find differences between line-lengths and\n; line-lengths-iter.  Surprisingly helpful!\n#_(defonce lldiff (atom []))\n\n(defn style-lines\n  \"Take a style output, and tell us how many lines it takes to print it\n  and the maximum width that it reaches. Returns \n  [<line-count> <max-width> [line-lengths]].\n  Doesn't require any max-width inside the style-vec. Also returns the\n  line lengths in case that is helpful (since we have them anyway).\n  If (:dbg-ge options) has value, then uses find-what to see if what it\n  finds matches the value, and if it does, place the value in the\n  resulting vector.\"\n  [options ind style-vec]\n  (when (and style-vec (not (empty? style-vec)) (not (contains-nil? style-vec)))\n    (let [;lengths (line-lengths options ind style-vec)\n          lengths (line-lengths-iter options ind style-vec)\n          count-lengths (count lengths)\n          result [count-lengths (if (zero? count-lengths) 0 (apply max lengths))\n                  lengths]\n          dbg-ge (:dbg-ge options)\n          what (when (and dbg-ge (= (find-what style-vec) dbg-ge)) dbg-ge)]\n      #_(when (not= lengths lengths-iter) (swap! lldiff conj style-vec))\n      (if what (conj result what) result))))\n\n(defn fzfit\n  \"Given output from style-lines and options, see if it fits the width.  \n  Return the number of lines it takes if it fits, nil otherwise.\"\n  [{:keys [width rightcnt dbg?], :as options}\n   [line-count max-width :as style-lines-return]]\n  (dbg options\n       \"fzfit: fixed-rightcnt:\" (fix-rightcnt rightcnt)\n       \"line-count:\" line-count\n       \"max-width:\" max-width\n       \"width:\" width)\n  (when style-lines-return\n    (if (<= max-width (- width (fix-rightcnt rightcnt))) line-count nil)))\n\n(defn fzfit-one-line\n  \"Given the return from style-lines  and options, \n  return true if it fits on a single line.\"\n  [options style-lines-return]\n  (let [lines (fzfit options style-lines-return)]\n    (and (number? lines) (= lines 1))))\n\n;;\n;; # Handle Rightmost Size\n;;\n\n(defn rightmost\n  \"Increase the rightmost count, if any, and return one if not.\"\n  [options]\n  (assoc options :rightcnt (inc (:rightcnt options 0))))\n\n(defn not-rightmost\n  \"Remove the rightmost count.\"\n  [options]\n  (dissoc options :rightcnt))\n\n(defn c-r-pair\n  \"Handle the complexity of commas and rightmost-pair with options.\n  If it isn't a rightmost, it loses rightmost status.\n  If it is a rightmost, and in the rightmost pair, it gain one rightmost\n  since it has the right end thing (and we don't care about the comma).\n  If it is the rightmost of the non-rightmost-pair, then the comma\n  matters, and we handle that appropriately.  Whew!\"\n  [commas? rightmost-pair? rightmost? options]\n  (if-not rightmost?\n    (not-rightmost options)\n    (if rightmost-pair?\n      options\n      (if commas?\n        (rightmost (not-rightmost options))\n        (not-rightmost options)))))\n\n(defn fix-rightcnt\n  \"Handle issue with rightcnt.\"\n  [rightcnt]\n  (if (number? rightcnt) rightcnt 0))\n\n;;\n;; # First pass at color -- turn string or type into keyword color\n;;\n\n;;\n;; ## Translate from a string to a keyword as needed.\n;;\n\n(def str->key\n  {\"(\" :paren,\n   \")\" :paren,\n   \"[\" :bracket,\n   \"]\" :bracket,\n   \"{\" :brace,\n   \"}\" :brace,\n   \"#{\" :hash-brace,\n   \"#(\" :hash-paren,\n   \"#_\" :uneval,\n   \"'\" :quote,\n   \"`\" :syntax-quote,\n   \"~\" :unquote,\n   \"~@\" :unquote-splicing,\n   \"@\" :deref})\n\n\n(defn zcolor-map\n  \"Look up the thing in the zprint-color-map.  Accepts keywords or\n  strings.\"\n  [{:keys [color-map color?], :as options} key-or-str]\n  ; If we aren't doing color, don't even bother to do the lookup\n  (if color?\n    (color-map (if (keyword? key-or-str) key-or-str (str->key key-or-str)))\n    :none))\n\n\n;;\n;; ## Pretty Printer Code\n;;\n\n(declare fzprint*)\n(declare fzprint-flow-seq)\n\n(defn hangflow\n  \"Take a style-vec, and if hangflow? is true, return a\n  vector [hang-or-flow style-vec], else return style-vec.\n  But a nil style-vec returns nil.\"\n  [hangflow? hang-or-flow style-vec]\n  (when style-vec (if hangflow? [hang-or-flow style-vec] style-vec)))\n\n(defn fzprint-hang-unless-fail\n  \"Try to hang something and if it doesn't hang at all, then flow it,\n  but strongly prefer hang.  Has hang and flow indents, and fzfn is the\n  fzprint-? function to use with zloc.  Callers need to know whether this\n  was hang or flow, so it returns [{:hang | :flow} style-vec] all the time.\"\n  [options hindent findent fzfn zloc]\n  (dbg options\n       \"fzprint-hang-unless-fail: hindent:\" hindent\n       \"findent:\" findent\n       \"zloc:\" (zstring (zfirst zloc)))\n  ; If the hindent is different than the findent, we'll try hang, otherwise\n  ; we will just do the flow\n  (let [hanging (when (not= hindent findent)\n                  (fzfn (in-hang options) hindent zloc))]\n    (dbg-form\n      options\n      \"fzprint-hang-unless-fail: exit:\"\n      (if (and hanging (fzfit options (style-lines options hindent hanging)))\n        [:hang hanging]\n        ; hang didn't work, do flow\n        (do (dbg options \"fzprint-hang-unless-fail: hang failed, doing flow\")\n            [:flow\n             (prepend-nl options findent (fzfn options findent zloc))])))))\n\n(defn replace-color\n  \"Given a style-vec with exactly one thing in it, replace the color\n  with whatever local color we have determined is correct.\"\n  [local-color style-vec]\n  (if (= (count style-vec) 1)\n    (let [[[string color element]] style-vec] [[string local-color element]])\n    style-vec))\n\n(declare fzprint-binding-vec)\n(declare middle-element?)\n\n(defn use-hang?\n  \"This routine tries to figure out if existing hang should be used without\n  even bothering to do a flow and compare them with good-enough?.\"\n  [caller\n   {:keys [depth width],\n    {:keys [hang-accept ha-depth-factor ha-width-factor]} caller,\n    :as options} ind hang-count hanging-line-count]\n  (when (and hanging-line-count hang-accept (pos? hang-count))\n    #_(prn \"use-hang? caller:\" caller \"(/ ind width):\" (double (/ ind width)))\n    (let [hang-accept (+ hang-accept\n                         (* depth ha-depth-factor)\n                         (* (/ ind width) ha-width-factor))]\n      (<= (/ (dec hanging-line-count) hang-count) hang-accept))))\n\n;;\n;; Performance Debugging\n;;\n\n#_(def pass-count (atom 0))\n#_(defn reset-pass-count! [] (reset! pass-count 0))\n#_(defn inc-pass-count [] (swap! pass-count inc))\n#_(defn print-pass-count [] (println \"pass-count:\" @pass-count))\n\n(defn fzprint-two-up\n  \"Print a single pair of things (though it might not be exactly a\n  pair, given comments and :extend and the like), like bindings in\n  a let, clauses in a cond, keys and values in a map.  Controlled\n  by various maps, the key of which is caller.  Returns \n  [:hang <style-vec>] or [:flow <style-vec>] so that the upstream folks\n  know whether this was a hang or flow and can do the right thing\n  based on that.\"\n  [caller\n   {:keys [one-line? dbg? dbg-indent in-hang? do-in-hang? map-depth],\n    {:keys [hang? dbg-local? dbg-cnt? indent indent-arg flow? key-color\n            key-depth-color key-value-color]}\n      caller,\n    :as options} ind commas? justify-width rightmost-pair?\n   [lloc rloc xloc :as pair]]\n  (if dbg-cnt? (println \"two-up: caller:\" caller \"hang?\" hang? \"dbg?\" dbg?))\n  (if (or dbg? dbg-local?)\n    (println\n      (or dbg-indent \"\")\n      \"==========================\"\n      (str \"\\n\" (or dbg-indent \"\"))\n      (pr-str \"fzprint-two-up:\" (zstring lloc)\n              \"tag:\" (ztag lloc)\n              \"caller:\" caller\n              \"count:\" (count pair)\n              \"ind:\" ind\n              \"indent:\" indent\n              \"indent-arg:\" indent-arg\n              \"justify-width:\" justify-width\n              \"one-line?:\" one-line?\n              \"hang?:\" hang?\n              \"in-hang?\" in-hang?\n              \"do-in-hang?\" do-in-hang?\n              \"flow?\" flow?\n              \"commas?\" commas?\n              \"rightmost-pair?\" rightmost-pair?)))\n  (let [local-hang? (or one-line? hang?)\n        indent (or indent indent-arg)\n        local-options\n          (if (not local-hang?) (assoc options :one-line? true) options)\n        loptions (c-r-pair commas? rightmost-pair? nil options)\n        roptions (c-r-pair commas? rightmost-pair? :rightmost options)\n        local-roptions\n          (c-r-pair commas? rightmost-pair? :rightmost local-options)\n        ; If we have a key-value-color map, and the key we have matches any\n        ; of the keys in the map, then merge the resulting color-map elements\n        ; into the current color-map.  Could be problematic if lloc is a\n        ; modifier, but at present modifiers are only for extend and\n        ; key-value-color is only for maps, so they can't both show up\n        ; at once.\n        value-color-map (and key-value-color (key-value-color (zsexpr lloc)))\n        local-roptions (if value-color-map\n                         (merge-deep local-roptions\n                                     {:color-map value-color-map})\n                         local-roptions)\n        roptions (if value-color-map\n                   (merge-deep roptions {:color-map value-color-map})\n                   roptions)\n        ; It is possible that lloc is a modifier, and if we have exactly\n        ; three things, we will pull rloc in with it, and move xloc to rloc.\n        ; If it is just two, we'll leave it to be handled normally.\n        ; Which might need to be re-thought due to justification, but since\n        ; we are really only talking :extend here, maybe not.\n        modifier-set (:modifiers (options caller))\n        modifier? (or (and modifier-set\n                           (modifier-set (zstring lloc))\n                           (> (count pair) 2))\n                      (middle-element? options rloc))\n        ; Figure out if we want to color keys based on their depth, and if so,\n        ; figure out the color for this one.\n        local-color (get key-depth-color (dec map-depth))\n        ; Doesn't work if we have a modifier, but at this point, key-color\n        ; is only for maps and modifiers are only for extend.\n        local-color (if key-color (key-color (zsexpr lloc)) local-color)\n        #_local-color\n        #_(cond (and map-depth (= caller :map) (= map-depth 2)) :green\n                (and map-depth (= caller :map) (= map-depth 1)) :blue\n                (and map-depth (= caller :map) (= map-depth 3)) :yellow\n                (and map-depth (= caller :map) (= map-depth 4)) :red\n                :else nil)\n        arg-1 (fzprint* loptions ind lloc)\n        ; If we have a newline, make it one shorter since we did a newline\n        ; after the previous pair.  Unless this is the first pair, but we\n        ; should have done one before that pair too, maybe?\n        arg-1-newline? (and (= (count pair) 1) (znewline? lloc))\n        #_#_arg-1\n          (if arg-1-newline? (first (remove-last-newline [arg-1])) arg-1)\n        arg-1 (if local-color (replace-color local-color arg-1) arg-1)\n        ; If we are going to print the second thing on the line, we need\n        ; to know how big the first thing is, so we can see if the second\n        ; thing fits on the line.\n        [arg-1-line-count arg-1-max-width :as arg-1-lines]\n          (style-lines options ind arg-1)\n        ; If arg-1 already takes multiple lines, we aren't going to do\n        ; anything interesting with a modifier.\n        _ (dbg options\n               \"fzprint-two-up before modifier: arg-1-line-count:\"\n                 arg-1-line-count\n               \"arg-1-max-width:\" arg-1-max-width)\n        modifier? (if (or (and arg-1-line-count (> arg-1-line-count 1))\n                          arg-1-newline?)\n                    nil\n                    modifier?)\n        ; See if we can merge the first and second things and have them\n        ; stay on the same line?\n        combined-arg-1 (if modifier?\n                         (concat-no-nil arg-1\n                                        [[(str \" \") :none :whitespace 1]]\n                                        (fzprint* (in-hang loptions)\n                                                  (+ ind arg-1-max-width)\n                                                  rloc))\n                         arg-1)\n        ; If they fit, then they are the new arg-1\n        arg-1 (if combined-arg-1 combined-arg-1 arg-1)\n        ; If they fit, then we are still doing modifier if we are already\n        modifier? (if combined-arg-1 modifier? nil)\n        ; If they fit, we need to recalculate the size of arg-1\n        [arg-1-line-count arg-1-max-width :as arg-1-lines]\n          (if combined-arg-1 (style-lines options ind arg-1) arg-1-lines)\n        _ (dbg options\n               \"fzprint-two-up after modifier: arg-1-line-count:\"\n                 arg-1-line-count\n               \"arg-1-max-width:\" arg-1-max-width)\n        lloc (if modifier? rloc lloc)\n        rloc (if modifier? xloc rloc)\n        ;     arg-1-fit-oneline? (and (not force-nl?)\n        ;                             (fzfit-one-line loptions arg-1-lines))\n        arg-1-fit-oneline? (and (not flow?)\n                                (fzfit-one-line loptions arg-1-lines))\n        arg-1-fit? (or arg-1-fit-oneline?\n                       (when (not one-line?) (fzfit loptions arg-1-lines)))\n        ; sometimes arg-1-max-width is nil because fzprint* returned nil,\n        ; but we need to have something for later code to use as a number\n        arg-1-width (- (or arg-1-max-width 0) ind)]\n    ; If we don't *have* an arg-1, no point in continuing...\n    ;  If arg-1 doesn't fit, maybe that's just how it is!\n    ;  If we are in-hang, then we can bail, but otherwise, not.\n    (dbg-pr options \"fzprint-two-up: arg-1:\" arg-1)\n    (when (and arg-1 (or arg-1-fit? (not in-hang?)))\n      (cond\n        arg-1-newline? [:flow arg-1]\n        (= (count pair) 1) [:hang (fzprint* roptions ind lloc)]\n        (or (= (count pair) 2) (and modifier? (= (count pair) 3)))\n          ;concat-no-nil\n          ;  arg-1\n          ; We used to think:\n          ; We will always do hanging, either fully or with one-line? true,\n          ; we will then do flow if hanging didn't do anything or if it did,\n          ; we will try to see if flow is better.\n          ;\n          ; But now, we don't do hang if arg-1-fit-oneline? is false, since\n          ; we won't use it.\n          (let [hanging-width (if justify-width justify-width arg-1-width)\n                hanging-spaces\n                  (if justify-width (inc (- justify-width arg-1-width)) 1)\n                hanging-indent (+ 1 hanging-width ind)\n                flow-indent (+ indent ind)]\n            (if (and (zstring lloc)\n                     (keyword-fn? options (zstring lloc))\n                     (zvector? rloc))\n              ; This is an embedded :let or :when-let or something\n              ; Presently we assume that anything with a vector after something\n              ; that is a keyword must be one of these, but we could check\n              ; for a :binding fn-style instead which might make more sense.\n              (let [[hang-or-flow style-vec] (fzprint-hang-unless-fail\n                                               loptions\n                                               hanging-indent\n                                               flow-indent\n                                               fzprint-binding-vec\n                                               rloc)\n                    arg-1 (if (= hang-or-flow :hang)\n                            (concat-no-nil arg-1\n                                           [[(blanks hanging-spaces) :none\n                                             :whitespace 2]])\n                            arg-1)]\n                [hang-or-flow (concat-no-nil arg-1 style-vec)])\n              ; This is a normal two element pair thing\n              (let [; Perhaps someday we could figure out if we are already\n                    ; completely in flow to this point, and be smarter about\n                    ; possibly dealing with the hang or flow now.  But for\n                    ; now, we will simply do hang even if arg-1 didn't fit\n                    ; on one line if the flow indent isn't better than the\n                    ; hang indent.\n                    _ (dbg options\n                           \"fzprint-two-up: before hang.  hanging tried?\"\n                           (or arg-1-fit-oneline?\n                               (and (not flow?)\n                                    (>= flow-indent hanging-indent))))\n                    hanging (when (or arg-1-fit-oneline?\n                                      (and (not flow?)\n                                           (>= flow-indent hanging-indent)))\n                              (fzprint* (if (< flow-indent hanging-indent)\n                                          (in-hang local-roptions)\n                                          local-roptions)\n                                        hanging-indent\n                                        rloc))\n                    hang-count (zcount rloc)\n                    _ (log-lines options\n                                 \"fzprint-two-up: hanging:\"\n                                 hanging-indent\n                                 hanging)\n                    hanging-lines (style-lines options hanging-indent hanging)\n                    fit? (fzfit-one-line local-roptions hanging-lines)\n                    hanging-lines (if fit?\n                                    hanging-lines\n                                    (when (and (not one-line?) hang?)\n                                      hanging-lines))\n                    hanging-line-count (first hanging-lines)\n                    ; Don't flow if it fit, or it didn't fit and we were doing\n                    ; one line on input.  Do flow if we don't have\n                    ; hanging-lines\n                    ; and we were not one-line on input.\n                    _ (dbg options\n                           \"fzprint-two-up: fit?\" fit?\n                           \"hanging-lines:\" hanging-lines)\n                    _ (log-lines options\n                                 \"fzprint-two-up: hanging-2:\"\n                                 hanging-indent\n                                 hanging)\n                    flow-it?\n                      #_(and (or (and (not hanging-lines) (not one-line?))\n                                 (not (or fit? one-line?)))\n                             ; this is for situations where the first\n                             ; element is short and so the hanging indent\n                             ; is the same as the flow indent, so there\n                             ; is\n                             ; no point in flow -- unless we don't have\n                             ; any hanging-lines, in which case we better\n                             ; do flow\n                             (or (< flow-indent hanging-indent)\n                                 (not hanging-lines)))\n                      (or (not hanging-lines)\n                          ; TODO: figure out what this was supposed to\n                          ; be and fix it, w/out (not hanging-lines)\n                          (and (or (and (not hanging-lines) (not one-line?))\n                                   (not (or fit? one-line?)))\n                               ; this is for situations where the first\n                               ; element is short and so the hanging indent\n                               ; is the same as the flow indent, so there\n                               ; is\n                               ; no point in flow -- unless we don't have\n                               ; any hanging-lines, in which case we better\n                               ; do flow\n                               (or (< flow-indent hanging-indent)\n                                   (not hanging-lines))))\n                    flow-it? (if (use-hang? caller\n                                            options\n                                            ind\n                                            hang-count\n                                            hanging-line-count)\n                               false\n                               flow-it?)\n                    #_(inc-pass-count)\n                    _ (dbg options\n                           \"fzprint-two-up: before flow. flow-it?\"\n                           flow-it?)\n                    flow (when flow-it? (fzprint* roptions flow-indent rloc))\n                    _ (log-lines options\n                                 \"fzprint-two-up: flow:\"\n                                 (+ indent ind)\n                                 flow)\n                    flow-lines (style-lines options (+ indent ind) flow)]\n                (when dbg-local?\n                  (prn \"fzprint-two-up: local-hang:\" local-hang?)\n                  (prn \"fzprint-two-up: one-line?:\" one-line?)\n                  (prn \"fzprint-two-up: hanging-indent:\" hanging-indent)\n                  (prn \"fzprint-two-up: hanging-lines:\" hanging-lines)\n                  (prn \"fzprint-two-up: flow?:\" flow?)\n                  (prn \"fzprint-two-up: flow-it?:\" flow-it?)\n                  (prn \"fzprint-two-up: fit?:\" fit?)\n                  (prn \"fzprint-two-up: flow-indent:\" flow-indent)\n                  (prn \"fzprint-two-up: hanging:\" (zstring lloc) hanging)\n                  (prn \"fzprint-two-up: (+ indent ind):\" (+ indent ind))\n                  (prn \"fzprint-two-up: flow:\" (zstring lloc) flow))\n                (dbg options \"fzprint-two-up: before good-enough\")\n                (if fit?\n                  [:hang\n                   (concat-no-nil arg-1\n                                  [[(blanks hanging-spaces) :none :whitespace\n                                    3]]\n                                  hanging)]\n                  (when (or hanging-lines flow-lines)\n                    (if (good-enough? caller\n                                      roptions\n                                      :none-two-up\n                                      hang-count\n                                      (- hanging-indent flow-indent)\n                                      hanging-lines\n                                      flow-lines)\n                      [:hang\n                       (concat-no-nil arg-1\n                                      [[(blanks hanging-spaces) :none\n                                        :whitespace 4]]\n                                      hanging)]\n                      (if justify-width\n                        nil\n                        [:flow\n                         (concat-no-nil\n                           arg-1\n                           (prepend-nl options (+ indent ind) flow))])))))))\n        :else [:flow ; The following always flows things of 3 or more\n               ; (absent modifers).  If the lloc is a single char,\n               ; then that can look kind of poor.  But that case\n               ; is rare enough that it probably isn't worth dealing\n               ; with.  Possibly a hang-remaining call might fix it.\n               (concat-no-nil\n                 arg-1\n                 (fzprint-flow-seq options\n                                   (+ indent ind)\n                                   (if modifier? (nnext pair) (next pair))\n                                   :force-nl\n                                   :newline-first))]))))\n\n;;\n;; # Two-up printing\n;;\n\n(defn fzprint-justify-width\n  \"Figure the width for a justification of a set of pairs in coll.  \n  Also, decide if it makes any sense to justify the pairs at all.\n  For instance, they all need to be one-line.\"\n  [caller {{:keys [justify?]} caller, :as options} ind coll]\n  (let [firsts (remove nil?\n                 (map #(when (> (count %) 1) (fzprint* options ind (first %)))\n                   coll))\n        #_(def just firsts)\n        style-seq (map (partial style-lines options ind) firsts)\n        #_(def styleseq style-seq)\n        each-one-line? (reduce #(when %1 (= (first %2) 1)) true style-seq)\n        #_(def eol each-one-line?)\n        justify-width (when each-one-line?\n                        (reduce #(max %1 (second %2)) 0 style-seq))]\n    (when justify-width (- justify-width ind))))\n\n(defn fit-within?\n  \"Take a size and a collection of vectors with two or more elements\n  per vector.  The elements are zlocs, the vectors are not.  Return\n  the remaining character count or nil if it for sure doesn't fit.\n  In order to be sure it doesn't fit, this version doesn't assume\n  *any* separators, so it really underestimates the size.\"\n  ([size coll depth]\n   (reduce (fn [size element]\n             (or (if (= depth 0)\n                   (fit-within? size element (inc depth))\n                   (let [remaining (- size (count (zstring element)))]\n                     (when (pos? remaining) remaining)))\n                 (reduced nil)))\n     size\n     coll))\n  ([size coll] (fit-within? size coll 0)))\n\n(defn remove-hangflow\n  \"Convert a hangflow style-vec to a regular style-vec.\"\n  [hf-style-vec]\n  (when hf-style-vec (map second hf-style-vec)))\n\n(defn fzprint-map-two-up\n  \"Accept a sequence of pairs, and map fzprint-two-up across those pairs.\n  If you have :one-line? set, this will return nil if it is way over,\n  but it can't accurately tell exactly what will fit on one line, since\n  it doesn't know the separators and such.  So, :one-line? true is a\n  performance optimization, so it doesn't do a whole huge map just to\n  find out that it could not possibly have fit on one line.  So, this\n  returns a sequence of style-vecs, where the indentation for the\n  stuff inside of the pairs is already there, but the separators of\n  the style-vecs (including indentation and commas) is done by the\n  caller of fzprint-map-two-up. Always returns a sequence of vector pairs:\n  [[:hang <style-vec-for-one-pair>] [:flow <style-vec-for-one-pair>] ...].\n  If you want a style vec instead, call remove-hangflow on the return \n  from fzprint-map-two-up.  This will use one-line?, but not check to see\n  that it actually fits.  If you care about that, then you should check the\n  return yourself.  It will, however, make an estimate of whether or not\n  it will fit and if it clearly doesn't, it will return a nil.\"\n  [caller\n   {{:keys [justify? force-nl?]} caller,\n    :keys [width rightcnt one-line? parallel?],\n    :as options} ind commas? coll]\n  (let [caller-map (caller options)\n        len (count coll)\n        justify-width (when (and justify? (not one-line?))\n                        (fzprint-justify-width caller options ind coll))\n        caller-options (when justify-width (options caller))]\n    (dbg-print options\n               \"fzprint-map-two-up: one-line?\" (:one-line? options)\n               \"justify?:\" justify?)\n    ; If it is one-line? and force-nl? and there is more than one thing,\n    ; this can't work.\n    (when (not (and one-line? force-nl? (> len 1)))\n      #_(def jo [])\n      (loop [justify-width justify-width\n             justify-options\n               (if justify-width\n                 (-> options\n                     (merge-deep {caller (caller-options :justify-hang)})\n                     (merge-deep {:tuning (caller-options :justify-tuning)}))\n                 options)]\n        #_(def jo (conj jo [justify-width justify-options]))\n        (let [beginning-coll (butlast coll)\n              ; If beginning-coll is () because there is only a single pair\n              ; in coll, then this all works -- but only because\n              ; () is truthy, and zpmap returns () which is also truthy.\n              ; I hate relying on the truthy-ness of (), but in this case\n              ; it works out and it would be even more complicated to do\n              ; it another way.\n              beginning-remaining\n                (if one-line? (fit-within? (- width ind) beginning-coll) true)\n              _ (dbg options\n                     \"fzprint-map-two-up: remaining:\" (- width ind)\n                     \"beginning-remaining:\" beginning-remaining)\n              beginning (when beginning-remaining\n                          (zpmap options\n                                 (partial fzprint-two-up\n                                          caller\n                                          justify-options\n                                          ind\n                                          commas?\n                                          justify-width\n                                          nil)\n                                 beginning-coll))\n              ; this line will fix the justify, but not necessarily\n              ; the rest of the problems with hangflow output -- like\n              ; the style-lines below.\n              beginning (if (contains-nil? beginning) nil beginning)\n              end-coll [(last coll)]\n              end-remaining (if one-line?\n                              (and beginning\n                                   (fit-within? (- beginning-remaining rightcnt)\n                                                end-coll))\n                              true)\n              _ (dbg options\n                     \"fzprint-map-two-up: beginning-remaining:\"\n                       beginning-remaining\n                     \"rightcnt:\" rightcnt\n                     \"end-remaining:\" end-remaining)\n              end (when end-remaining\n                    (when-let [end-result (fzprint-two-up caller\n                                                          justify-options\n                                                          ind\n                                                          commas?\n                                                          justify-width\n                                                          :rightmost-pair\n                                                          (first end-coll))]\n                      [end-result]))\n              result (cond (= len 1) end\n                           :else (concat-no-nil beginning end))]\n          (dbg-pr options\n                  \"fzprint-map-two-up: len:\" len\n                  \"(nil? end):\" (nil? end)\n                  \"end:\" end\n                  \"(nil? beginning):\" (nil? beginning)\n                  \"beginning:\" beginning\n                  \"(count end):\" (count end)\n                  \"(count beginnging):\" (count beginning)\n                  \"justify-width:\" justify-width\n                  \"result:\" result)\n          ; if we got a result or we didn't but it wasn't because we\n          ; were trying to justify things\n          (if (or result (not justify-width))\n            result\n            ; try again, without justify-width\n            (recur nil options)))))))\n\n;;\n;; ## Support sorting of map keys\n;;\n\n(defn compare-keys\n  \"Do a key comparison that works well for numbers as well as\n  strings.\"\n  [x y]\n  (cond (and (number? x) (number? y)) (compare x y)\n        :else (compare (str x) (str y))))\n\n(defn compare-ordered-keys\n  \"Do a key comparison that places ordered keys first.\"\n  [key-value zdotdotdot x y]\n  (cond (and (key-value x) (key-value y)) (compare (key-value x) (key-value y))\n        (key-value x) -1\n        (key-value y) +1\n        (= zdotdotdot x) +1\n        (= zdotdotdot y) -1\n        :else (compare-keys x y)))\n\n(defn order-out\n  \"A variety of sorting and ordering options for the output of\n  partition-all-2-nc.  It can sort, which is the default, but if\n  the caller has a key-order vector, it will extract any keys in\n  that vector and place them first (in order) before sorting the\n  other keys.  If sorting is not called for, does nothing.\"\n  [caller\n   {{:keys [sort? sort-in-code? key-order key-value]} caller,\n    :keys [in-code?],\n    :as options} access out]\n  (if (and sort? (if in-code? sort-in-code? true))\n    (sort #((partial compare-ordered-keys (or key-value {}) (zdotdotdot))\n              (zsexpr (access %1))\n              (zsexpr (access %2)))\n          out)\n    out))\n\n(defn pair-element?\n  \"This checks to see if an element should be considered part of a\n  pair if it comes between other elements, and a single element on\n  its own if it would otherwise be the first part of a pair.  Mostly\n  this will trigger on comments, but a #_(...) element will also\n  trigger this, as will a newline if one appears.\"\n  [zloc]\n  (or (zcomment? zloc) (zuneval? zloc) (znewline? zloc)))\n\n(defn middle-element?\n  \"This checks to see if an element should be considered the middle element\n  of a pair.  At some point, we can expand this, but for now there is only\n  one middle element.\"\n  [{:keys [in-code?], :as options} zloc]\n  ;  nil)\n  (when (= in-code? \"condp\") (= (zstring zloc) \":>>\")))\n\n;;\n;; # Ignore keys in maps\n;;\n\n(defn remove-key-seq\n  \"If given a non-collection, simply does a dissoc of the key, but\n  if given a sequence of keys, will remove the final one.\"\n  [m ks]\n  (if (coll? ks)\n    (let [this-key (first ks)\n          next-key (next ks)]\n      (if next-key\n        (let [removed-map (remove-key-seq (get m this-key) (next ks))]\n          (if (empty? removed-map)\n            (dissoc m this-key)\n            (assoc m this-key removed-map)))\n        (dissoc m this-key)))\n    (dissoc m ks)))\n\n(defn ignore-key-seq-silent\n  \"Given a map and a key sequence, remove that key sequence if\n  it appears in the map, and terminate the reduce if it changes\n  the map.\"\n  [m ks]\n  (if (coll? ks)\n    (if (= (get-in m ks :zprint-not-found) :zprint-not-found)\n      m\n      (remove-key-seq m ks))\n    (if (= (get m ks :zprint-not-found) :zprint-not-found) m (dissoc m ks))))\n\n(defn ignore-key-seq\n  \"Given a map and a key sequence, remove that key sequence if\n  it appears in the map leaving behind a key :zprint-ignored, \n  and terminate the reduce if it changes the map.\"\n  [m ks]\n  (if (coll? ks)\n    (if (= (get-in m ks :zprint-not-found) :zprint-not-found)\n      m\n      (assoc-in m ks :zprint-ignored))\n    (if (= (get m ks :zprint-not-found) :zprint-not-found)\n      m\n      (assoc m ks :zprint-ignored))))\n\n(defn map-ignore\n  \"Take a map and remove any of the key sequences specified from it.\n  Note that this only works for sexpressions, not for actual zippers.\"\n  [caller {{:keys [key-ignore key-ignore-silent]} caller, :as options} zloc]\n  (let [ignored-silent (if key-ignore-silent\n                         (reduce ignore-key-seq-silent zloc key-ignore-silent)\n                         zloc)\n        ignored (if key-ignore\n                  (reduce ignore-key-seq ignored-silent key-ignore)\n                  ignored-silent)]\n    ignored))\n\n;;\n;; # Pre-processing for two-up printing\n;;\n\n(defn partition-all-2-nc\n  \"Input is (zseqnws zloc) or (zseqnws-w-nl) where one assumes that\n  these are pairs.  Thus, a seq of zlocs.  Output is a sequence of\n  seqs, where the seqs are usually pairs, but might be single things.\n  Doesn't pair up comments or #_(...) unevaled sexpressions.  The\n  ones before the first part of a pair come as a single element in\n  what would usually be a pair, and the ones between the first and\n  second parts of a pair come inside the pair.  There may be an\n  arbitrary number of elements between the first and second elements\n  of the pair (one per line).  If there are any comments or unevaled\n  sexpressions, don't sort the keys, as we might lose track of where\n  the comments or unevaled s-expressions go.\"\n  [options coll]\n  (when-not (empty? coll)\n    (let [max-length (get-max-length options)]\n      (loop [remaining coll\n             no-sort? nil\n             index 0\n             out (transient [])]\n        (dbg-pr options\n                \"partition-all-2-nc: index:\" index\n                \"no-sort?:\" no-sort?\n                ;  \"out:\" (map (comp zstring first)(persistent! out))\n                \"first remaining:\" (zstring (first remaining))\n                \"second remaining:\" (zstring (second remaining)))\n        (if-not remaining\n          [no-sort? (persistent! out)]\n          (let [[new-remaining pair-vec new-no-sort?]\n                  (cond\n                    (pair-element? (first remaining)) [(next remaining)\n                                                       [(first remaining)] true]\n                    (or (pair-element? (second remaining))\n                        (middle-element? options (second remaining)))\n                      (let [[comment-seq rest-seq]\n                              ;(split-with pair-element? (next remaining))\n                              (split-with #(or (pair-element? %)\n                                               (middle-element? options %))\n                                          (next remaining))]\n                        (if (first rest-seq)\n                          ; We have more to than just a comment, so we can\n                          ; pair it up between two things.\n                          [(next rest-seq)\n                           (into []\n                                 (concat [(first remaining)]\n                                         comment-seq\n                                         [(first rest-seq)])) true]\n                          ; This is the end, don't pair a comment up\n                          ; with something on the left if there isn't\n                          ; something on the right of it.\n                          [(next remaining) [(first remaining)] true]))\n                    (= (count remaining) 1) [(next remaining)\n                                             [(first remaining)] nil]\n                    :else [(next (next remaining))\n                           [(first remaining) (second remaining)] nil])]\n            #_(println \"partition-all-2-nc: count new-remaining:\"\n                       (count new-remaining))\n            (dbg-pr options\n                    \"partition-all-2-nc: pair-vec: first:\" (zstring (first\n                                                                      pair-vec))\n                    \"first tag:\" (ztag (first pair-vec))\n                    \"count:\" (count pair-vec)\n                    \"last:\" (zstring (last pair-vec)))\n            (recur (cond (< (inc index) max-length) new-remaining\n                         (and (= (inc index) max-length) new-remaining)\n                           (list (zdotdotdot))\n                         :else nil)\n                   (or no-sort? new-no-sort?)\n                   (inc index)\n                   (conj! out pair-vec))))))))\n\n;;\n;; ## Multi-up printing pre-processing\n;;\n\n(defn cleave-end\n  \"Take a seq, and if it is contains a single symbol, simply return\n  it in another seq.  If it contains something else, remove any non\n  collections off of the end and return them in their own double seqs,\n  as well as return the remainder (the beginning) as a double seq.\"\n  [coll]\n  (if (or (zsymbol? (first coll)) (zreader-cond-w-symbol? (first coll)))\n    ;(symbol? (first coll))\n    (list coll)\n    (let [rev-seq (reverse coll)\n          [split-non-coll _]\n            ;(split-with (comp not zcoll?) rev-seq)\n            (split-with #(not (or (zcoll? %) (zreader-cond-w-coll? %)))\n                        rev-seq)\n          #_(def sncce split-non-coll)\n          split-non-coll (map list (reverse split-non-coll))\n          remainder (take (- (count coll) (count split-non-coll)) coll)]\n      (if (empty? remainder)\n        split-non-coll\n        (concat (list remainder) split-non-coll)))))\n\n(defn partition-all-sym\n  \"Similar to partition-all-2-nc, but instead of trying to pair things\n  up (modulo comments and unevaled expressions), this begins things\n  with a symbol, and then accumulates collections until the next symbol.\n  Returns a seq of seqs, where the first thing in each internal seq is\n  a protocol and the remaining thing(s) in that seq are the expressions that\n  follow.  If there is a single thing, it is returned in its own internal\n  seq. ((P (foo [this a) (bar-me [this] b) (barx [this y] (+ c y))) ...)\n  Made harder by the fact that the symbol might be inside of a #?() reader\n  conditional.  It handles comments before symbols on the symbol indent, \n  and the comments before the collections on the collection indent.  \n  Since it doesn't know how many collections there are, this is not trivial.  \n  Must be called with a sequence of z-things (these days called a zseq)\"\n  [options modifier-set coll]\n  (dbg-pr options \"partition-all-sym:\" modifier-set)\n  #_(def scoll coll)\n  (dbg options \"partition-all-sym: coll:\" (map zstring coll))\n  (let [part-sym (partition-by\n                   #(or (zsymbol? %) (znil? %) (zreader-cond-w-symbol? %))\n                   coll)\n        split-non-coll (mapcat cleave-end part-sym)]\n    #_(def ps part-sym)\n    #_(def snc split-non-coll)\n    (loop [remaining split-non-coll\n           out (transient [])]\n      #_(prn \"remaining:\" (zprint.repl/pseqzseq remaining))\n      #_(prn \"out:\" (zprint.repl/pseqzseq out))\n      (if (empty? remaining)\n        (do #_(def pasn out) (persistent! out))\n        (let [[next-remaining new-out]\n                (cond\n                  (and (or (zsymbol? (ffirst remaining))\n                           (znil? (ffirst remaining))\n                           (zreader-cond-w-symbol? (ffirst remaining)))\n                       (not (empty? (second remaining)))\n                       ; This keeps a comment after a symbol with no\n                       ; collections from being associated with the previous\n                       ; symbol instead of standing on its own (as it should)\n                       (or (not\n                             (or (= (ztag (first (second remaining))) :comment)\n                                 (= (ztag (first (second remaining)))\n                                    :newline)))\n                           (zcoll? (last (second remaining)))))\n                    ; We have a non-collection in (first remaining) and\n                    ; we might have more than one, either because we just\n                    ; have a bunch of non-colls with no colls\n                    ; or because we have a modifier and then one or more\n                    ; non-colls (possibly with their own modifiers).\n                    (if (= (count (first remaining)) 1)\n                      ; original\n                      (do #_(prn \"a:\")\n                          ; We have a single non-coll, pull the next seq\n                          ; of one or more seqs into a seq with it.\n                          ; This is where we marry up the non-coll with\n                          ; all of its associated colls.\n                          [(nthnext remaining 2)\n                           (conj! out\n                                  (concat (first remaining)\n                                          (second remaining)))])\n                      (do #_(prn \"b:\")\n                          (if (and modifier-set\n                                   (modifier-set (zstring (ffirst remaining))))\n                            (if (= (count (first remaining)) 2)\n                              ; We have exactly two things in\n                              ; (first remaining), and the first one is\n                              ; both a non-coll and a modifier, so we know\n                              ; that the second one is a non-coll, and we\n                              ; know that we have a (second remaining) from\n                              ; above, so we bring the second remaining\n                              ; into the first remaining like we did\n                              ; above\n                              (do #_(prn \"d:\")\n                                  [(nthnext remaining 2)\n                                   (conj! out\n                                          (concat (first remaining)\n                                                  (second remaining)))])\n                              ; We have a modifier as the first thing in a\n                              ; seq of non-colls and then some more non-colls\n                              ; after that (since we don't have exactly two,\n                              ; as that case was caught above).\n                              ; Pull the next one into a seq with it.\n                              ; Do we need to check that the next one is\n                              ; also a non-coll?  That shouldn't be\n                              ; necessary,as you won't get colls in\n                              ;with non-colls.\n                              (do #_(prn \"c:\")\n                                  [(if (next (next (first remaining)))\n                                     (cons (next (next (first remaining)))\n                                           (next remaining))\n                                     (next remaining))\n                                   (conj! out\n                                          (list (ffirst remaining)\n                                                (second (first remaining))))]))\n                            ; we have more than one non-coll in first\n                            ; remaining, so pull one out, and leave the\n                            ; next ones for the next loop\n                            [(cons (next (first remaining)) (next remaining))\n                             (conj! out (list (ffirst remaining)))])))\n                  :else [(next remaining) (conj! out (first remaining))])]\n          (recur next-remaining new-out))))))\n\n(defn rstr-vec\n  \"Create an r-str-vec with the indent appropriate for the r-str if\n  it is preceded by a newline.\"\n  ([options ind zloc r-str r-type]\n   [[r-str (zcolor-map options (or r-type r-str)) (or r-type :right) ind]])\n  ([options ind zloc r-str] (rstr-vec options ind zloc r-str nil)))\n\n(declare interpose-nl-hf)\n(declare fzprint-get-zloc-seq)\n\n(defn fzprint-binding-vec\n  [{{:keys [nl-separator?]} :binding, :as options} ind zloc]\n  (dbg options \"fzprint-binding-vec: ind:\" ind \"zloc:\" (zstring (zfirst zloc)))\n  (let [options (rightmost options)\n        l-str \"[\"\n        r-str \"]\"\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options ind zloc r-str)]\n    (dbg-form options\n              \"fzprint-binding-vec exit:\"\n              (if (= (zcount zloc) 0)\n                (concat-no-nil l-str-vec r-str-vec)\n                (concat-no-nil\n                  l-str-vec\n                  (interpose-nl-hf\n                    (:binding options)\n                    (inc ind)\n                    (fzprint-map-two-up\n                      :binding\n                      options\n                      (inc ind)\n                      false\n                      (second (partition-all-2-nc\n                                options\n                                ; This is controlled by the :vector config\n                                ; options, because if we added it to the\n                                ; :binding option, it would not work because\n                                ; the fzprint-list* one line testing doesn't\n                                ; know it is a binding vector, it thinks\n                                ; that it is just a vector.  Alternatively\n                                ; we could probably notice that we were in\n                                ; a :binding fn-type, and force :vector\n                                ; :respect-nl? to be the same as :binding\n                                ; :respect-nl? for the one-line test.  Which\n                                ; would fail if there were some other vector\n                                ; with newlines in it that wasn't the\n                                ; binding vector.  Ultimately this is because\n                                ; :respect-nl? (and :respect-bl?) are only\n                                ; defined for vectors, maps, lists and sets,\n                                ; and that is implemented by changing what\n                                ; gets returned as a zloc-seq.\n                                (fzprint-get-zloc-seq :vector options zloc)))))\n                  r-str-vec)))))\n\n(defn fzprint-hang\n  \"Try to hang something and try to flow it, and then see which is\n  better.  Has hang and flow indents. fzfn is the function to use \n  to do zloc.  Note what fzfn does with the input. Presumably the\n  caller knows what the fzfn does, so it has to count the items\n  itself and pass it in here as zloc-count if it isn't just (zcount zloc).\"\n  [{:keys [one-line? force-eol-blanks?], :as options} caller hindent findent\n   fzfn zloc-count zloc]\n  (dbg options \"fzprint-hang: caller:\" caller)\n  (let [hanging (when (and (not= hindent findent)\n                           ((options caller) :hang?)\n                           ; If it starts with a newline, we aren't hanging\n                           ; it.  Comment, sure, but not newline.\n                           (not (znewline? (first zloc))))\n                  (concat-no-nil [[(str \" \") :none :whitespace 5]]\n                                 (fzfn (in-hang options) hindent zloc)))\n        #_(prn \"fzprint-hang: first hanging:\" (first hanging) (second hanging))\n        hanging (when (not= (nth (second hanging) 2) :comment-inline) hanging)\n        hang-count (or zloc-count (zcount zloc))\n        hr-lines (style-lines options (dec hindent) hanging)\n        ;flow (fzfn options findent zloc)\n       ]\n    (if (or (fzfit-one-line options hr-lines) one-line?)\n      hanging\n      (let [flow (let [result (fzfn options findent zloc)]\n                   (concat-no-nil\n                     ; This will create an end-of-line blanks situation so\n                     ; we can test our ability to see it.  If we weren't\n                     ; intentionally creating end-of-line blanks, we would\n                     ; use prepend-nl here.\n                     (if (if force-eol-blanks? nil (first-nl? result))\n                       [[(str \"\\n\") :none :indent 42]]\n                       [[(str \"\\n\" (blanks findent)) :none :indent 4]])\n                     result))\n            _ (log-lines options \"fzprint-hang: flow:\" findent flow)\n            fd-lines (style-lines options findent flow)\n            _ (dbg-pr options\n                      \"fzprint-hang: ending: hang-count:\" hang-count\n                      \"hanging:\" hanging\n                      \"flow:\" flow)\n            hr-good? (when hanging\n                       (good-enough? caller\n                                     options\n                                     :none-hang\n                                     hang-count\n                                     (- hindent findent)\n                                     hr-lines\n                                     fd-lines))]\n        (if hr-good? hanging flow)))))\n\n(defn fzprint-pairs\n  \"Always prints pairs on a different line from other pairs. Takes a zloc-seq\"\n  [{{:keys [nl-separator? respect-nl?]} :pair, :as options} ind zloc-seq]\n  (dbg-pr options \"fzprint-pairs:\" (zstring (first zloc-seq)))\n  (dbg-form\n    options\n    \"fzprint-pairs: exit:\"\n    (interpose-nl-hf\n      (:pair options)\n      ind\n      (fzprint-map-two-up :pair\n                          options\n                          ind\n                          false\n                          (let [[_ part] (partition-all-2-nc options zloc-seq)]\n                            #_(def fp part)\n                            (dbg-pr options\n                                    \"fzprint-pairs: partition:\"\n                                      (map (comp zstring first) part)\n                                    \"respect-nl?\" respect-nl?)\n                            part)))))\n\n(defn fzprint-extend\n  \"Print things with a symbol and collections following.  Kind of like with\n  pairs, but not quite. Takes a zloc-seq.\"\n  [{{:keys [nl-separator?]} :extend, :as options} ind zloc-seq]\n  #_(def fezloc zloc-seq)\n  (dbg options \"fzprint-extend:\" (zstring (first zloc-seq)))\n  (dbg-form\n    options\n    \"fzprint-extend: exit:\"\n    (interpose-nl-hf\n      (:extend options)\n      ind\n      (fzprint-map-two-up\n        :extend\n        (assoc options :fn-style :fn)\n        ind\n        false\n        (let [part (partition-all-sym options\n                                      (:modifiers (:extend options))\n                                      zloc-seq)]\n          #_(def fe part)\n          (dbg options \"fzprint-extend: partition:\" (map #(map zstring %) part))\n          part)))))\n\n(defn concatv!\n  \"Given a transient vector v, concatenate all of the other\n  elements in all of the remaining collections onto v.\"\n  [v & rest]\n  (loop [cols rest\n         out v]\n    (if cols\n      (recur (next cols)\n             (loop [col (first cols)\n                    out out]\n               (if col (recur (next col) (conj! out (first col))) out)))\n      out)))\n\n(defn fzprint-one-line\n  \"Do a fzprint-seq like thing, but do it incrementally and\n  if it gets too big, return nil.\"\n  [options ind zloc-seq]\n  (dbg-print options \"fzprint-one-line:\")\n  (let [seq-right zloc-seq\n        len (count seq-right)\n        last-index (dec len)\n        gt-1? (> (count seq-right) 1)\n        options (assoc options :one-line? true)]\n    (loop [zloc-seq seq-right\n           new-ind (long ind)\n           index 0\n           out (transient [])]\n      (if (empty? zloc-seq)\n        (do (dbg options \"fzprint-one-line: exiting count:\" (count out))\n            (persistent! out))\n        (let [next-zloc (first zloc-seq)\n              [sep next-options]\n                (cond ; this needs to come first in case there\n                      ; is only one\n                      ; element in the list -- it needs to have\n                      ; the rightcnt\n                      ; passed through\n                  (= index last-index) [(if-not (zero? index)\n                                          [[\" \" :none :whitespace 6]]) options]\n                  (= index 0) [nil (not-rightmost options)]\n                  :else [[[\" \" :none :whitespace 7]] (not-rightmost options)])\n              next-out (fzprint* next-options new-ind next-zloc)\n              _ (log-lines options \"fzprint-one-line:\" new-ind next-out)\n              [line-count max-width :as next-lines]\n                (style-lines options new-ind next-out)]\n          (if-not (fzfit-one-line next-options next-lines)\n            (do (dbg options\n                     \"fzprint-one-line: failed, too wide or too many lines!\")\n                nil)\n            (recur (next zloc-seq)\n                   (inc (long max-width))\n                   (inc index)\n                   (concatv! out sep next-out))))))))\n\n(defn fzprint-seq\n  \"Take a seq of a zloc, created by (zmap identity zloc).  Return\n  a seq of the fzprint* of each element.  No spacing between any\n  of these elements. Note that this is not a style-vec, but a seq\n  of style-vecs of each of the elements.  These would need to be\n  concatenated together to become a style-vec.  ind is either a\n  constant or a seq of indents, one for each element in zloc-seq.\n  Note that right gets evaluated immediately, while left yields a\n  lazy sequence which get evaluated later.\"\n  [options ind zloc-seq]\n  (let [max-length (get-max-length options)\n        len (count zloc-seq)\n        zloc-seq (if (> len max-length)\n                   (concat (take max-length zloc-seq) (list (zdotdotdot)))\n                   zloc-seq)\n        len (count zloc-seq)]\n    (dbg options\n         \"fzprint-seq: (count zloc-seq):\" len\n         \"max-length:\" max-length\n         \"ind:\" ind)\n    (cond\n      (empty? zloc-seq) nil\n      (zero? max-length) [[[\"#?#\" (zcolor-map options :keyword) :element]]]\n      :else (let [left (zpmap options\n                              #(fzprint* (not-rightmost options) %1 %2)\n                              (if (coll? ind) ind (repeat ind))\n                              (butlast zloc-seq))\n                  right [(fzprint* options\n                                   (if (coll? ind) (last ind) ind)\n                                   (last zloc-seq))]]\n              (cond (= len 1) right\n                    :else (concat-no-nil left right))))))\n\n(declare precede-w-nl)\n\n(defn fzprint-flow-seq\n  \"Takes zloc-seq, a seq of a zloc, created by (zmap identity zloc),\n  and returns a style-vec of the result.  Either it fits on one\n  line, or it is rendered on multiple lines.  You can force multiple\n  lines with force-nl?. If the seq is empty, returns :noseq, which\n  is what you give concat-no-nil if you want this to just disappear.\n  If you want it to do less than everything in the original zloc,\n  modify the result of (zmap identity zloc) to just contain what\n  you want to print. ind is either a single indent, or a seq of\n  indents, one for each element in zloc-seq.  Don't concatenate an\n  indent/newline on to the beginning of the output from this routine.\n  Let this routine do it for you, as it needs to know one is there\n  in order to properly deal with any newlines in the actual stream.\n  Else you will get two where you only should have one.\"\n  ([options ind zloc-seq force-nl? nl-first?]\n   (dbg-pr options\n           \"fzprint-flow-seq: count zloc-seq:\" (count zloc-seq)\n           \"nl-first?\" nl-first?\n           \"zloc-seq:\" (map zstring zloc-seq))\n   (let [coll-print (fzprint-seq options ind zloc-seq)\n         ; If we are force-nl?, then don't bother trying one-line\n         one-line (apply concat-no-nil\n                    (interpose [[\" \" :none :whitespace 8]] coll-print))\n         _ (log-lines options \"fzprint-flow-seq:\" ind one-line)\n         one-line-lines (style-lines options ind one-line)]\n     (dbg-pr options \"fzprint-flow-seq: coll-print:\" coll-print)\n     (dbg-form options\n               \"fzprint-flow-seq: exit:\"\n               (if (and (not force-nl?) (fzfit-one-line options one-line-lines))\n                 one-line\n                 (if (not (empty? coll-print))\n                   (apply concat-no-nil\n                     (precede-w-nl options ind coll-print (not nl-first?)))\n                   :noseq)))))\n  ([options ind zloc-seq] (fzprint-flow-seq options ind zloc-seq nil nil))\n  ([options ind zloc-seq force-nl?]\n   (fzprint-flow-seq options ind zloc-seq force-nl? nil)))\n\n(defn fzprint-hang-one\n  \"Try out the given zloc, and if it fits on the current line, just\n  do that. It might fit on the same line, as this may not be the rest\n  of the list that we are printing. If not, check it out with good-enough?\n  and do the best you can.  Three choices, really: fits on same line, \n  does ok as hanging, or better with flow. hindent is hang-indent, and \n  findent is flow-indent, and each contains the initial separator.  \n  Might be nice if the fn-style actually got sent to this fn.\"\n  [caller {:keys [one-line? width], {:keys [hang-avoid]} caller, :as options}\n   hindent findent zloc]\n  (dbg-pr options\n          \"fzprint-hang-one:\" (zstring zloc)\n          \" hindent:\" hindent\n          \"findent:\" findent)\n  (when (:dbg-hang options)\n    (println (dots (:pdepth options))\n             \"h1 caller:\"\n             caller\n             (zstring (if (zcoll? zloc) (zfirst zloc) zloc))))\n  (let [local-options (if (and (not one-line?) (not (:hang? (caller options))))\n                        (assoc options :one-line? true)\n                        options)\n        ; If we don't have an hindent, we better not be trying to hang\n        ; things -- in this case, we'll just flow.\n        hindent (or hindent findent)\n        hang-count (zcount zloc)\n        ; This implements :hang-avoid for fzprint-hang-one, instead of just\n        ; for fzprint-hang-remaining.  It didn't change the tests, but\n        ; removed some silly formatting when using :arg2 and small widths.\n        hanging (when (and (not= hindent findent)\n                           (or (not hang-avoid)\n                               (< hang-count (* (- width hindent) hang-avoid))))\n                  (fzprint* (in-hang local-options) hindent zloc))\n        hanging (concat-no-nil [[\" \" :none :whitespace 9]] hanging)\n        _ (log-lines options \"fzprint-hang-one: hanging:\" (dec hindent) hanging)\n        hr-lines (style-lines options (dec hindent) hanging)]\n    _\n    (dbg options\n         \"fzprint-hang-one: hr-lines:\" hr-lines\n         \"hang-count:\" hang-count)\n    ; if hanging is nil and one-line? is true, then we didn't fit\n    ; and should exit\n    ;\n    ; if hanging is nil and one-line? is nil, and hang? nil,\n    ; then we we don't hang and this didn't fit on the same\n    ; line and we should contine\n    ;\n    ; if hanging is true, then if one-line? is true and fzfit-one-line\n    ; is true, then we just go with hanging\n    ;\n    ; if hanging is true and if fzfit-one-line is true, then we go\n    ; with hanging.  Which is probably the same as just above.\n    ;\n    ; if hanging is true and if one-line? is nil, and if hang? is\n    ; nil, and fzfit-one-line is true then it fit on one line and we\n    ; should go with hanging.\n    ;\n    ;\n    ; Summary:\n    ;\n    ; go with hanging if:\n    ;\n    ;  o fzfit-one-line true\n    ;  o one-line? true\n    ;\n    ; Otherwise, see about flow too\n    ;\n    (if (or (fzfit-one-line options hr-lines) one-line?)\n      hanging\n      (let [flow (prepend-nl options findent (fzprint* options findent zloc))\n            _ (log-lines options \"fzprint-hang-one: flow:\" findent flow)\n            fd-lines (style-lines options findent flow)\n            _ (dbg options \"fzprint-hang-one: fd-lines:\" fd-lines)\n            _ (dbg options\n                   \"fzprint-hang-one: ending: hang-count:\" hang-count\n                   \"hanging:\" (pr-str hanging)\n                   \"flow:\" (pr-str flow))\n            hr-good? (and (:hang? (caller options))\n                          (good-enough? caller\n                                        options\n                                        :none-hang-one\n                                        hang-count\n                                        (- hindent findent)\n                                        hr-lines\n                                        fd-lines))]\n        (if hr-good? hanging flow)))))\n\n;;\n;; # Constant pair support\n;;\n\n(declare zcomment-or-newline?)\n\n; This, you might think, would be faster.  But in reality it is almost\n; exactly the same as the version that reverses the list.\n; And even a bit more complex to understand, so we'll leave it\n; here for additional possible optimizations and simplifications later.\n\n#_(defn count-constant-pairs-new\n    \"Given a seq of zlocs, work backwards from the end, and see how\n  many elements are pairs of constants (using zconstant?).  So that\n  (... :a (stuff) :b (bother)) returns 4, since both :a and :b are\n  zconstant? true. This is made more difficult by having to skip\n  comments along the way as part of the pair check, but keep track\n  of the ones we skip so the count is right in the end.  We don't\n  expect any spaces in this but newlines must be handled, because \n  this seq should have been produced by zmap or its equivalent.\n  Returns two things: [paired-item-count actual-paired-items],\n  where paired-item-count is the number of things from the end of\n  the seq you have to trim off to get the constant pairs included,\n  and the actual-paired-items is the count of the items to be checked\n  against the constant-pair-min (which is exclusive of comments and\n  newlines).  \"\n    [zloc-seq]\n    (let [zloc-seq (if (vector? zloc-seq) zloc-seq (into [] zloc-seq))\n          len (count zloc-seq)\n          last-element-idx (dec len)]\n      ; If we don't have at least two elements, we aren't doing anything useful\n      (if (not (pos? last-element-idx))\n        [0 0]\n        (loop [idx last-element-idx\n               element-count 0\n               paired-element-count 0\n               ; since it is reversed, we need a constant every second element\n               constant-required? nil\n               pair-size 0\n               actual-pair-size 0]\n          (let [element (nth zloc-seq idx)]\n            #_(prn \"count-constant-pairs: element-count:\" element-count\n                   \"paired-element-count:\" paired-element-count\n                   \"constant-required:\" constant-required?\n                   \"pair-size:\" pair-size\n                   \"actual-pair-size:\" actual-pair-size\n                   \"element:\" (zstring element))\n            (let [comment-or-newline? (zcomment-or-newline? element)]\n              (if (and (not comment-or-newline?)\n                       constant-required?\n                       (not (zconstant? element)))\n                ; we counted the right-hand and any comments of this pair, but\n                ; it isn't a pair so exit now with whatever we have so far\n                [(- element-count pair-size)\n                 (- paired-element-count actual-pair-size)]\n                (let [element-count (inc element-count)\n                      paired-element-count (if comment-or-newline?\n                                             paired-element-count\n                                             (inc paired-element-count))\n                      pair-size (if (and constant-required?\n                                         (not comment-or-newline?))\n                                  ; must be a constant, so start count over\n                                  0\n                                  (inc pair-size))\n                      actual-pair-size (if (and constant-required?\n                                                (not comment-or-newline?))\n                                         ; start count of actual pairs over as\n                                         ; well\n                                         0\n                                         (if comment-or-newline?\n                                           ; we are only counting actual pairs\n                                           ; here\n                                           actual-pair-size\n                                           (inc actual-pair-size)))]\n                  ; Are we finished?\n                  (if (zero? idx)\n                    ; Yes, remove potential elements of this pair, since we\n                    ; haven't\n                    ; seen the end of it, and return\n                    [(- element-count pair-size)\n                     (- paired-element-count actual-pair-size)]\n                    ; Not yet finished\n                    (recur (dec idx)\n                           element-count\n                           paired-element-count\n                           (if comment-or-newline?\n                             constant-required?\n                             (not constant-required?))\n                           pair-size\n                           actual-pair-size))))))))))\n\n(defn count-constant-pairs\n  \"Given a seq of zlocs, work backwards from the end, and see how\n  many elements are pairs of constants (using zconstant? or the\n  supplied constant-pair-fn).  So that (... :a (stuff) :b (bother))\n  returns 4, since both :a and :b are zconstant? true. This is made\n  more difficult by having to skip comments along the way as part\n  of the pair check, but keep track of the ones we skip so the count\n  is right in the end.  We don't expect any spaces in this but\n  newlines must be handled, because this seq should have been\n  produced by zmap or its equivalent.  Returns two things:\n  [paired-item-count actual-paired-items], where paired-item-count\n  is the number of things from the end of the seq you have to trim\n  off to get the constant pairs included, and the actual-paired-items\n  is the count of the items to be checked against the constant-pair-min\n  (which is exclusive of comments and newlines).\"\n  [constant-pair-fn zloc-seq]\n  (loop [zloc-seq-rev (reverse zloc-seq)\n         element-count 0\n         paired-element-count 0\n         ; since it is reversed, we need a constant every second element\n         constant-required? nil\n         pair-size 0\n         actual-pair-size 0]\n    (let [element (first zloc-seq-rev)]\n      #_(prn \"count-constant-pairs: element-count:\" element-count\n             \"paired-element-count:\" paired-element-count\n             \"constant-required:\" constant-required?\n             \"pair-size:\" pair-size\n             \"actual-pair-size:\" actual-pair-size\n             \"element:\" (zstring element))\n      (if (empty? zloc-seq-rev)\n        ; remove potential elements of this pair, since we haven't\n        ; seen the end of it, and return\n        [(- element-count pair-size) (- paired-element-count actual-pair-size)]\n        (let [comment-or-newline? (zcomment-or-newline? element)]\n          #_(prn (zsexpr element))\n          (if (and (not comment-or-newline?)\n                   constant-required?\n                   (if constant-pair-fn\n                     ; If we can't call sexpr on it, it isn't a constant\n                     (not (when (zsexpr? element)\n                            (constant-pair-fn (zsexpr element))))\n                     (not (zconstant? element))))\n            ; we counted the right-hand and any comments of this pair, but it\n            ; isn't a pair so exit now with whatever we have so far\n            [(- element-count pair-size)\n             (- paired-element-count actual-pair-size)]\n            (recur (next zloc-seq-rev)\n                   (inc element-count)\n                   (if comment-or-newline?\n                     paired-element-count\n                     (inc paired-element-count))\n                   (if comment-or-newline?\n                     constant-required?\n                     (not constant-required?))\n                   (if (and constant-required? (not comment-or-newline?))\n                     ; must be a constant, so start count over\n                     0\n                     (inc pair-size))\n                   (if (and constant-required? (not comment-or-newline?))\n                     ; start count of actual pairs over as well\n                     0\n                     (if comment-or-newline?\n                       ; we are only counting actual pairs here\n                       actual-pair-size\n                       (inc actual-pair-size))))))))))\n\n(defn constant-pair\n  \"Argument is a zloc-seq.  Output is a [pair-seq non-paired-item-count],\n  if any.  If there are no pair-seqs, pair-seq must be nil, not an\n  empty seq.  This will largely ignore newlines and comments.\"\n  [caller\n   {{:keys [constant-pair? constant-pair-fn constant-pair-min]} caller,\n    :as options} zloc-seq]\n  (if constant-pair?\n    (let [[paired-item-count actual-paired-items]\n            (count-constant-pairs constant-pair-fn zloc-seq)\n          non-paired-item-count (- (count zloc-seq) paired-item-count)\n          _ (dbg options\n                 \"constant-pair: non-paired-items:\" non-paired-item-count\n                 \"paired-item-count:\" paired-item-count\n                 \"actual-paired-items:\" actual-paired-items)\n          pair-seq (when (>= actual-paired-items constant-pair-min)\n                     (drop non-paired-item-count zloc-seq))]\n      [pair-seq non-paired-item-count])\n    [nil (count zloc-seq)]))\n\n;;\n;; # Take into account constant pairs\n;;\n\n(declare interpose-either-nl-hf)\n\n(declare fzprint-hang-remaining)\n\n(defn zcomment-or-newline?\n  \"If this zloc is a comment or a newline, return true.\"\n  [zloc]\n  (or (zcomment? zloc) (znewline? zloc)))\n\n(defn ensure-start-w-nl\n  \"Given a style-vec, ensure it starts with a newline.  If it doesn't,\n  then put one in.  We could take the whole newline, but the indent is\n  really the only unique thing.\"\n  [ind style-vec]\n  #_(def eswn style-vec)\n  #_(prn \"ensure-start-w-nl:\" style-vec)\n  (let [element-type (nth (first style-vec) 2)]\n    #_(prn \"ensure-start-w-nl:\" element-type)\n    (if (or (= element-type :newline) (= element-type :indent))\n      style-vec\n      ; Don't need prepend-nl, since we wouldn't be doing this if there\n      ; was a newline on the front of style-ec\n      (concat-no-nil [[(str \"\\n\" (blanks ind)) :none :indent 6]] style-vec))))\n\n(defn ensure-end-w-nl\n  \"Given a style-vec, ensure it ends with a newline.  If it doesn't,\n  then put one in.\"\n  [ind style-vec]\n  #_(def eewn style-vec)\n  #_(prn \"ensure-end-w-nl:\" style-vec)\n  (let [element-type (nth (last style-vec) 2)]\n    #_(prn \"ensure-end-w-nl:\" element-type)\n    (if (or (= element-type :newline) (= element-type :indent))\n      style-vec\n      (concat-no-nil style-vec [[(str \"\\n\" (blanks ind)) :none :indent 7]]))))\n\n\n; This version does hang first, and if it passes use-hang?, it\n; doesn't bother to do flow.\n\n(defn fzprint-hang-remaining\n  \"zloc-seq is a seq of zlocs of a collection.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc-seq if it exists.\"\n  ([caller\n    {:keys [dbg? width],\n     {:keys [hang? constant-pair? constant-pair-min hang-avoid hang-expand\n             hang-diff nl-separator? respect-nl?]}\n       caller,\n     :as options} hindent findent zloc-seq fn-style zloc-count]\n   (when (:dbg-hang options)\n     (println (dots (:pdepth options)) \"hr:\" (zstring (first zloc-seq))))\n   (dbg-pr options\n           \"fzprint-hang-remaining first:\" (zstring (first zloc-seq))\n           \"hindent:\" hindent\n           \"findent:\" findent\n           \"caller:\" caller\n           \"nl-separator?:\" nl-separator?\n           \"(count zloc-seq):\" (count zloc-seq))\n   ; (in-hang options) slows things down here, for some reason\n   (let [seq-right zloc-seq\n         seq-right (if zloc-count (take zloc-count seq-right) seq-right)\n         [pair-seq non-paired-item-count]\n           (constant-pair caller options seq-right)\n         _ (dbg options\n                \"fzprint-hang-remaining count pair-seq:\"\n                (count pair-seq))\n         #_(dbg options\n                \"fzprint-hang-remaining: *=*=*=*=*=*\" (zstring (first zloc-seq))\n                \"hindent:\" hindent\n                \"findent:\" findent\n                \"caller:\" caller\n                \"hang?\" hang?\n                \"hang-diff\" hang-diff)\n         ; Now determine if there is any point in doing a hang, because\n         ; if the flow is beyond the expand limit, there is really no\n         ; chance that the hang is not beyond the expand limit.\n         ; This is what good-enough? does:\n         ;  (<= (/ (dec p-lines) p-count) hang-expand)\n         ;  Also need to account for the indent diffs.\n         ; Would be nice to move this into a common routine, since this\n         ; duplicates logic in good-enough?\n         ;\n         ; Yes, and this caused a problem when I put in the\n         ; hang-if-equal-flow? option in good-enough, so that now\n         ; we can't cancel the hang even though we are beyond the hang-expand\n         ; because the hang might be the same as the flow, and in that case\n         ; we don't really care how long the hang-expand is. We could make\n         ; this a feature, by having a large-ish hang-expand and having it\n         ; override hang-if-equal-flow.  If we do that, we have to reorder\n         ; the checks in good-enough to put the hang-expand check first.\n         ; I can't see any great reason for doing a flow if the hang and\n         ; flow are equal, though, so we won't do that now.  And this\n         ; code comes out.\n         ;\n         #_#_[flow flow-lines] (zat options flow) ; PT\n         _ (dbg options\n                \"fzprint-hang-remaining: first hang?\" hang?\n                \"hang-avoid\" hang-avoid\n                \"findent:\" findent\n                \"hindent:\" hindent\n                \"(count seq-right):\" (count seq-right)\n                \"thing:\" (when hang-avoid (* (- width hindent) hang-avoid)))\n         hang? (and\n                 hang?\n                 ; This is a key for \"don't hang no matter what\", it isn't\n                 ; about making it prettier. People call this routine with\n                 ; these values equal to ensure that it always flows.\n                 (not= hindent findent)\n                 ; This is not the original, below.\n                 ; If we are doing respect-nl?, then the count of seq-right\n                 ; is going to be a lot more, even if it doesn't end up\n                 ; looking different than before.  So, perhaps we should\n                 ; adjust hang-avoid here?  Perhaps double it or something?\n                 (or (not hang-avoid)\n                     (< (count seq-right) (* (- width hindent) hang-avoid)))\n                 ; If the first thing in the flow is a comment, maybe we\n                 ; shouldn't be hanging anything?\n                 #_(not= (nth (first flow) 2) :comment-inline) ; PT\n                 ;flow-lines\n                 ;;TODO make this uneval!!!\n                 #_(or (<= (- hindent findent) hang-diff)\n                       (<= (/ (dec (first flow-lines)) (count seq-right))\n                           hang-expand)))\n         _ (dbg options \"fzprint-hang-remaining: second hang?\" hang?)\n         hanging\n           (#?@(:clj [zfuture options]\n                :cljs [do])\n            (let [hang-result\n                    (when hang?\n                      (if-not pair-seq\n                        ; There are no paired elements\n                        (fzprint-flow-seq (in-hang options)\n                                          hindent\n                                          seq-right\n                                          :force-nl\n                                          nil ;nl-first?\n                        )\n                        (if (not (zero? non-paired-item-count))\n                          (concat-no-nil\n                            ; The elements that are not paired\n                            (dbg-form options\n                                      \"fzprint-hang-remaining: mapv:\"\n                                      (ensure-end-w-nl\n                                        hindent\n                                        (fzprint-flow-seq\n                                          (not-rightmost (in-hang options))\n                                          hindent\n                                          (take non-paired-item-count seq-right)\n                                          :force-nl\n                                          nil ;nl-first?\n                                        )))\n                            ; The elements that are paired\n                            (dbg-form options\n                                      \"fzprint-hang-remaining: fzprint-hang:\"\n                                      (fzprint-pairs (in-hang options)\n                                                     hindent\n                                                     pair-seq)))\n                          ; All elements are paired\n                          (fzprint-pairs (in-hang options) hindent pair-seq))))]\n              [hang-result (style-lines options hindent hang-result)]))\n         ; We used to calculate hang-count by doing the hang an then counting\n         ; the output.  But ultimately this is simple a series of map calls\n         ; to the elements of seq-right, so we go right to the source for this\n         ; number now.  That let's us move the interpose calls above this\n         ; point.\n         [hanging [hanging-line-count :as hanging-lines]] (zat options hanging)\n         hang-count (count seq-right)\n         flow?\n           (not\n             (use-hang? caller options hindent hang-count hanging-line-count))\n         #_(inc-pass-count)\n         flow\n           (when flow?\n             (#?@(:clj [zfuture options]\n                  :cljs [do])\n              (let [flow-result (if-not pair-seq\n                                  ; We don't have any constant pairs\n                                  (fzprint-flow-seq options\n                                                    findent\n                                                    seq-right\n                                                    :force-nl\n                                                    :nl-first)\n                                  (if (not (zero? non-paired-item-count))\n                                    ; We have constant pairs, ; but they follow\n                                    ; some stuff that isn't paired.\n                                    ; Do the elements that are not pairs\n                                    (concat-no-nil\n                                      (ensure-end-w-nl\n                                        findent\n                                        (fzprint-flow-seq\n                                          (not-rightmost options)\n                                          findent\n                                          (take non-paired-item-count seq-right)\n                                          :force-nl\n                                          :nl-first))\n                                      ; The elements that are constant pairs\n                                      (fzprint-pairs options findent pair-seq))\n                                    ; This code path is where we have all\n                                    ; constant\n                                    ; pairs.\n                                    (fzprint-pairs options findent pair-seq)))]\n                ; Skip the first line when doing the calcuation so that\n                ; good-enough doesn't change the layout from the original\n                [flow-result\n                 (style-lines\n                   options\n                   findent\n                   ; Issue #173 -- the following code caused code to\n                   ; disappear, because if there was just one thing\n                   ; in flow-result, then it would be empty and\n                   ; style-lines would return nil, causing neither\n                   ; hang nor flow to be used.\n                   ;\n                   ; (if (not pair-seq)\n                   ;   (next flow-result)\n                   ;   flow-result)\n                   ;\n                   ; Now we do a similar thing -- as long as flow-result\n                   ; has more than one thing, below when we call good-enough.\n                   flow-result)])))\n         [flow flow-lines] (when flow (zat options flow)) ; PT\n         _ (log-lines options\n                      \"fzprint-hang-remaining: hanging:\"\n                      hindent\n                      hanging)\n         _ (dbg options\n                \"fzprint-hang-remaining: hanging-lines:\" hanging-lines\n                \"hang-count:\" hang-count)]\n     (dbg options \"fzprint-hang-remaining: flow-lines:\" flow-lines)\n     (when dbg?\n       (if (zero? hang-count)\n         (println \"hang-count = 0:\" (str (map zstring zloc-seq)))))\n     (log-lines options \"fzprint-hang-remaining: flow\" findent flow)\n     ; If we did hang and not flow, then we better use it.\n     (if (and hanging-lines (not flow-lines))\n       (if (first-nl? hanging)\n         hanging\n         (concat-no-nil [[\" \" :none :whitespace 10]] hanging))\n       (when flow-lines\n         (if (good-enough?\n               caller\n               options\n               fn-style\n               hang-count\n               (- hindent findent)\n               hanging-lines\n               ; If we have more than one line in the flow\n               ; and we didn't have any constant pairs,\n               ; then decrease the line count for the flow.\n               ; This seems to be necessary based on the results,\n               ; but it can't be done in good-enough in all cases,\n               ; because it breaks lots of stuff.  This was\n               ; previously done above, in the call to style-lines,\n               ; where we just skipped the first line.  That\n               ; seems like a bad idea, so we now just create\n               ; a new flow-lines to cover this situation.\n               ; This was provoked by Issue #173 where we lost\n               ; code when there was only one thing in flow-result,\n               ; and we skipped that thing, causing style-lines\n               ; to return nil and the whole thing disappeared.\n               (if (and (not pair-seq) (> (first flow-lines) 1))\n                 [(dec (first flow-lines)) (second flow-lines)\n                  (nth flow-lines 2)]\n                 flow-lines)\n               #_flow-lines)\n           ; If hanging starts with a newline, don't put a blank at the\n           ; end of the previous line.\n           (if (first-nl? hanging)\n             hanging\n             (concat-no-nil [[\" \" :none :whitespace 10]] hanging))\n           (ensure-start-w-nl findent flow))))))\n  ([caller options hindent findent zloc fn-style]\n   (fzprint-hang-remaining caller options hindent findent zloc fn-style nil)))\n\n; This version overlaps hang and flow, which can run into trouble when\n; you get very deep -- it runs out of threads.  But we'll keep it here\n; just for illustrative purposes, since when it works, it is pretty fast.\n#_(defn fzprint-hang-remaining-overlap\n    \"zloc-seq is a seq of zlocs of a collection.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc-seq if it exists.\"\n    ([caller\n      {:keys [dbg? width],\n       {:keys [hang? constant-pair? constant-pair-min hang-avoid hang-expand\n               hang-diff nl-separator? respect-nl?]}\n         caller,\n       :as options} hindent findent zloc-seq fn-style zloc-count]\n     (when (:dbg-hang options)\n       (println (dots (:pdepth options)) \"hr:\" (zstring (first zloc-seq))))\n     (dbg-pr options\n             \"fzprint-hang-remaining first:\" (zstring (first zloc-seq))\n             \"hindent:\" hindent\n             \"findent:\" findent\n             \"caller:\" caller\n             \"nl-separator?:\" nl-separator?\n             \"(count zloc-seq):\" (count zloc-seq))\n     ; (in-hang options) slows things down here, for some reason\n     (let [seq-right zloc-seq\n           seq-right (if zloc-count (take zloc-count seq-right) seq-right)\n           [pair-seq non-paired-item-count]\n             (constant-pair caller options seq-right)\n           _ (dbg options\n                  \"fzprint-hang-remaining count pair-seq:\"\n                  (count pair-seq))\n           flow\n             (#?@(:clj [zfuture options]\n                  :cljs [do])\n              (let [flow-result (if-not pair-seq\n                                  ; We don't have any constant pairs\n                                  (fzprint-flow-seq options\n                                                    findent\n                                                    seq-right\n                                                    :force-nl\n                                                    :nl-first)\n                                  (if (not (zero? non-paired-item-count))\n                                    ; We have constant pairs, ; but they follow\n                                    ; some stuff that isn't paired.\n                                    ; Do the elements that are not pairs\n                                    (concat-no-nil\n                                      (ensure-end-w-nl\n                                        findent\n                                        (fzprint-flow-seq\n                                          (not-rightmost options)\n                                          findent\n                                          (take non-paired-item-count seq-right)\n                                          :force-nl\n                                          :nl-first))\n                                      ; The elements that are constant pairs\n                                      (fzprint-pairs options findent pair-seq))\n                                    ; This code path is where we have all\n                                    ; constant\n                                    ; pairs.\n                                    (fzprint-pairs options findent pair-seq)))]\n                ; Skip the first line when doing the calcuation so that\n                ; good-enough doesn't change the layout from the original\n                [flow-result\n                 (style-lines\n                   options\n                   findent\n                   (if (not pair-seq) (next flow-result) flow-result))]))\n           #_(dbg options\n                  \"fzprint-hang-remaining: *=*=*=*=*=*\" (zstring (first\n                                                                   zloc-seq))\n                  \"hindent:\" hindent\n                  \"findent:\" findent\n                  \"caller:\" caller\n                  \"hang?\" hang?\n                  \"hang-diff\" hang-diff)\n           ; Now determine if there is any point in doing a hang, because\n           ; if the flow is beyond the expand limit, there is really no\n           ; chance that the hang is not beyond the expand limit.\n           ; This is what good-enough? does:\n           ;  (<= (/ (dec p-lines) p-count) hang-expand)\n           ;  Also need to account for the indent diffs.\n           ; Would be nice to move this into a common routine, since this\n           ; duplicates logic in good-enough?\n           ;\n           ; Yes, and this caused a problem when I put in the\n           ; hang-if-equal-flow? option in good-enough, so that now\n           ; we can't cancel the hang even though we are beyond the hang-expand\n           ; because the hang might be the same as the flow, and in that case\n           ; we don't really care how long the hang-expand is. We could make\n           ; this a feature, by having a large-ish hang-expand and having it\n           ; override hang-if-equal-flow.  If we do that, we have to reorder\n           ; the checks in good-enough to put the hang-expand check first.\n           ; I can't see any great reason for doing a flow if the hang and\n           ; flow are equal, though, so we won't do that now.  And this\n           ; code comes out.\n           ;\n           #_#_[flow flow-lines] (zat options flow) ; PT\n           _ (dbg options\n                  \"fzprint-hang-remaining: first hang?\" hang?\n                  \"hang-avoid\" hang-avoid\n                  \"findent:\" findent\n                  \"hindent:\" hindent\n                  \"(count seq-right):\" (count seq-right)\n                  \"thing:\" (when hang-avoid (* (- width hindent) hang-avoid)))\n           hang? (and\n                   hang?\n                   ; This is a key for \"don't hang no matter what\", it isn't\n                   ; about making it prettier. People call this routine with\n                   ; these values equal to ensure that it always flows.\n                   (not= hindent findent)\n                   ; This is not the original, below.\n                   ; If we are doing respect-nl?, then the count of seq-right\n                   ; is going to be a lot more, even if it doesn't end up\n                   ; looking different than before.  So, perhaps we should\n                   ; adjust hang-avoid here?  Perhaps double it or something?\n                   (or (not hang-avoid)\n                       (< (count seq-right) (* (- width hindent) hang-avoid)))\n                   ; If the first thing in the flow is a comment, maybe we\n                   ; shouldn't be hanging anything?\n                   #_(not= (nth (first flow) 2) :comment-inline) ; PT\n                   ;flow-lines\n                   ;;TODO make this uneval!!!\n                   #_(or (<= (- hindent findent) hang-diff)\n                         (<= (/ (dec (first flow-lines)) (count seq-right))\n                             hang-expand)))\n           _ (dbg options \"fzprint-hang-remaining: second hang?\" hang?)\n           hanging\n             (#?@(:clj [zfuture options]\n                  :cljs [do])\n              (let [hang-result\n                      (when hang?\n                        (if-not pair-seq\n                          ; There are no paired elements\n                          (fzprint-flow-seq (in-hang options)\n                                            hindent\n                                            seq-right\n                                            :force-nl\n                                            nil ;nl-first?\n                          )\n                          (if (not (zero? non-paired-item-count))\n                            (concat-no-nil\n                              ; The elements that are not paired\n                              (dbg-form\n                                options\n                                \"fzprint-hang-remaining: mapv:\"\n                                (ensure-end-w-nl\n                                  hindent\n                                  (fzprint-flow-seq\n                                    (not-rightmost (in-hang options))\n                                    hindent\n                                    (take non-paired-item-count seq-right)\n                                    :force-nl\n                                    nil ;nl-first?\n                                  )))\n                              ; The elements that are paired\n                              (dbg-form options\n                                        \"fzprint-hang-remaining: fzprint-hang:\"\n                                        (fzprint-pairs (in-hang options)\n                                                       hindent\n                                                       pair-seq)))\n                            ; All elements are paired\n                            (fzprint-pairs (in-hang options)\n                                           hindent\n                                           pair-seq))))]\n                [hang-result (style-lines options hindent hang-result)]))\n           ; We used to calculate hang-count by doing the hang an then counting\n           ; the output.  But ultimately this is simple a series of map calls\n           ; to the elements of seq-right, so we go right to the source for this\n           ; number now.  That let's us move the interpose calls above this\n           ; point.\n           [hanging hanging-lines] (zat options hanging)\n           [flow flow-lines] (zat options flow) ; PT\n           hang-count (count seq-right)\n           _ (log-lines options\n                        \"fzprint-hang-remaining: hanging:\"\n                        hindent\n                        hanging)\n           _ (dbg options\n                  \"fzprint-hang-remaining: hanging-lines:\" hanging-lines\n                  \"hang-count:\" hang-count)]\n       (dbg options \"fzprint-hang-remaining: flow-lines:\" flow-lines)\n       (when dbg?\n         (if (zero? hang-count)\n           (println \"hang-count = 0:\" (str (map zstring zloc-seq)))))\n       (log-lines options \"fzprint-hang-remaining: flow\" findent flow)\n       (when flow-lines\n         (if (good-enough? caller\n                           options\n                           fn-style\n                           hang-count\n                           (- hindent findent)\n                           hanging-lines\n                           flow-lines)\n           ; If hanging starts with a newline, don't put a blank at the\n           ; end of the previous line.\n           (if (first-nl? hanging)\n             hanging\n             (concat-no-nil [[\" \" :none :whitespace 10]] hanging))\n           (ensure-start-w-nl findent flow)))))\n    ([caller options hindent findent zloc fn-style]\n     (fzprint-hang-remaining caller options hindent findent zloc fn-style nil)))\n\n;;\n;; # Find out and print what comes before the next element\n;;\n\n(defn fzprint-get-zloc-seq\n  \"Get the zloc seq, with or without newlines, as indicated by the options.\"\n  [caller options zloc]\n  (let [caller-options (caller options)\n        zloc-seq (cond (:respect-nl? caller-options) (zmap-w-nl identity zloc)\n                       (:respect-bl? caller-options) (zmap-w-bl identity zloc)\n                       :else (zmap identity zloc))]\n    (dbg-pr options \"fzprint-get-zloc-seq:\" (map zstring zloc-seq))\n    zloc-seq))\n\n(defn newline-or-comment?\n  \"Given an zloc, is it a newline or a comment?\"\n  [zloc]\n  (when zloc\n    (let [zloc-tag (ztag zloc)]\n      (or (= zloc-tag :newline) (= zloc-tag :comment)))))\n\n(defn remove-last-newline\n  \"Given a seq of style-vecs, look at the last one, and if it is a\n  :newline, then remove it.  But the last one might be a single\n  one, in which case we will remove the whole thing, and it might be\n  the last one in a sequence, in which case we will remove just that\n  one.  If there is nothing left, return [[[\\\"\\\" :none :none]]].\"\n  [ssv]\n  #_(prn \"remove-last-newline:\" ssv)\n  (let [last-style-vec (last ssv)]\n    (if-not (= (nth (last last-style-vec) 2) :newline)\n      ssv\n      (let [last-len (count last-style-vec)\n            total-len (count ssv)\n            remove-one\n              (concat (butlast ssv)\n                      (if (= last-len 1) [] (vector (butlast last-style-vec))))]\n        (if (empty? remove-one) [[[\"\" :none :none]]] remove-one)))))\n\n(defn remove-one-newline\n  \"Given a single style-vec, look at the last element, and if it is a\n  :newline, remove it.  If there is nothing left, return :noseq\"\n  [style-vec]\n  #_(prn \"remove-one-newline:\" style-vec)\n  (let [last-style-vec (last style-vec)]\n    (if-not (= (nth last-style-vec 2) :newline)\n      style-vec\n      (let [remaining (butlast style-vec)]\n        (if (empty? remaining) :noseq remaining)))))\n\n(defn add-newline-to-comment\n  \"Given [[[\\\";stuff\\\" :none :comment]]] or \n  [[[\\\";bother\\\" :none :comment-inline 1]]] add [\\\"\\n\\\" :none :newline]\n  to the inside of it.\"\n  [indent fzprint*-return]\n  (let [the-type (nth (first fzprint*-return) 2)]\n    (if (or (= the-type :comment) (= the-type :comment-inline))\n      (concat fzprint*-return [[(str \"\\n\" (blanks indent)) :none :newline 1]])\n      fzprint*-return)))\n\n(defn gather-up-to-next-zloc\n  \"Given a zloc-seq, gather newlines and comments up to the next\n  zloc into a seq.  Returns [seq next-zloc next-count].\"\n  [zloc-seq]\n  (loop [nloc-seq zloc-seq\n         out []\n         next-count 0]\n    (if (not (newline-or-comment? (first nloc-seq)))\n      [out (first nloc-seq) next-count]\n      (recur (next nloc-seq) (conj out (first nloc-seq)) (inc next-count)))))\n\n(defn fzprint-up-to-next-zloc\n  \"Using the information returned from fzprint-up-to-first-zloc or\n  fzprint-up-to-next-zloc, find the next zloc and return \n  [pre-next-style-vec next-zloc next-count zloc-seq]\"\n  [caller options ind [_ _ current-count zloc-seq :as next-data]]\n  (let [starting-count (inc current-count)\n        nloc-seq (nthnext zloc-seq starting-count)]\n    (dbg-pr options\n            \"fzprint-up-to-next-zloc: starting-count:\" starting-count\n            \"zloc-seq:\" (map zstring zloc-seq))\n    (if-not (= (:ztype options) :zipper)\n      [:noseq (first nloc-seq) starting-count zloc-seq]\n      (let [[pre-next-zloc-seq next-zloc next-count] (gather-up-to-next-zloc\n                                                       nloc-seq)\n            next-count (+ starting-count next-count)]\n        (dbg-pr options\n                \"fzprint-up-to-next-zloc: next-count:\" next-count\n                \"pre-next-zloc-seq:\" (map zstring pre-next-zloc-seq))\n        (if (empty? pre-next-zloc-seq)\n          ; The normal case -- nothing before the first interesting zloc\n          [:noseq next-zloc next-count zloc-seq]\n          ; There were newlines or comments (or both) before the first\n          ; interesting zloc\n          (let [coll-print (fzprint-flow-seq options ind pre-next-zloc-seq)\n                ; we are set up for fzprint-seq, but fzprint-flow-seq does\n                ; a full-on style-vec, so turn it back into fzprint-seq style\n                ; output\n                coll-print (mapv vector coll-print)\n                ; We aren't trying to interpose anything here, we are just\n                ; trying to print the stuff we have in a way that will work.\n                ; Remove the last newline if we are not the first thing\n                coll-print (if (not= starting-count 0)\n                             (remove-last-newline coll-print)\n                             coll-print)\n                coll-out (apply concat-no-nil coll-print)\n                ; If we are down inside a list and  the first thing is a\n                ; comment, ensure we start with a newline.  If it is an\n                ; inline comment, then it will get fixed later.\n                coll-out (if (and (not= starting-count 0)\n                                  (let [first-type (nth (first coll-out) 2)]\n                                    (or (= first-type :comment)\n                                        (= first-type :comment-inline))))\n                           (ensure-start-w-nl ind coll-out)\n                           coll-out)\n                ; Eensure that we end with a newline if we are the first\n                ; thing\n                coll-out (if (not= starting-count 0)\n                           coll-out\n                           (ensure-end-w-nl ind coll-out))\n                ; Make sure it ends with a newline, since all comments and\n                ; newlines better end with a newline.  But how could it\n                ; not end with a newline?  We only put comments and newlines\n                ; in here, and added newlines to comments.  So we will assume\n                ; that it ends with a newline.\n               ]\n            [coll-out next-zloc next-count zloc-seq]))))))\n\n(defn fzprint-up-to-first-zloc\n  \"Returns [pre-first-style-vec first-zloc first-count zloc-seq], where\n  pre-first-style-vec will be :noseq if there isn't anything, and first-count\n  is what you give to nthnext to get to the first-zloc in zloc-seq.\"\n  [caller options ind zloc]\n  (if-not (= (:ztype options) :zipper)\n    [:noseq (first zloc) 0 zloc]\n    (let [zloc-seq (fzprint-get-zloc-seq caller options zloc)]\n      ; Start at -1 so that when fzprint-up-to-next-zloc skips, it goes\n      ; to zero.\n      (fzprint-up-to-next-zloc caller options ind [nil nil -1 zloc-seq]))))\n\n(defn get-zloc-seq-right\n  \"Using return from fzprint-up-to-first-zloc or fzprint-up-to-next-zloc,\n  [pre-next-style-vec next-zloc next-count zloc-seq], return a zloc-seq\n  pointer to just beyond the specific zloc which was found by the\n  fzprint-up-to-first or fzprint-up-to-next call.  You don't give this\n  a number, you give it the data structure from the thing that you found.\"\n  [[_ _ next-count zloc-seq :as input-data]]\n  (if (>= next-count (count zloc-seq))\n    (throw (#?(:clj Exception.\n               :cljs js/Error.)\n            (str \"get-zloc-seq-right input data inconsistent:\" input-data)))\n    (let [zloc-seq (nthnext zloc-seq (inc next-count))]\n      #_(prn \"get-zloc-seq-right: next-count:\" next-count\n             \"zloc-seq:\" (map zstring zloc-seq))\n      #_(dbg-pr options \"get-zloc-seq-right:\" (map zstring zloc-seq))\n      zloc-seq)))\n\n\n;;\n;; # Indent-only support\n;;\n\n(defn at-newline?\n  \"Is this a newline or equivalent?  Comments and newlines are both\n  newlines for the purposed of this routine.\"\n  [zloc]\n  (let [this-tag (ztag zloc)] (or (= this-tag :comment) (= this-tag :newline))))\n\n(defn next-newline\n  \"Given a zloc that is down inside of a collection, presumably\n  a list, return a vector containing the number of printing elements\n  we had to traverse to get to it as well as the newline.\"\n  [zloc]\n  (loop [nloc zloc\n         index 0]\n    #_(prn \"next-newline:\" (zstring nloc) \"tag:\" (zprint.zutil/tag nloc))\n    (let [next-right (zprint.zutil/right* nloc)]\n      (if next-right\n        (if (at-newline? nloc)\n          [index nloc]\n          (recur (zprint.zutil/right* nloc)\n                 (if-not (zprint.zutil/whitespace? nloc) (inc index) index)))\n        [index nloc]))))\n\n\n(defn next-actual\n  \"Return the next actual element, ignoring comments and whitespace\n  and everything else but real elements.\"\n  [zloc]\n  #_(prn \"next-actual: zloc\" (zstring zloc))\n  (loop [nloc zloc]\n    (if-not nloc\n      nloc\n      (let [next-nloc (zprint.zutil/zrightnws nloc)\n            next-tag (zprint.zutil/tag next-nloc)]\n        #_(prn \"nloc:\" nloc\n               \"next-actual: next-nloc:\" (zstring next-nloc)\n               \"next-tag:\" next-tag)\n        (if-not (or (= next-tag :newline) (= next-tag :comment))\n          next-nloc\n          (recur next-nloc))))))\n\n(defn first-actual\n  \"Return the first actual element, ignoring comments and whitespace\n  and everything else but real elements.\"\n  [zloc]\n  (if (at-newline? zloc) (next-actual zloc) zloc))\n\n(defn hang-zloc?\n  \"Should we hang this zloc, or flow it.  We assume that we are at\n  the start of the collection (though this could be generalized to\n  deal with other starting locations easily enough).  Return true\n  if we should hang it based just on the information in the zloc\n  itself.  The criteria are: If there is a newline after the second\n  thing in the zloc, and the amount of space prior to the third thing\n  is the same as the amount of space prior to the second thing, then\n  the incoming zloc was hung and we should do the same. Of course, it\n  would also only be hung if the second thing was on the same line as\n  the first thing.\"\n  [zloc]\n  #_(prn \"hang-zloc: zloc:\" zloc \"at-newline?:\" (at-newline? zloc))\n  (let [zloc (first-actual zloc) ; skip comments/newlines at start\n        [count-prior-to-newline newline] (next-newline zloc)]\n    #_(prn \"at-newline?:\" (at-newline? zloc)\n           \"hang-zloc?: count-prior...:\" count-prior-to-newline\n           \"zloc:\" (zstring zloc))\n    ; Are the first two real things on the same line?\n    (if (< count-prior-to-newline 2)\n      ; no -- then it can't be a hang\n      false\n      (let [second-element (zprint.zutil/zrightnws\n                             (if (zprint.zutil/whitespace? zloc)\n                               (zprint.zutil/zrightnws zloc)\n                               zloc))\n            second-indent (length-before second-element)\n            third-element (next-actual second-element)\n            third-indent (length-before third-element)]\n        #_(prn \"hang-zloc?: second-element:\" (zstring second-element)\n               \"second-indent:\" second-indent\n               \"third-element:\" (zstring third-element)\n               \"third-tag:\" (zprint.zutil/tag third-element)\n               \"third-indent:\" third-indent)\n        (and second-element third-element (= second-indent third-indent))))))\n\n(defn indent-shift\n  \"Take a style-vec that was once output from indent-zmap, and fix\n  up all of the :indent elements in it by adding (- actual-ind ind)\n  to them.  If we find a multiple thing in here, call indent-shift\n  recursively with the ind and cur-ind that is approprite.  All of\n  the actual indents are correct already -- all we are doing is\n  setting up their base.  There is no attempt to determine if we\n  are exceeding any configured width.\"\n  [caller options ind actual-ind svec]\n  (let [shift-ind actual-ind]\n    (dbg-pr options\n            \"indent-shift: ind:\" ind\n            \"actual-ind:\" actual-ind\n            \"shift-ind:\" shift-ind\n            \"svec:\" svec)\n    (loop [cur-seq svec\n           cur-ind actual-ind\n           out []]\n      (if-not cur-seq\n        out\n        (let [this-seq (first cur-seq)\n              new-seq\n                (if (vector? (first this-seq))\n                  ; is this ind correct?\n                  (indent-shift caller options ind cur-ind this-seq)\n                  (let [[s color type] this-seq\n                        next-seq (first (next cur-seq))\n                        this-shift (if (and next-seq\n                                            (not (vector? (first next-seq)))\n                                            (= (nth next-seq 2) :indent))\n                                     0\n                                     shift-ind)]\n                    (cond (= type :indent) [(str s (blanks this-shift)) color\n                                            type 42]\n                          (= type :right) [s color type shift-ind]\n                          :else this-seq)))\n              _ (dbg-pr options\n                        \"indent-shift: cur-ind:\" cur-ind\n                        \"this-seq:\" this-seq\n                        \"new-seq:\" new-seq)\n              ; Shouldn't this be (inc cur-ind)?\n              [linecnt max-width lines] (style-lines options cur-ind [new-seq])\n              ; Figure out where we are\n              last-width (last lines)]\n          (dbg-pr options\n                  \"indent-shift: last-width:\" last-width\n                  \"new-seq:\" new-seq)\n          ; Should this be (inc last-width)?\n          (recur (next cur-seq) last-width (conj out new-seq)))))))\n\n(declare merge-fzprint-seq)\n\n(defn indent-zmap\n  \"Implement :indent-only?.  This routine is the central one through\n  which all :indent-only? processing flows, and replaces all of the\n  detailed logic in fzprint-list*, fzprint-vec*, and fzprint-map*.\n  This is called directly by fzprint-vec*, which handles both vectors\n  and sets, and through fzprint-indent by fzprint-list* and\n  fzprint-map*.  Thus, all of the data structures get their\n  :indent-only? processing handled by ident-zmap.  coll-print is\n  the output from fzprint-seq, which is a style-vec in the making\n  without spacing, but with extra [] around the elements.  Everything\n  is based off of ind, and we know nothing to the left of that.\n  ind must be the left end of everything, not the right of l-str!\n  The actual-ind is to the right of l-str.  When we get a newline,\n  replace any spaces after it with our own, and that would be to\n  bring it to ind + indent.  \"\n  ([caller\n    {:keys [width rightcnt], {:keys [wrap-after-multi?]} caller, :as options}\n    ind actual-ind coll-print indent first-indent-only?]\n   (let [coll-print (merge-fzprint-seq coll-print)\n         last-index (dec (count coll-print))\n         rightcnt (fix-rightcnt rightcnt)\n         actual-indent (+ ind indent)]\n     (dbg-pr options\n             \"indent-zmap: ind:\" ind\n             \"actual-ind:\" actual-ind\n             \"first-indent-only?\" first-indent-only?\n             \"indent:\" indent\n             \"actual-indent:\" actual-indent\n             \"coll-print:\" coll-print)\n     (loop [cur-seq coll-print\n            cur-ind actual-ind\n            index 0\n            beginning? true  ; beginning of line\n            ; transient here slowed things down, in a similar routine\n            l-str-indent? true\n            out []]\n       (if-not cur-seq\n         out\n         (let [this-seq (first cur-seq)]\n           (when this-seq\n             (let [multi? (> (count this-seq) 1)\n                   _ (log-lines options \"indent-zmap:\" ind this-seq)\n                   _ (dbg-pr options\n                             \"indent-zmap loop: cur-ind:\" cur-ind\n                             \"multi?\" multi?\n                             \"(count this-seq):\" (count this-seq)\n                             \"this-seq:\" this-seq\n                             \"out:\" out)\n                   this-seq\n                     (if multi?\n                       (indent-shift caller options actual-ind cur-ind this-seq)\n                       this-seq)\n                   [linecnt max-width lines]\n                     (style-lines options cur-ind this-seq)\n                   ; Figure out where we are\n                   last-width (last lines)\n                   ; How can this be right if there are multiple lines?\n                   ; Because we called indent-zmap to get the indents right,\n                   ; and they will be but for the first line, which style-lines\n                   ; fixed because it got the cur-ind..\n                   thetype (nth (last this-seq) 2)\n                   ; This is the total width of the current line\n                   ; relative to ind\n                   len (- last-width cur-ind)\n                   _ (dbg options\n                          \"linecnt:\" linecnt\n                          \"last-width:\" last-width\n                          \"len:\" len\n                          \"type:\" thetype)\n                   len (max 0 len)\n                   ; This isn't the only newline, actually.  Sometimes they\n                   ; are comment or comment-inline.  Later, for indent-shift,\n                   ; they are :indents.  Figure this out!\n                   newline? (= thetype :newline)\n                   comma? (= thetype :comma)\n                   isempty? (empty? (first (first this-seq)))\n                   comment? (or (= thetype :comment)\n                                (= thetype :comment-inline))\n                   ; Adjust for the rightcnt on the last element\n                   ;first-comment? (and comment? (= index 0))\n                   ;first-newline? (and newline? (= index 0))\n                   ;l-str-indent? (or first-comment? first-newline?)\n                   l-str-indent? (and l-str-indent? (or comment? newline?))\n                   actual-indent (if (and (> index 0) first-indent-only?)\n                                   ind\n                                   (+ ind indent))\n                   width (if (= index last-index) (- width rightcnt) width)\n                   ; need to check size, and if one line and fits, should fit\n                   ; ??? why does it fit if this is the first thing?  Because\n                   ; if it isn't, things won't get better?  Seems to me like\n                   ; if the first thing doesn't fit, we should return nil.\n                   ;\n                   ; But this is all about indent-only, not fitting.  But\n                   ; we will probably care about fitting someday.\n                   fit? (<= (+ cur-ind len) width)\n                   ; If we don't care about fit, then don't do this!!\n                   new-ind (cond newline? actual-indent\n                                 :else (+ cur-ind 1 len))]\n               (dbg-pr\n                 options\n                 \"------ this-seq:\" this-seq\n                 \"lines:\" lines\n                 \"linecnt:\" linecnt\n                 \"multi?\" multi?\n                 \"thetype:\" thetype\n                 \"newline?:\" newline?\n                 \"comment?:\" comment?\n                 \"comma?:\" comma?\n                 \"l-str-indent?:\" l-str-indent?\n                 \"first-indent-only?\" first-indent-only?\n                 \"actual-indent:\" actual-indent\n                 \"index:\" index\n                 \"beginning?:\" beginning?\n                 \"max-width:\" max-width\n                 \"last-width:\" last-width\n                 \"len:\" len\n                 \"cur-ind:\" cur-ind\n                 \"isempty?:\" isempty?\n                 \"new-ind:\" new-ind\n                 \"width:\" width\n                 \"fit?\" fit?)\n               (recur ; [cur-seq, cur-ind, index, beginning?, out]\n                 (next cur-seq)\n                 new-ind\n                 (inc index)\n                 ; beginning can happen because we created an indent\n                 ; or because a multi already had one.\n                 (or (and isempty? beginning?) newline? (= thetype :indent))\n                 ; l-str-indent\n                 l-str-indent?\n                 ; out\n                 (if isempty?\n                   out\n                   ; TODO: concat-no-nil fails here, why?\n                   (concat\n                     out\n                     (cond\n                       ; we don't want blanks if the next thing is a newline\n                       newline?\n                         [[(str\n                             \"\\n\"\n                             (let [next-seq (first (next cur-seq))\n                                   #_(prn \"next-seq:\" next-seq)\n                                   newline-next? (when next-seq\n                                                   (= (nth (first next-seq) 2)\n                                                      :newline))]\n                               (if newline-next?\n                                 \"\"\n                                 (blanks (if l-str-indent?\n                                           actual-ind\n                                           actual-indent))))) :none :indent 12]]\n                       ; Remove next line, unnecessary\n                       (zero? index) this-seq\n                       :else (if (or beginning? comma?)\n                               this-seq\n                               (concat-no-nil [[\" \" :none :whitespace 12]]\n                                              this-seq)))))))))))))\n  ([caller options ind actual-ind coll-print indent]\n   (indent-zmap caller options ind actual-ind coll-print indent nil)))\n\n; TODO: Fix these, they both need a lot of work\n; Do we really need both, or just figure out the hang\n; ones?\n\n(def hang-indent #{:hang :none :none-body})\n\n(def flow-indent\n  #{:binding :arg1 :arg1-body :hang :fn :noarg1-body :noarg1 :arg2 :arg2-fn\n    :arg1-force-nl :gt2-force-nl :gt3-force-nl :flow :flow-body :force-nl-body\n    :force-nl})\n\n(defn newline-seq?\n  \"Given a vector of vectors, decide if we should merge these individually\n  into the top level vector.\"\n  [newline-vec]\n  (let [starts-with-nl-vec (mapv #(clojure.string/starts-with? (first %) \"\\n\")\n                             newline-vec)\n        #_(println \"newline-seq? starts-with-nl-vec\" starts-with-nl-vec)\n        true-seq (distinct starts-with-nl-vec)]\n    (and (= (count true-seq) 1) (= (first true-seq) true))))\n\n(defn merge-fzprint-seq\n  \"Given the output from fzprint-seq, which is a seq of the\n  output of fzprint*, apply a function to each of them that has\n  more than one element (since less has no meaning) and when the\n  function returns true, merge the vector in as individual elements.\"\n  [fzprint-seq-vec]\n  (into []\n        (reduce #(if (newline-seq? %2)\n                   (into [] (concat %1 (mapv vector %2)))\n                   (conj %1 %2))\n          []\n          fzprint-seq-vec)))\n\n(defn fzprint-indent\n  \"This function assumes that :indent-only? was set for the caller\n  in the options (since anything else doesn't make sense).  It takes\n  a zloc and the ind, which is where we are on the line this point,\n  and will process the zloc to include any newlines.  Of course we\n  have to have all of the white space in the zloc too, since we\n  need to ask some questions about what we are starting with at\n  some point.  We don't add newlines and we let the newlines that\n  are in there do their thing.  We might add newlines if we move\n  beyond the right margin, but for now, we don't (and it isn't\n  entirely clear how or if that would work).  This routine has to\n  make decisions about the indent, that is whether to hang or flow\n  the expression. It does that based on what was done in the input\n  if the configuration allows.\"\n  ([caller l-str r-str options ind zloc fn-style arg-1-indent\n    first-indent-only?]\n   (let [flow-indent (:indent (caller options))\n         ; If it is a map, then an indent of (count l-str) (which is 1)\n         ; is all that makes sense.\n         flow-indent (if (= caller :map) (count l-str) flow-indent)\n         l-str-len (count l-str)\n         flow-indent (if (and (> flow-indent l-str-len) (= caller :list))\n                       ; If we don't think this could be a fn, indent minimally\n                       (if arg-1-indent flow-indent l-str-len)\n                       flow-indent)\n         actual-ind (+ ind l-str-len)\n         _ (dbg-pr options\n                   \"fzprint-indent: caller:\" caller\n                   \"l-str-len:\" l-str-len\n                   \"ind:\" ind\n                   \"fn-style:\" fn-style\n                   \"arg-1-indent:\" arg-1-indent\n                   \"flow-indent:\" flow-indent\n                   \"actual-ind:\" actual-ind\n                   \"comma?\" (:comma? (caller options)))\n         ; We could enable :comma? for lists, sets, vectors someday\n         zloc-seq (if (:comma? (caller options))\n                    (zmap-w-nl-comma identity zloc)\n                    (zmap-w-nl identity zloc))\n         coll-print (fzprint-seq options ind zloc-seq)\n         _ (dbg-pr options \"fzprint-indent: coll-print:\" coll-print)\n         indent-only-style (:indent-only-style (caller options))\n         ; If we have the possibility of :input-hang, then try if it is\n         ; configured.\n         already-hung? (when (and indent-only-style\n                                  (= indent-only-style :input-hang))\n                         (hang-zloc? (zprint.zutil/down* zloc)))\n         raw-indent (if (and arg-1-indent already-hung?)\n                      (- arg-1-indent ind)\n                      flow-indent)\n         indent raw-indent\n         coll-print-contains-nil? (contains-nil? coll-print)\n         _ (dbg-pr options\n                   \"fzprint-indent:\" (zstring zloc)\n                   \"ind:\" ind\n                   \"fn-style:\" fn-style\n                   \"indent-only-style:\" indent-only-style\n                   \"already-hung?:\" already-hung?\n                   \"arg-1-indent:\" arg-1-indent\n                   \"l-str-len:\" (count l-str)\n                   \"actual-ind:\" actual-ind\n                   \"raw-indent:\" raw-indent\n                   \"coll-print-contains-nil?:\" coll-print-contains-nil?\n                   \"indent:\" indent)\n         coll-print (when-not coll-print-contains-nil? coll-print)]\n     ; indent needs to adjust for the size of l-str-vec, since actual-ind\n     ; has l-str-vec in it so that indent-zmap knows where we are on the\n     ; line.  Just like fzprint-one-line needs one-line-ind, not ind.\n     (let [output (indent-zmap caller\n                               options\n                               ind\n                               actual-ind\n                               coll-print\n                               indent\n                               first-indent-only?)]\n       (dbg-pr options \"fzprint-indent: output:\" output)\n       output)))\n  ([caller l-str r-str options ind zloc fn-style arg-1-indent]\n   (fzprint-indent caller\n                   l-str\n                   r-str\n                   options\n                   ind\n                   zloc\n                   fn-style\n                   arg-1-indent\n                   nil)))\n\n(defn zfind-seq\n  \"Find the location, counting from zero, and counting every element \n  in the seq, of the first zthing?.  Return its index if it is found, \n  nil if not.\"\n  [zthing? zloc-seq]\n  (loop [nloc zloc-seq\n         i 0]\n    (when (not (nil? nloc))\n      (if (zthing? (first nloc)) i (recur (next nloc) (inc i))))))\n\n;;\n;; # Utilities to modify list printing in various ways\n;;\n\n;;\n;; Which fn-styles use :list {:indent n} instead of\n;; :list {:indent-arg n}\n;;\n\n(def body-set\n  #{:binding :arg1-> :arg2 :arg2-fn :arg2-pair :pair-fn :fn :arg1-body\n    :arg1-pair-body :none-body :noarg1-body :flow-body})\n\n(def body-map\n  {:arg1-body :arg1,\n   :arg1-pair-body :arg1-pair,\n   :none-body :none,\n   :flow-body :flow,\n   :noarg1-body :noarg1,\n   :force-nl-body :force-nl})\n\n;;\n;; If the noarg1? value is set, this is the mapping for functions\n;; immediately below\n;; \n\n(def noarg1-set #{:noarg1 :arg1->})\n\n(def noarg1-map\n  {:arg1 :none,\n   :arg1-pair :pair-fn,\n   :arg1-extend :extend,\n   :arg2 :arg1,\n   :arg2-pair :arg1-pair})\n\n(defn noarg1\n  \"Set noarg1 in the options if it is the right fn-type.\"\n  [options fn-type]\n  (if (noarg1-set fn-type) (assoc options :no-arg1? true) options))\n\n(def fn-style->caller\n  {:arg1-pair-body :pair,\n   :arg1-pair :pair,\n   :arg2-pair :pair,\n   :extend :extend,\n   :binding :binding,\n   :arg1-extend :extend,\n   :arg2-extend :extend,\n   :pair-fn :pair})\n\n(defn get-respect-indent\n  \"Given an options map, get the respect-nl?, respect-bl? and indent-only?\n  options from the caller's options, and if the caller doesn't define these,\n  use the values from the backup section of the options map. Return\n  [respect-nl? respect-bl? indent-only?]\"\n  ; Note that the routine make-caller exists, and see its use in fzprint*\n  ; That is a different way to solve this problem\n  ;\n  ; We just evaluate the things that need to be evaluated, since this is\n  ; called a *lot*!.\n  [options caller backup]\n  (let [caller-options (caller options)\n        respect-nl? (get caller-options :respect-nl? :undef)\n        respect-bl? (get caller-options :respect-bl? :undef)\n        indent-only? (get caller-options :indent-only? :undef)]\n    [(if (not= respect-nl? :undef) respect-nl? (:respect-nl? (backup options)))\n     (if (not= respect-bl? :undef) respect-bl? (:respect-bl? (backup options)))\n     (if (not= indent-only? :undef)\n       indent-only?\n       (:indent-only? (backup options)))]))\n\n(defn allow-one-line?\n  \"Should we allow this function to print on a single line?\"\n  [{:keys [fn-force-nl fn-gt2-force-nl fn-gt3-force-nl], :as options} len\n   fn-style]\n  (not (or (fn-force-nl fn-style)\n           (and (> len 3) (fn-gt2-force-nl fn-style))\n           (and (> len 4) (fn-gt3-force-nl fn-style))\n           (if-let [future-caller (fn-style->caller fn-style)]\n             (let [caller-map (future-caller options)]\n               (or (:flow? caller-map) (:force-nl? caller-map)))))))\n\n(defn modify-zloc\n  \"If the (caller options) has a value for :return-altered-zipper, then\n  examine the value.  It should be [<depth> <symbol> <fn>]. \n  If the <depth> is nil, any depth will do. If the\n  <symbol> is nil, any symbol will do.  If the <depth> and <symbol>\n  match, then the <fn> is called as (fn caller options zloc), and must\n  return a new zloc.\"\n  [caller options zloc]\n  (let [[depth trigger-symbol modify-fn :as return-altered-zipper-value]\n          (:return-altered-zipper (caller options))]\n    (dbg options\n         \"modify-zloc caller:\" caller\n         \"ztype\" (:ztype options)\n         \"return-altered-zipper-value:\" return-altered-zipper-value)\n    (if (or (not= (:ztype options) :zipper) (nil? return-altered-zipper-value))\n      zloc\n      (let [call-fn? (and (or (nil? depth) (= (:depth options) depth))\n                          (or (not trigger-symbol)\n                              (= trigger-symbol (zsexpr (zfirst zloc))))\n                          modify-fn)]\n        (dbg options \"modify-zloc: zloc\" (zstring zloc) \"call-fn?\" call-fn?)\n        (if call-fn?\n          (let [return (modify-fn caller options zloc)]\n            (dbg options \"modify-zloc return:\" (zstring return))\n            return)\n          zloc)))))\n\n(defn fzprint-list*\n  \"Print a list, which might be a list or an anon fn.  \n  Lots of work to make a list look good, as that is typically code. \n  Presently all of the callers of this are :list or :vector-fn.\"\n  [caller l-str r-str\n   ; The options map can get re-written down a bit below, so don't get\n   ; anything with destructuring that might change with a rewritten  options\n   ; map!\n   {:keys [fn-map user-fn-map one-line? fn-style no-arg1? fn-force-nl],\n    :as options} ind zloc]\n  ; We don't need to call get-respect-indent here, because all of the\n  ; callers of fzprint-list* define respect-nl?, respect-bl? and indent-only?\n  (let [max-length (get-max-length options)\n        zloc (modify-zloc caller options zloc)\n        ; zcount does (zmap identity zloc) which counts comments and the\n        ; newline after it, but no other newlines\n        len (zcount zloc)\n        zloc (if (> len max-length) (ztake-append max-length zloc '...) zloc)\n        len (zcount zloc)\n        l-str-len (count l-str)\n        indent (:indent (options caller))\n        ; NOTE WELL -- don't use arg-1-zloc (or arg-2-zloc, etc.) as\n        ; a condition, because it might well be legitimately nil when\n        ; formatting structures.\n        [pre-arg-1-style-vec arg-1-zloc arg-1-count zloc-seq :as first-data]\n          (fzprint-up-to-first-zloc caller options (+ ind l-str-len) zloc)\n        #_(prn \"fzprint-list* zloc-seq:\" (map zstring zloc-seq))\n        arg-1-coll? (not (or (zkeyword? arg-1-zloc) (zsymbol? arg-1-zloc)))\n        ; Use an alternative arg-1-indent if the fn-style is forced on input\n        ; and we don't actually have an arg-1 from which we can get an indent.\n        ; Now, we might want to allow arg-1-coll? to give us an arg-1-indent,\n        ; maybe, someday, so we could hang next to it.\n        ; But for now, this will do.\n        arg-1-indent-alt? (and arg-1-coll? fn-style)\n        fn-str (if-not arg-1-coll? (zstring arg-1-zloc))\n        fn-style (or fn-style (fn-map fn-str) (user-fn-map fn-str))\n        ; if we don't have a function style, let's see if we can get\n        ; one by removing the namespacing\n        fn-style (if (and (not fn-style) fn-str)\n                   (fn-map (last (clojure.string/split fn-str #\"/\")))\n                   fn-style)\n        ; If we have a fn-str and not a fn-style, see if we have a default\n        ; fn-style for every function which doesn't have one explicitly set\n        fn-style (if (= fn-style :none) nil fn-style)\n        fn-style (if (and fn-str (nil? fn-style)) (:default fn-map) fn-style)\n        ; Do we have a [fn-style options] vector?\n        ; **** NOTE: The options map can change here, and if it does,\n        ; some of the things found in it above would have to change too!\n        options\n          ; The config-and-validate allows us to use :style in the options\n          ; map associated with a function.  Don't think that we really needed\n          ; to validate (second fn-style), as that was already done.  But this\n          ; does allow us to use :style and other stuff.  Potential performance\n          ; improvement would be to build a config-and-validate that did the\n          ; same things and didn't validate.\n          ;\n          ; There could be two option maps in the fn-style vector:\n          ;   [:fn-style {:option :map}]\n          ;   [:fn-style {:zipper :option-map} {:structure :option-map}]\n          ;\n          ; If there is only one, it is used for both.  If there are two,\n          ; then we use the appropriate one.\n          (if (vector? fn-style)\n            (first (zprint.config/config-and-validate\n                     \"fn-style:\"\n                     nil\n                     options\n                     (if (= (count fn-style) 2)\n                       ; only one option map\n                       (second fn-style)\n                       (if (= :zipper (:ztype options))\n                         (second fn-style)\n                         (nth fn-style 2)))))\n            options)\n        ; If we messed with the options, then find new stuff.  This will\n        ; probably change only zloc-seq because of :respect-nl? or :indent-only?\n        [pre-arg-1-style-vec arg-1-zloc arg-1-count zloc-seq :as first-data]\n          (if (vector? fn-style)\n            (fzprint-up-to-first-zloc caller options (+ ind l-str-len) zloc)\n            first-data)\n        ; Don't do this too soon, as multiple things are driven off of\n        ; (vector? fn-style), above\n        fn-style (if (vector? fn-style) (first fn-style) fn-style)\n        ; Finish finding all of the interesting stuff in the first two\n        ; elements\n        [pre-arg-2-style-vec arg-2-zloc arg-2-count _ :as second-data]\n          ; The ind is wrong, need arg-1-indent, but we don't have it yet.\n          (fzprint-up-to-next-zloc caller\n                                   options\n                                   ;(+ ind l-str-len)\n                                   (+ ind indent)\n                                   first-data)\n        ; This len doesn't include newlines or other whitespace or\n        len (zcount-zloc-seq-nc-nws zloc-seq)\n        #_(prn \"fzprint-list* pre-arg-1-style-vec:\" pre-arg-1-style-vec\n               \"pre-arg-2-style-vec:\" pre-arg-2-style-vec\n               \"arg-1-zloc:\" (zstring arg-1-zloc)\n               \"arg-2-zloc:\" (zstring arg-2-zloc)\n               \"arg-1-count:\" arg-1-count\n               \"arg-2-count:\" arg-2-count\n               \"len:\" len)\n        ; If fn-style is :replace-w-string, then we have an interesting\n        ; set of things to do.\n        ;\n        [options arg-1-zloc l-str l-str-len r-str len zloc-seq]\n          (if (and (= fn-style :replace-w-string)\n                   (:replacement-string (options caller))\n                   (= len 2))\n            [(assoc (update-in options [caller] dissoc :replacement-string)\n               :rightcnt (dec (:rightcnt options))) arg-2-zloc\n             (:replacement-string (options caller))\n             (count (:replacement-string (options caller))) \"\" 1\n             (remove-one zloc-seq arg-1-count)]\n            [options arg-1-zloc l-str l-str-len r-str len zloc-seq])\n        #_(prn \"fzprint-list*: l-str:\" l-str\n               \"l-str-len:\" l-str-len\n               \"len:\" len\n               \"fn-style:\" fn-style)\n        ; Get indents which might have changed if the options map was\n        ; re-written by the function style being a vector.\n        indent (:indent (options caller))\n        indent-arg (:indent-arg (options caller))\n        indent-only? (:indent-only? (options caller))\n        ; set indent based on fn-style\n        indent (if (body-set fn-style) indent (or indent-arg indent))\n        indent (+ indent (dec l-str-len))\n        one-line-ok? (allow-one-line? options len fn-style)\n        one-line-ok? (when-not indent-only? one-line-ok?)\n        one-line-ok? (if (not= pre-arg-1-style-vec :noseq) nil one-line-ok?)\n        ; remove -body from fn-style if it was there\n        fn-style (or (body-map fn-style) fn-style)\n        ; All styles except :hang, :flow, and :flow-body and :binding need\n        ; three elements minimum. We could put this in the fn-map,\n        ; but until there are more than three (well four) exceptions, seems\n        ; like too much mechanism.\n        fn-style (if (#{:hang :flow :flow-body :binding :replace-w-string}\n                      fn-style)\n                   fn-style\n                   (if (< len 3) nil fn-style))\n        ;fn-style (if (= fn-style :hang) fn-style (if (< len 3) nil fn-style))\n        fn-style (if no-arg1? (or (noarg1-map fn-style) fn-style) fn-style)\n        ; no-arg? only affect one level down...\n        options (if no-arg1? (dissoc options :no-arg1?) options)\n        ; If l-str isn't one char, create an indent adjustment.  Largely\n        ; for anonymous functions, which otherwise would have their own\n        ; :anon config to parallel :list, which would be just too much\n        indent-adj (dec l-str-len)\n        ; The default indent is keyed off of whether or not the first thing\n        ; in the list is itself a list, since that list could evaluate to a\n        ; fn.  You can't replace the zlist? with arg-1-coll?, since if you do\n        ; multi-arity functions aren't done right, since the argument vector\n        ; is a coll?, and so arg-1-coll? is set, and then you get a two space\n        ; indent for multi-arity functions, which is wrong.\n        ; We could, conceivably, use zvector? here to specifically handle\n        ; multi-arity functions.  Or we could remember we are in a defn and\n        ; do something special there, or we could at least decide that we\n        ; were in code when we did this zlist? thing, since that is all about\n        ; code.  That wouldn't work if it was the top-level form, but would\n        ; otherwise.\n        default-indent (if (zlist? arg-1-zloc) indent l-str-len)\n        arg-1-indent (if-not arg-1-coll? (+ ind (inc l-str-len) (count fn-str)))\n        ; If we don't have an arg-1-indent, and we noticed that the inputs\n        ; justify using an alternative, then use the alternative.\n        arg-1-indent (or arg-1-indent (when arg-1-indent-alt? (+ indent ind)))\n        ; If we have anything in pre-arg-2-style-vec, then we aren't hanging\n        ; anything.  But an arg-1-indent of nil isn't good, so we will make it\n        ; like the flow indent so we flow.\n        arg-1-indent (if (= pre-arg-2-style-vec :noseq)\n                       arg-1-indent\n                       (when arg-1-indent (+ indent ind)))\n        ; Tell people inside that we are in code.\n        ; We don't catch places where the first thing in a list is\n        ; a collection or a seq which yields a function.\n        options (if (not arg-1-coll?) (assoc options :in-code? fn-str) options)\n        options (assoc options :pdepth (inc (long (or (:pdepth options) 0))))\n        _ (when (:dbg-hang options)\n            (println (dots (:pdepth options)) \"fzs\" fn-str))\n        new-ind (+ indent ind)\n        one-line-ind (+ l-str-len ind)\n        options (if fn-style (dissoc options :fn-style) options)\n        loptions (not-rightmost options)\n        roptions options\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        ; Fudge the ind a bit for r-str-vec for anon fns: #()\n        r-str-vec (rstr-vec options (+ ind (max 0 (dec l-str-len))) zloc r-str)\n        _ (dbg-pr\n            options\n            \"fzprint-list*:\" (zstring zloc)\n            \"fn-str\" fn-str\n            \"fn-style:\" fn-style\n            \"len:\" len\n            \"ind:\" ind\n            \"indent:\" indent\n            \"default-indent:\" default-indent\n            \"one-line-ok?\" one-line-ok?\n            \"arg-1-coll?\" arg-1-coll?\n            \"arg-1-indent:\" arg-1-indent\n            \"arg-1-zloc:\" (zstring arg-1-zloc)\n            \"pre-arg-1-style-vec:\" pre-arg-1-style-vec\n            \"l-str:\" (str \"'\" l-str \"'\")\n            \"l-str-len:\" l-str-len\n            \"r-str-vec:\" r-str-vec\n            \"indent-adj:\" indent-adj\n            \"one-line?:\" one-line?\n            \"indent-only?:\" indent-only?\n            \"rightcnt:\" (:rightcnt options)\n            \"replacement-string:\" (:replacement-string (caller options))\n            \":ztype:\" (:ztype options))\n        one-line (if (and (zero? len) (= pre-arg-1-style-vec :noseq))\n                   :empty\n                   (when one-line-ok?\n                     (fzprint-one-line options one-line-ind zloc-seq)))]\n    (cond\n      one-line (if (= one-line :empty)\n                 (concat-no-nil l-str-vec r-str-vec)\n                 (concat-no-nil l-str-vec one-line r-str-vec))\n      ; If we are in :one-line mode, and it didn't fit on one line,\n      ; we are done!  We don't see this debugging, below.  Suppose\n      ; we never get here?\n      one-line?\n        (dbg options \"fzprint-list*:\" fn-str \" one-line did not work!!!\")\n      (dbg options \"fzprint-list*: fn-style:\" fn-style) nil\n      (and (= len 0) (= pre-arg-1-style-vec :noseq)) (concat-no-nil l-str-vec\n                                                                    r-str-vec)\n      indent-only? (concat-no-nil l-str-vec\n                                  (fzprint-indent caller\n                                                  l-str\n                                                  r-str\n                                                  options\n                                                  ind\n                                                  zloc\n                                                  fn-style\n                                                  arg-1-indent)\n                                  r-str-vec)\n      (= len 1)\n        ; While len is one, don't assume that there is actually only one\n        ; thing to print and use fzprint*.  len only counts the non-comment\n        ; and non-nl elements, and there might be other things to print.\n        (concat-no-nil l-str-vec\n                       (fzprint-flow-seq roptions one-line-ind zloc-seq)\n                       r-str-vec)\n      ; In general, we don't have a fn-style if we have less than 3 elements.\n      ; However, :binding is allowed with any number up to this point, so we\n      ; have to check here.  :binding is actually allowed with at least two\n      ; elements, the third through n are optional.\n      (and (= fn-style :binding) (> len 1) (zvector? arg-2-zloc))\n        (let [[hang-or-flow binding-style-vec]\n                (fzprint-hang-unless-fail loptions\n                                          (or arg-1-indent (+ indent ind))\n                                          (+ indent ind)\n                                          fzprint-binding-vec\n                                          arg-2-zloc)\n              binding-style-vec (if (= hang-or-flow :hang)\n                                  (concat-no-nil [[\" \" :none :whitespace 14]]\n                                                 binding-style-vec)\n                                  binding-style-vec)]\n          (concat-no-nil l-str-vec\n                         pre-arg-1-style-vec\n                         ; TODO: get rid of inc ind\n                         (fzprint* loptions (inc ind) arg-1-zloc)\n                         pre-arg-2-style-vec\n                         binding-style-vec\n                         (concat-no-nil\n                           ; Here we use options, because fzprint-flow-seq\n                           ; will sort it out.  It will also handle an\n                           ; empty zloc-seq by returning :noseq, so we\n                           ; don't have to check for (> len 2) before\n                           ; we call it.\n                           (fzprint-flow-seq options\n                                             (+ indent ind)\n                                             (get-zloc-seq-right second-data)\n                                             :force-nl\n                                             :newline-first)\n                           r-str-vec)))\n      (= fn-style :pair-fn)\n        (let [zloc-seq-right-first (get-zloc-seq-right first-data)\n              zloc-count (count zloc-seq)]\n          (concat-no-nil l-str-vec\n                         pre-arg-1-style-vec\n                         (fzprint* loptions (inc ind) arg-1-zloc)\n                         (fzprint-hang (assoc-in options\n                                         [:pair :respect-nl?]\n                                         (:respect-nl? (caller options)))\n                                       :pair-fn\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       fzprint-pairs\n                                       zloc-count\n                                       zloc-seq-right-first)\n                         r-str-vec))\n      (= fn-style :extend)\n        (let [zloc-seq-right-first (get-zloc-seq-right first-data)]\n          (concat-no-nil\n            l-str-vec\n            pre-arg-1-style-vec\n            (fzprint* loptions (inc ind) arg-1-zloc)\n            (prepend-nl\n              options\n              (+ indent ind)\n              ; I think fzprint-pairs will sort out which\n              ; is and isn't the rightmost because of\n              ; two-up\n              (fzprint-extend options (+ indent ind) zloc-seq-right-first))\n            r-str-vec))\n      ; needs (> len 2) but we already checked for that above in fn-style\n      (or (and (= fn-style :fn) (not (zlist? arg-2-zloc)))\n          (= fn-style :arg2)\n          (= fn-style :arg2-fn)\n          (= fn-style :arg2-pair)\n          (= fn-style :arg2-extend))\n        (let [[pre-arg-3-style-vec arg-3-zloc arg-3-count _ :as third-data]\n                ; The ind is wrong, need arg-1-indent, but we don't have it yet.\n                (fzprint-up-to-next-zloc caller\n                                         options\n                                         ; This is probably wrong\n                                         ; (+ ind l-str-len)\n                                         (+ ind indent)\n                                         second-data)\n              #_(prn \"pre-arg-1-style-vec:\" pre-arg-1-style-vec)\n              #_(prn \"arg-1-zloc:\" (zstring arg-1-zloc))\n              #_(prn \"pre-arg-2-style-vec:\" pre-arg-2-style-vec)\n              #_(prn \"arg-2-zloc:\" (zstring arg-2-zloc))\n              #_(prn \"pre-arg-3-style-vec:\" pre-arg-3-style-vec)\n              #_(prn \"arg-3-zloc:\" (zstring arg-3-zloc))\n              zloc-seq-right-third (get-zloc-seq-right third-data)\n              second-element (fzprint-hang-one\n                               caller\n                               (if (not arg-3-zloc) options loptions)\n                               ; This better not be nil\n                               arg-1-indent\n                               (+ indent ind)\n                               arg-2-zloc)\n              [line-count max-width]\n                ; arg-1-indent better not be nil here either\n                (style-lines loptions arg-1-indent second-element)\n              first-three\n                (when second-element\n                  (let [first-two-wo-pre-arg-1\n                          (concat-no-nil\n                            (fzprint* loptions (+ indent ind) arg-1-zloc)\n                            pre-arg-2-style-vec\n                            second-element\n                            pre-arg-3-style-vec)\n                        local-options\n                          (if (not zloc-seq-right-third) options loptions)\n                        first-two-one-line?\n                          (fzfit-one-line local-options\n                                          (style-lines local-options\n                                                       (+ ind indent)\n                                                       first-two-wo-pre-arg-1))\n                        ; Add pre-arg-1-style-vec back in, which might push\n                        ; it to two lines (or many lines), but that\n                        ; doesn't matter.\n                        first-two (concat-no-nil pre-arg-1-style-vec\n                                                 first-two-wo-pre-arg-1)]\n                    (when-not first-two-one-line?\n                      (dbg-pr options\n                              \"fzprint-list*: :arg2-* first two didn't fit:\"\n                              first-two))\n                    (concat-no-nil\n                      first-two\n                      (if (or (= fn-style :arg2)\n                              (= fn-style :arg2-pair)\n                              (= fn-style :arg2-fn)\n                              (= fn-style :arg2-extend)\n                              (and (zvector? arg-3-zloc) (= line-count 1)))\n                        (fzprint-hang-one\n                          caller\n                          (if (not zloc-seq-right-third) options loptions)\n                          (if (and (= pre-arg-3-style-vec :noseq)\n                                   first-two-one-line?)\n                            ; hang it if possible\n                            max-width\n                            ; flow it\n                            (+ indent ind))\n                          (+ indent ind)\n                          arg-3-zloc)\n                        (prepend-nl options\n                                    (+ indent ind)\n                                    (fzprint* (if (not zloc-seq-right-third)\n                                                options\n                                                loptions)\n                                              (+ indent ind)\n                                              arg-3-zloc))))))]\n          (when first-three\n            (if (not zloc-seq-right-third)\n              ; if nothing after the third thing, means just three things\n              (concat-no-nil l-str-vec first-three r-str-vec)\n              ; more than three things\n              (concat-no-nil\n                l-str-vec\n                first-three\n                (cond (= fn-style :arg2-pair)\n                        (prepend-nl options\n                                    (+ indent ind)\n                                    (fzprint-pairs options\n                                                   (+ indent ind)\n                                                   zloc-seq-right-third))\n                      (= fn-style :arg2-extend)\n                        (prepend-nl options\n                                    (+ indent ind)\n                                    (fzprint-extend options\n                                                    (+ indent ind)\n                                                    zloc-seq-right-third))\n                      :else (fzprint-hang-remaining caller\n                                                    ;options\n                                                    (if (= fn-style :arg2-fn)\n                                                      (assoc options\n                                                        :fn-style :fn)\n                                                      options)\n                                                    (+ indent ind)\n                                                    ; force flow\n                                                    (+ indent ind)\n                                                    zloc-seq-right-third\n                                                    fn-style))\n                r-str-vec))))\n      (and (= fn-style :arg1-mixin) (> len 3))\n        (let [[pre-arg-3-style-vec arg-3-zloc arg-3-count _ :as third-data]\n                (fzprint-up-to-next-zloc caller\n                                         options\n                                         (+ ind indent)\n                                         second-data)\n              [pre-arg-4-style-vec arg-4-zloc arg-4-count _ :as fourth-data]\n                (fzprint-up-to-next-zloc caller\n                                         options\n                                         (+ ind indent)\n                                         third-data)\n              arg-vec-index (or (zfind-seq #(or (zvector? %)\n                                                (when (zlist? %)\n                                                  (zvector? (zfirst %))))\n                                           zloc-seq)\n                                0)\n              doc-string? (string? (zsexpr arg-3-zloc))\n              mixin-start (if doc-string? arg-4-count arg-3-count)\n              mixin-length (- arg-vec-index mixin-start 1)\n              mixins? (pos? mixin-length)\n              doc-string (when doc-string?\n                           (fzprint-hang-one caller\n                                             loptions\n                                             (+ indent ind)\n                                             ; force flow\n                                             (+ indent ind)\n                                             arg-3-zloc))\n              #_(prn \":arg1-mixin: doc-string?\" doc-string?\n                     \"mixin-start:\" mixin-start\n                     \"mixin-length:\" mixin-length\n                     \"mixins?\" mixins?\n                     \"arg-vec-index:\" arg-vec-index\n                     \"doc-string\" doc-string\n                     \"arg-1-count:\" arg-1-count\n                     \"arg-1-zloc:\" (zstring arg-1-zloc)\n                     \"arg-2-count:\" arg-2-count\n                     \"arg-2-zloc:\" (zstring arg-2-zloc)\n                     \"arg-3-count:\" arg-3-count\n                     \"arg-3-zloc:\" (zstring arg-3-zloc)\n                     \"arg-4-count:\" arg-4-count\n                     \"arg-4-zloc:\" (zstring arg-4-zloc))\n              ; Have to deal with no arg-vec-index!!\n              mixins\n                (when mixins?\n                  (let [mixin-sentinal (fzprint-hang-one\n                                         caller\n                                         loptions\n                                         (+ indent ind)\n                                         ; force flow\n                                         (+ indent ind)\n                                         (if doc-string? arg-4-zloc arg-3-zloc))\n                        [line-count max-width]\n                          (style-lines loptions (+ indent ind) mixin-sentinal)]\n                    (concat-no-nil\n                      (if doc-string? pre-arg-4-style-vec pre-arg-3-style-vec)\n                      mixin-sentinal\n                      (fzprint-hang-remaining\n                        caller\n                        loptions\n                        ; Apparently hang-remaining gives\n                        ; you a\n                        ; space after the current thing,\n                        ; so we\n                        ; need to account for it now,\n                        ; since\n                        ; max-width is the end of the\n                        ; current\n                        ; thing\n                        (inc max-width)\n                        (dec (+ indent indent ind))\n                        (get-zloc-seq-right\n                          (if doc-string fourth-data third-data))\n                        fn-style\n                        mixin-length))))]\n          (concat-no-nil\n            l-str-vec\n            pre-arg-1-style-vec\n            (fzprint* loptions (inc ind) arg-1-zloc)\n            pre-arg-2-style-vec\n            (fzprint-hang-one caller\n                              (if (= len 2) options loptions)\n                              arg-1-indent\n                              (+ indent ind)\n                              arg-2-zloc)\n            (cond (and doc-string? mixins?) (concat-no-nil pre-arg-3-style-vec\n                                                           doc-string\n                                                           (remove-one-newline\n                                                             mixins))\n                  doc-string? (concat-no-nil pre-arg-3-style-vec doc-string)\n                  mixins? (remove-one-newline mixins)\n                  :else :noseq)\n            (fzprint-hang-remaining\n              caller\n              (noarg1 options fn-style)\n              (+ indent ind)\n              ; force flow\n              (+ indent ind)\n              (nthnext zloc-seq\n                       (if mixins?\n                         arg-vec-index\n                         (if doc-string? arg-4-count arg-3-count)))\n              fn-style)\n            r-str-vec))\n      (or (= fn-style :arg1-pair)\n          (= fn-style :arg1)\n          (= fn-style :arg1-force-nl)\n          (= fn-style :arg1->))\n        (concat-no-nil\n          l-str-vec\n          pre-arg-1-style-vec\n          (fzprint* loptions (inc ind) arg-1-zloc)\n          pre-arg-2-style-vec\n          (fzprint-hang-one caller\n                            (if (= len 2) options loptions)\n                            arg-1-indent\n                            (+ indent ind)\n                            arg-2-zloc)\n          ; then either pair or remaining-seq\n          ; we don't do a full hanging here.\n          ; We wouldn't be here if len < 3\n          (if (= fn-style :arg1-pair)\n            (prepend-nl options\n                        (+ indent ind)\n                        (fzprint-pairs options\n                                       (+ indent ind)\n                                       (get-zloc-seq-right second-data)))\n            (fzprint-hang-remaining caller\n                                    (noarg1 options fn-style)\n                                    (+ indent ind)\n                                    ; force flow\n                                    (+ indent ind)\n                                    (get-zloc-seq-right second-data)\n                                    fn-style))\n          r-str-vec)\n      ; we know that (> len 2) if fn-style not= nil\n      (= fn-style :arg1-extend)\n        (let [zloc-seq-right-second (get-zloc-seq-right second-data)]\n          (cond (zvector? arg-2-zloc)\n                  ; This will put the second argument (a vector) on a different\n                  ; line than the function name.  No known uses for this code\n                  ; as of 7/20/19.  It does work with :respect-nl and has tests.\n                  (concat-no-nil\n                    l-str-vec\n                    pre-arg-1-style-vec\n                    (fzprint* loptions (+ indent ind) arg-1-zloc)\n                    pre-arg-2-style-vec\n                    (prepend-nl options\n                                (+ indent ind)\n                                (fzprint* loptions (+ indent ind) arg-2-zloc))\n                    (prepend-nl options\n                                (+ indent ind)\n                                (fzprint-extend options\n                                                (+ indent ind)\n                                                zloc-seq-right-second))\n                    r-str-vec)\n                :else (concat-no-nil\n                        l-str-vec\n                        pre-arg-1-style-vec\n                        (fzprint* loptions (inc ind) arg-1-zloc)\n                        pre-arg-2-style-vec\n                        (fzprint-hang-one caller\n                                          (if (= len 2) options loptions)\n                                          arg-1-indent\n                                          (+ indent ind)\n                                          arg-2-zloc)\n                        (prepend-nl options\n                                    (+ indent ind)\n                                    (fzprint-extend options\n                                                    (+ indent ind)\n                                                    zloc-seq-right-second))\n                        r-str-vec)))\n      ; Unspecified seq, might be a fn, might not.\n      ; If (first zloc) is a seq, we won't have an\n      ; arg-1-indent.  In that case, just flow it\n      ; out with remaining seq.  Since we already\n      ; know that it won't fit on one line.  If it\n      ; might be a fn, try hanging and flow and do\n      ; what we like better.  Note that default-indent\n      ; might be 1 here, which means that we are pretty\n      ; sure that the (zfirst zloc) isn't a function\n      ; and we aren't doing code.\n      ;\n      :else (concat-no-nil\n              l-str-vec\n              pre-arg-1-style-vec\n              ; Can't use arg-1-zloc here as the if test, because when\n              ; formatting structures, arg-1-zloc might well be nil!\n              (if (not (zero? len))\n                (fzprint* loptions (+ l-str-len ind) arg-1-zloc)\n                :noseq)\n              ; Same here -- can't use arg-1-zloc as if test!!\n              (if (not (zero? len))\n                (let [zloc-seq-right-first (get-zloc-seq-right first-data)]\n                  (if zloc-seq-right-first\n                    ; We have something else to format after arg-1-zloc\n                    (if #_(and arg-1-indent (not= fn-style :flow))\n                      arg-1-indent\n                      ; Use fzprint-hang-remaining for :flow as well, with\n                      ; hindent = findent to force flow, so that constant\n                      ; pairing is done for :flow functions.\n                      (let [result (fzprint-hang-remaining\n                                     caller\n                                     (noarg1 options fn-style)\n                                     #_arg-1-indent\n                                     (if (= fn-style :flow)\n                                       ; If the fn-type is :flow, make the\n                                       ; hindent = findent so that it will\n                                       ; flow\n                                       (+ indent ind)\n                                       arg-1-indent)\n                                     ; Removed indent-adj because it caused\n                                     ; several problems, issue #163\n                                     (+ indent ind #_indent-adj)\n                                     ; Can't do this, because\n                                     ; hang-remaining\n                                     ; doesn't take a seq\n                                     zloc-seq-right-first\n                                     ;(znthnext zloc 0)\n                                     fn-style)]\n                        (dbg-pr options\n                                \"fzprint-list*: r-str-vec:\" r-str-vec\n                                \"result:\" result)\n                        result)\n                      ; This is collection as the first thing. Used to handle\n                      ; :flow here as well, but now it goes through\n                      ; fzprint-hang-remaining with hindent = findent so that\n                      ; constant pairing works for flow.\n                      (let [local-indent (+ default-indent ind indent-adj)]\n                        (concat-no-nil ;[[(str \"\\n\" (blanks local-indent)) :none\n                                       ;:indent]]\n                          (fzprint-flow-seq (noarg1 options fn-style)\n                                            local-indent\n                                            ;(nthnext (zmap identity\n                                            ;zloc) 1)\n                                            zloc-seq-right-first\n                                            :force-nl\n                                            :newline-first))))\n                    ; Nothing else after arg-1-zloc\n                    :noseq))\n                :noseq)\n              r-str-vec))))\n\n(defn fzprint-list\n  \"Pretty print and focus style a :list element.\"\n  [options ind zloc]\n  (dbg-pr options \"fzprint-list\")\n  (fzprint-list* :list \"(\" \")\" (rightmost options) ind zloc))\n\n(defn fzprint-anon-fn\n  \"Pretty print and focus style a fn element.\"\n  [options ind zloc]\n  (dbg-pr options \"fzprint-anon-fn\")\n  (fzprint-list* :list \"#(\" \")\" (rightmost options) ind zloc))\n\n(defn any-zcoll?\n  \"Return true if there are any collections in the collection.\"\n  [options ind zloc]\n  (let [coll?-seq (zmap zcoll? zloc)] (reduce #(or %1 %2) nil coll?-seq)))\n\n;;\n;; # Put things on the same line\n;;\n\n(defn wrap-zmap\n  \"Given the output from fzprint-seq, which is a style-vec in\n  the making without spacing, but with extra [] around the elements,\n  wrap the elements to the right margin.\"\n  [caller\n   {:keys [width rightcnt],\n    {:keys [wrap-after-multi? respect-nl?]} caller,\n    :as options} ind coll-print]\n  #_(prn \"wrap-zmap:\" coll-print)\n  (let [last-index (dec (count coll-print))\n        rightcnt (fix-rightcnt rightcnt)]\n    (loop [cur-seq coll-print\n           cur-ind ind\n           index 0\n           previous-newline? false\n           ; transient here slows things down, interestingly enough\n           out []]\n      (if-not cur-seq\n        (do (dbg-pr options \"wrap-zmap: out:\" out) out)\n        (let [next-seq (first cur-seq)]\n          (when next-seq\n            (let [multi? (> (count (first cur-seq)) 1)\n                  this-seq (first cur-seq)\n                  _ (log-lines options \"wrap-zmap:\" ind this-seq)\n                  _ (dbg-pr options \"wrap-zmap: ind:\" ind \"this-seq:\" this-seq)\n                  [linecnt max-width lines] (style-lines options ind this-seq)\n                  last-width (last lines)\n                  len (- last-width ind)\n                  len (max 0 len)\n                  newline? (= (nth (first this-seq) 2) :newline)\n                  comment?\n                    (if respect-nl? nil (= (nth (first this-seq) 2) :comment))\n                  comment-inline? (if respect-nl?\n                                    nil\n                                    (= (nth (first this-seq) 2)\n                                       :comment-inline))\n                  width (if (= index last-index) (- width rightcnt) width)\n                  ; need to check size, and if one line and fits, should fit\n                  fit? (and (not newline?)\n                            (or (zero? index) (not comment?))\n                            (or (zero? index)\n                                (and (if multi? (= linecnt 1) true)\n                                     (<= (+ cur-ind len) width))))\n                  new-ind (cond\n                            ; Comments cause an overflow of the size\n                            (or comment? comment-inline?) (inc width)\n                            (and multi? (> linecnt 1) (not wrap-after-multi?))\n                              width\n                            fit? (+ cur-ind len 1)\n                            newline? ind\n                            :else (+ ind len 1))]\n              #_(prn \"------ this-seq:\" this-seq\n                     \"lines:\" lines\n                     \"linecnt:\" linecnt\n                     \"multi?\" multi?\n                     \"newline?:\" newline?\n                     \"previous-newline?:\" previous-newline?\n                     \"linecnt:\" linecnt\n                     \"max-width:\" max-width\n                     \"last-width:\" last-width\n                     \"len:\" len\n                     \"cur-ind:\" cur-ind\n                     \"new-ind:\" new-ind\n                     \"width:\" width\n                     \"fit?\" fit?)\n              ; need to figure out what to do with a comment,\n              ; want to force next line to not fit whether or not\n              ; this line fit.  Comments are already multi-line, and\n              ; it is really not clear what multi? does in this routine\n              (recur\n                (next cur-seq)\n                new-ind\n                (inc index)\n                newline?\n                ; TODO: concat-no-nil fails here, why?\n                (concat\n                  out\n                  (if fit?\n                    (if (not (zero? index))\n                      (concat-no-nil [[\" \" :none :whitespace 15]] this-seq)\n                      this-seq)\n                    (if newline?\n                      [[(str \"\\n\"\n                             ; Fix sets and vectors to have terminal right thing\n                             ; after a comment or newline be indented like other\n                             ; elements are.  Used to just be (blanks (dec\n                             ; new-ind))\n                             ; now the if checks to see if we are at the end,\n                             ; and does new-ind, which is like the other stuff.\n                             ; But wrong for the future of where we are going,\n                             ; as it happens.\n                             (blanks\n                               ; Figure out what the next thing is\n                               (let [this-seq-next (first (next cur-seq))\n                                     newline? (when this-seq-next\n                                                (= (nth (first this-seq-next) 2)\n                                                   :newline))]\n                                 ; If it is a newline, don't put any blanks on\n                                 ; this line\n                                 (if newline? 0 (dec new-ind))))) :none :indent\n                        21]]\n                      ; Unclear if a prepend-nl would be useful here...\n                      (if previous-newline?\n                        (concat-no-nil [[\" \" :none :whitespace 16]] this-seq)\n                        (prepend-nl options ind this-seq)))))))))))))\n\n(defn remove-nl\n  \"Remove any [_ _ :newline] from the seq.\"\n  [coll]\n  (remove #(= (nth (first %) 2) :newline) coll))\n\n(defn internal-validate\n  \"Validate an options map that was returned from some internal configuration\n  expression or configuration.  Either returns the options map or throws\n  an error.\"\n  [options error-str]\n  (let [errors (validate-options options)\n        errors (when errors\n                 (str \"Options resulting from \" error-str\n                      \" had these errors: \" errors))]\n    (if (not (empty? errors))\n      (throw (#?(:clj Exception.\n                 :cljs js/Error.)\n              errors))\n      options)))\n\n(defn lazy-sexpr-seq\n  [nws-seq]\n  (if (seq nws-seq)\n    (lazy-cat [(zsexpr (first nws-seq))] (lazy-sexpr-seq (rest nws-seq)))\n    []))\n\n(defn comment-in-zloc-seq?\n  \"If there are any comments at the top level of the zloc-seq, return true,\n  else nil.\"\n  [zloc-seq]\n  (reduce #(when (= (ztag %2) :comment) (reduced true)) false zloc-seq))\n\n(defn fzprint-vec*\n  \"Print basic stuff like a vector or a set or an array.  Several options \n  for how to print them.\"\n  [caller l-str r-str\n   {:keys [rightcnt in-code?],\n    {:keys [wrap-coll? wrap? binding? option-fn-first option-fn sort?\n            sort-in-code? fn-format indent]}\n      caller,\n    :as options} ind zloc]\n  (dbg options \"fzprint-vec* ind:\" ind \"indent:\" indent \"caller:\" caller)\n  (if (and binding? (= (:depth options) 1))\n    (fzprint-binding-vec options ind zloc)\n    (let [[respect-nl? respect-bl? indent-only?]\n            (get-respect-indent options caller :vector)\n          l-str-len (count l-str)\n          l-str-vec [[l-str (zcolor-map options l-str) :left]]\n          r-str-vec\n            (rstr-vec options (+ ind (max 0 (dec l-str-len))) zloc r-str)\n          len (zcount zloc)\n          new-options (when option-fn-first\n                        (let [first-sexpr (zsexpr (zfirst-no-comment zloc))]\n                          (internal-validate\n                            (option-fn-first options first-sexpr)\n                            (str \":vector :option-fn-first called with \"\n                                 first-sexpr))))\n          _ (when option-fn-first\n              (dbg-pr options\n                      \"fzprint-vec* option-fn-first new options\"\n                      new-options))\n          options (merge-deep options new-options)\n          new-options\n            (when option-fn\n              (let [nws-seq (remove zwhitespaceorcomment? (zseqnws zloc))\n                    nws-count (count nws-seq)\n                    sexpr-seq (lazy-sexpr-seq nws-seq)]\n                (internal-validate\n                  (option-fn options nws-count sexpr-seq)\n                  (str \":vector :option-fn called with sexpr count \"\n                       nws-count))))\n          _ (when option-fn\n              (dbg-pr options \"fzprint-vec* option-fn new options\" new-options))\n          {{:keys [wrap-coll? wrap? binding? respect-bl? respect-nl? sort?\n                   fn-format sort-in-code? indent indent-only?]}\n             caller,\n           :as options}\n            (merge-deep options new-options)]\n      (if fn-format\n        ; If we have fn-format, move immediately to fzprint-list* and\n        ; let :vector-fn configuration drive what we do (e.g., indent-only,\n        ; or whatever).  That is to say that :indent-only? in :vector doesn't\n        ; override option-fn-first or option-fn\n        (fzprint-list* :vector-fn\n                       \"[\"\n                       \"]\"\n                       (assoc options :fn-style fn-format)\n                       ind\n                       zloc)\n        (let [; If sort? is true, then respect-nl? and respect-bl? make\n              ; no sense.  And vice versa.\n              ; If respect-nl? or respect-bl?, then no sort.\n              ; If we have comments, then no sort, because we'll lose the\n              ; comment context.\n              indent (or indent (count l-str))\n              new-ind (if indent-only? ind (+ indent ind))\n              _ (dbg-pr options\n                        \"fzprint-vec*:\" (zstring zloc)\n                        \"new-ind:\" new-ind)\n              zloc-seq (cond (or respect-nl? indent-only?) (zmap-w-nl identity\n                                                                      zloc)\n                             respect-bl? (zmap-w-bl identity zloc)\n                             :else (zmap identity zloc))\n              zloc-seq (if (and sort?\n                                (if in-code? sort-in-code? true)\n                                (not (comment-in-zloc-seq? zloc-seq))\n                                (not respect-nl?)\n                                (not respect-bl?)\n                                (not indent-only?))\n                         (order-out caller options identity zloc-seq)\n                         zloc-seq)\n              coll-print (if (zero? len)\n                           [[[\"\" :none :whitespace 17]]]\n                           (fzprint-seq options new-ind zloc-seq))\n              _ (dbg-pr options \"fzprint-vec*: coll-print:\" coll-print)\n              ; If we got any nils from fzprint-seq and we were in :one-line\n              ; mode\n              ; then give up -- it didn't fit on one line.\n              coll-print (if-not (contains-nil? coll-print) coll-print)\n              one-line (when coll-print\n                         ; should not be necessary with contains-nil? above\n                         (apply concat-no-nil\n                           (interpose [[\" \" :none :whitespace 18]]\n                             ; This causes single line things to also respect-nl\n                             ; when it is enabled.  Could be separately\n                             ; controlled\n                             ; instead of with :respect-nl? if desired.\n                             (if (or respect-nl? :respect-bl? indent-only?)\n                               coll-print\n                               (remove-nl coll-print)))))\n              _ (log-lines options \"fzprint-vec*:\" new-ind one-line)\n              _ (dbg-pr options\n                        \"fzprint-vec*: new-ind:\" new-ind\n                        \"one-line:\" one-line)\n              one-line-lines (style-lines options new-ind one-line)]\n          (if (zero? len)\n            (concat-no-nil l-str-vec r-str-vec)\n            (when one-line-lines\n              (if (fzfit-one-line options one-line-lines)\n                (concat-no-nil l-str-vec one-line r-str-vec)\n                (if indent-only?\n                  ; Indent Only\n                  (concat-no-nil l-str-vec\n                                 (indent-zmap caller\n                                              options\n                                              ind\n                                              ; actual-ind\n                                              (+ ind l-str-len)\n                                              coll-print\n                                              indent)\n                                 r-str-vec)\n                  ; Regular Pprocessing\n                  (if (or (and (not wrap-coll?)\n                               (any-zcoll? options new-ind zloc))\n                          (not wrap?))\n                    (concat-no-nil\n                      l-str-vec\n                      (apply concat-no-nil\n                        (precede-w-nl options new-ind coll-print :no-nl-first))\n                      r-str-vec)\n                    ; Since there are either no collections in this vector or\n                    ; set\n                    ; or\n                    ; whatever, or if there are, it is ok to wrap them, print it\n                    ; wrapped on the same line as much as possible:\n                    ;           [a b c d e f\n                    ;            g h i j]\n                    (concat-no-nil\n                      l-str-vec\n                      (do (dbg-pr options\n                                  \"fzprint-vec*: wrap coll-print:\"\n                                  coll-print)\n                          (wrap-zmap caller options new-ind coll-print))\n                      r-str-vec)))))))))))\n\n(defn fzprint-vec\n  [options ind zloc]\n  (fzprint-vec* :vector \"[\" \"]\" (rightmost options) ind zloc))\n\n(defn fzprint-array\n  [options ind zloc]\n  (fzprint-vec* :array \"[\" \"]\" (rightmost options) ind zloc))\n\n(defn fzprint-set\n  \"Pretty print and focus style a :set element.\"\n  [options ind zloc]\n  (fzprint-vec* :set \"#{\" \"}\" (rightmost options) ind zloc))\n\n; not clear transient helps here\n(defn interpose-either\n  \"Do the same as interpose, but different seps depending on pred?.\n  If sep-nil is nil, then when pred? is false we don't interpose\n  anything!\"\n  [sep-true sep-nil pred? coll]\n  (loop [coll coll\n         out (transient [])\n         interpose? nil]\n    (if (empty? coll)\n      (persistent! out)\n      (recur (next coll)\n             (if interpose?\n               (conj-it! out sep-true (first coll))\n               (if (or (zero? (count out)) (nil? sep-nil))\n                 (conj! out (first coll))\n                 (conj-it! out sep-nil (first coll))))\n             (pred? (first coll))))))\n\n(defn precede-w-nl\n  \"Move through a sequence of style vecs and ensure that at least\n  one newline (actually an indent) appears before each element.  If\n  a newline in the style-vecs is where we wanted one, well and good.\n  Comments are now not recognized as different, increasing our\n  appreciation of diversity.  If not-first? is truthy, then don't\n  put a newline before the first element.\"\n  [options ind coll not-first?]\n  (dbg-pr options\n          \"precede-w-nl: (count coll)\" (count coll)\n          \"not-first?\" not-first?)\n  (loop [coll coll\n         ind-seq (if (coll? ind) ind (vector ind))\n         out (transient [])\n         added-nl? not-first?]\n    (if (empty? coll)\n      (let [result (persistent! out)\n            _ (dbg-pr options \"precede-w-nl: exit:\" result)\n            ; If the thing before the last was a comment, then remove the\n            ; last thing (which must be a newline, though we didn't put\n            ; it there)\n            previous-element-index (- (count result) 2)\n            previous-type (when (not (neg? previous-element-index))\n                            (nth (first (nth result previous-element-index))\n                                 2))]\n        result)\n      (let [[[s color what] :as element] (first coll)\n            ; This element may have many things in it, or sometimes\n            ; just one.\n            ;\n            ; I believe that if the first thing is a newline then they\n            ; must all be newlines.  We could check the last, or all of\n            ; them here, I suppose.  But these have to come from\n            ; fzprint-newline, to the best of my knowledge, and that is\n            ; how it works.\n            indent (first ind-seq)\n            newline? (= what :newline)\n            ; Let's make sure about the last\n            last-what (nth (last element) 2)]\n        (dbg-pr options \"precede-w-nl: element:\" element \"added-nl?:\" added-nl?)\n        (recur (next coll)\n               ; Move along ind-seq until we reach the last one, then just\n               ; keep using the last one.\n               (if-let [next-ind (next ind-seq)]\n                 next-ind\n                 ind-seq)\n               (if newline?\n                 ; It is a :newline, so just use it as it is.\n                 ; Except if the next thing out is also a newline, we'll have\n                 ; trailing spaces after this newline, which is unlovely.\n                 (let [next-coll (next coll)]\n                   (if (empty? next-coll)\n                     (conj! out element)\n                     (let [[[_ _ next-what]] (first next-coll)]\n                       (if (= next-what :newline)\n                         ; don't put out a newline with spaces before another\n                         ; newline\n                         (conj! out [[\"\\n\" color what]])\n                         (conj! out element)))))\n                 ; It is not a :newline, so we want to make sure we have a\n                 ; newline in front of it, unless we already have one..\n                 (if added-nl?\n                   ; We already have a newline in front of it\n                   (conj! out element)\n                   ; We need both a newline and the element\n                   (conj-it! out\n                             [[(str \"\\n\" (blanks indent)) :none :indent 28]]\n                             element)))\n               ; Is there a newline as the last thing we just did?\n               ; Two ways for that to happen.\n               newline?)))))\n\n(defn count-newline-types\n  \"Analyze a style-vec which contains only newlines, the count of newlines\n  in the style vec.  We assume that each :newline style-vec contains one\n  newline (i.e., it was generated by fzprint-newlines).\"\n  [newline-style-vec]\n  ; TODO: Take this out if we don't get any exceptions while testing.\n  (let [count-of-types (count (distinct (map #(nth % 2) newline-style-vec)))]\n    (when (or (not= count-of-types 1)\n              (not= (nth (first newline-style-vec) 2) :newline))\n      (throw\n        (#?(:clj Exception.\n            :cljs js/Error.)\n         (str \"count-newline-types: more than one type or wrong type! count:\"\n                count-of-types\n              \" style-vec:\" newline-style-vec))))\n    (count newline-style-vec)))\n\n(defn count-right-blanks\n  \"Count the number of blanks at the right end of a string.\"\n  [s]\n  (loop [i (count s)]\n    (if (neg? i)\n      (count s)\n      (if (clojure.string/ends-with? (subs s 0 i) \" \")\n        (recur (dec i))\n        (- (count s) i)))))\n\n(defn trimr-blanks\n  \"Trim only blanks off the right end of a string.\"\n  [s]\n  (loop [i (count s)]\n    (if (neg? i)\n      \"\"\n      (if (clojure.string/ends-with? (subs s 0 i) \" \")\n        (recur (dec i))\n        (subs s 0 i)))))\n\n(defn repeat-style-vec-nl\n  \"Given a count n, and style vec that ends with a newline and an associated\n  indent of some number of spaces, return a sequence of n of those style vecs\n  but remove spaces from all but the last of them.\"\n  [n style-vec]\n  (let [no-space-n (max (dec n) 0)]\n    (if (zero? no-space-n)\n      style-vec\n      (let [[s color what] (last style-vec)\n            no-space-element [(trimr-blanks s) color what]\n            no-space-style-vec\n              (into [] (concat (butlast style-vec) no-space-element))]\n        (into [] (concat (repeat no-space-n no-space-style-vec) style-vec))))))\n\n(defn trimr-blanks-element\n  \"Given an element, trim the blanks out of the string.\"\n  [[s color what]]\n  [(trimr-blanks s) color what])\n\n(defn trimr-blanks-style-vec\n  \"Given a style-vec, trim the blanks out of each element.\"\n  [style-vec]\n  (mapv trimr-blanks-element style-vec))\n\n(defn repeat-element-nl\n  \"Given a count n, and single element from a style-vec which\n  contains a newline and an indent of some number of spaces, return\n  a sequence of n of those style vecs but remove spaces from all\n  but the last of them.\"\n  [n element]\n  #_(prn \"repeat-element-nl: n:\" n \"element:\" element)\n  (let [no-space-n (max (dec n) 0)]\n    (if (zero? no-space-n)\n      [element]\n      (let [[s color what] element\n            no-space-element [(trimr-blanks s) color what]\n            result\n              (into [] (concat (repeat no-space-n no-space-element) [element]))]\n        #_(prn \"repeat-element-nl: result:\" result)\n        result))))\n\n(defn next-non-comment-nl\n  \"Given a coll of [hangflow style-vec] pairs, return the \n  [hangflow style-vec] pair where the style-vec is not a \n  :comment, :comment-inline, :newline or :indent.\"\n  [coll]\n  (loop [coll coll]\n    (if (empty? coll)\n      nil\n      (let [[_ style-vec] (first coll)\n            [_ _ what] (first style-vec)]\n        (if (or (= what :comment)\n                (= what :comment-inline)\n                (= what :indent)\n                (= what :newline))\n          (recur (next coll))\n          (first coll))))))\n\n; transient helped a lot here\n\n(defn interpose-either-nl-hf\n  \"Do very specialized interpose, but different seps depending on pred-fn\n  return and nl-separator? and nl-separator-all?. This assumes that \n  sep-* does one line, and sep-*-nl does two lines.\"\n  [sep-comma sep-comma-nl sep sep-nl\n   {:keys [nl-separator? nl-separator-all?], :as suboptions} ;nl-separator?\n   comma? coll]\n  #_(prn \"ienf: sep:\" sep \"comma?\" comma? \"coll:\" coll)\n  (loop [coll coll\n         out (transient [])\n         previous-needs-comma? nil\n         add-nl? nil\n         first? true\n         newline-count 0]\n    (if (empty? coll)\n      (apply concat-no-nil\n        (persistent!\n          (if (zero? newline-count)\n            out\n            (conj-it! out (repeat-element-nl newline-count (first sep))))))\n      (let [[hangflow style-vec] (first coll)\n            [_ _ what] (first style-vec)]\n        #_(prn \"====>>>>>>>> interpose-either-nl-hf: style-vec:\" style-vec)\n        (cond\n          (= what :newline)\n            ; We have a one or more newlines.  We are going to keep\n            ; track of what we've seen and will actually output things\n            ; later, when we know what we actually have.\n            ; For now, just increase the count and don't do anything\n            ; else.\n            (recur (next coll)\n                   out\n                   previous-needs-comma?\n                   add-nl?\n                   first?\n                   (+ newline-count (count-newline-types style-vec)))\n          :else\n            ; We have a normal style-vec that we will process.  This one\n            ; has no newlines.  But we might have seen plenty of newlines\n            ; before this -- or not.\n            (let [[interpose-style-vec interpose-count]\n                    (if previous-needs-comma?\n                      (if add-nl? [sep-comma-nl 2] [sep-comma 1])\n                      (if add-nl? [sep-nl 2] [sep 1]))\n                  ; if first? we assume that we get one newline from caller\n                  interpose-count (if first? 1 interpose-count)\n                  addtl-nl-needed (max (- newline-count interpose-count) 0)]\n              ; Here is where we need to figure out if two newlines are\n              ; coming out in order, and ensure that the first ones don't\n              ; have any spaces after them.\n              #_(prn \"ienf: interpose-style-vec:\" interpose-style-vec)\n              (recur\n                (next coll)\n                (if first?\n                  (if (zero? addtl-nl-needed)\n                    (conj! out style-vec)\n                    (conj-it! out\n                              (repeat-element-nl addtl-nl-needed (first sep))\n                              style-vec))\n                  (if (zero? addtl-nl-needed)\n                    (conj-it! out interpose-style-vec style-vec)\n                    (conj-it! out\n                              (trimr-blanks-style-vec interpose-style-vec)\n                              (repeat-element-nl addtl-nl-needed (first sep))\n                              style-vec)))\n                (and comma?\n                     ; We got rid of newlines above\n                     (not= what :comment)\n                     (not= what :comment-inline)\n                     ; Is there a non comment or non newline/indent\n                     ; element\n                     ; left in coll, or is this the last one?\n                     ; This returns the [hangflow style-vec], but we\n                     ; are not\n                     ; using the data, just the existence of the thing\n                     ; here\n                     ; Fix for Issue #137.\n                     (next-non-comment-nl (next coll)))\n                ; should we put an extra new-line before the next\n                ; element?\n                ; Two styles here:\n                ;  o  always put one if the previous pair contained a\n                ;  new-line\n                ;     which could be (but is not) the default\n                ;     To do this you would do:\n                ;       (and nl-separator? (not (single-line?\n                ;       style-vec)))\n                ;  o  put one only if the previous right hand part of\n                ;  the\n                ;     pair did a flow (which is the current default)\n                ;     To do this, you look for whether or not the\n                ;     return\n                ;     from fzprint-map-two-up said it was a flow\n                (or (and nl-separator? (= hangflow :flow)) nl-separator-all?)\n                nil ;first?\n                0 ;newline-count\n              )))))))\n\n(defn interpose-nl-hf\n  \"Put a single or double line between pairs returned from\n  fzprint-map-two-up.  The second argument is the map resulting\n  from (:map options) or (:pair options) or whatever.  It should\n  have :nl-separator? and :nl-separator-all? in it.\"\n  [suboptions ind coll]\n  (interpose-either-nl-hf nil\n                          nil\n                          [[(str \"\\n\" (blanks ind)) :none :indent 29]]\n                          [[(str \"\\n\") :none :indent 30]\n                           [(str \"\\n\" (blanks ind)) :none :indent 31]]\n                          suboptions\n                          nil ; comma?\n                          coll))\n\n(defn fzprint-map*\n  [caller l-str r-str\n   {:keys [one-line? ztype map-depth in-code?],\n    {:keys [comma? key-ignore key-ignore-silent nl-separator? force-nl? lift-ns?\n            lift-ns-in-code? indent],\n     :as map-options}\n      caller,\n    :as options} ind zloc ns]\n  (let [[respect-nl? respect-bl? indent-only?]\n          (get-respect-indent options caller :map)]\n    (dbg-pr options \"fzprint-map* caller:\" caller)\n    (if indent-only?\n      (let [options (assoc options :map-depth (inc map-depth))\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options ind zloc r-str)]\n        (if (zero? (zcount zloc))\n          (concat-no-nil l-str-vec r-str-vec)\n          (concat-no-nil l-str-vec\n                         (fzprint-indent caller\n                                         l-str\n                                         r-str\n                                         options\n                                         ind\n                                         zloc\n                                         nil ;fn-style\n                                         nil) ;arg-1-indent, will prevent hang\n                         r-str-vec)))\n      (let [options (assoc options :map-depth (inc map-depth))\n            zloc (if (and (= ztype :sexpr) (or key-ignore key-ignore-silent))\n                   (map-ignore caller options zloc)\n                   zloc)\n            [no-sort? pair-seq] (partition-all-2-nc\n                                  (no-max-length options)\n                                  (cond respect-nl? (zseqnws-w-nl zloc)\n                                        respect-bl? (zseqnws-w-bl zloc)\n                                        :else (zseqnws zloc)))\n            #_(dbg-pr \"fzprint-map* pair-seq:\"\n                      (map (comp zstring first) pair-seq))\n            ; don't sort if we are doing respect-nl?\n            no-sort? (or no-sort? respect-nl? respect-bl?)\n            [ns lift-pair-seq]\n              (zlift-ns (assoc map-options :in-code? in-code?) pair-seq ns)\n            _ (dbg-pr options \"fzprint-map* zlift-ns ns:\" ns)\n            l-str (if ns (str \"#\" ns l-str) l-str)\n            pair-seq (or lift-pair-seq pair-seq)\n            pair-seq\n              (if no-sort? pair-seq (order-out caller options first pair-seq))\n            ; This is where you might put max-length\n            max-length (get-max-length options)\n            pair-count (count pair-seq)\n            pair-seq (if (> pair-count max-length)\n                       (concat (take max-length pair-seq)\n                               (list (list (zdotdotdot))))\n                       pair-seq)\n            indent (count l-str)\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options ind zloc r-str)]\n        (if (empty? pair-seq)\n          (concat-no-nil l-str-vec r-str-vec)\n          (let [_ (dbg-pr options\n                          \"fzprint-map*:\" (zstring zloc)\n                          \"ind:\" ind\n                          \"comma?\" comma?\n                          \"rightcnt:\" (:rightcnt options))\n                ; A possible one line representation of this map, but this is\n                ; optimistic and needs to be validated.\n                pair-print-one-line\n                  (fzprint-map-two-up\n                    caller\n                    (if one-line? options (assoc options :one-line? true))\n                    (+ indent ind)\n                    comma?\n                    pair-seq)\n                pair-print-one-line (remove-hangflow pair-print-one-line)\n                ; Does it fit on line line?\n                pair-print-one-line (when (fzfit-one-line\n                                            options\n                                            (style-lines options\n                                                         (+ indent ind)\n                                                         pair-print-one-line))\n                                      pair-print-one-line)\n                one-line (when pair-print-one-line\n                           (apply concat-no-nil\n                             (interpose-either [[\",\" (zcolor-map options :comma)\n                                                 :whitespace 19]\n                                                [\" \" :none :whitespace 23]]\n                                               [[\" \" :none :whitespace 20]]\n                                               (constantly comma?)\n                                               pair-print-one-line)))\n                one-line-lines (style-lines options (+ indent ind) one-line)\n                one-line (when (fzfit-one-line options one-line-lines)\n                           one-line)]\n            (if one-line\n              (concat-no-nil l-str-vec one-line r-str-vec)\n              ; It didn't fit on one line.\n              (when (not one-line?)\n                ; We weren't required to fit it on one line\n                (let [pair-print (fzprint-map-two-up caller\n                                                     options\n                                                     (+ indent ind)\n                                                     comma?\n                                                     pair-seq)]\n                  (concat-no-nil\n                    l-str-vec\n                    (interpose-either-nl-hf\n                      ; comma? true\n                      [[\",\" (zcolor-map options :comma) :whitespace 21]\n                       [(str \"\\n\" (blanks (inc ind))) :none :indent 32]]\n                      [[\",\" (zcolor-map options :comma) :whitespace 22]\n                       ; Fix issue #59 -- don't\n                       ; put blanks to indent before the next \\n\n                       [\"\\n\" :none :indent 33]\n                       [(str \"\\n\" (blanks (inc ind))) :none :indent 34]]\n                      ; comma? nil\n                      [[(str \"\\n\" (blanks (inc ind))) :none :indent 35]]\n                      [[\"\\n\" :none :indent 36]\n                       [(str \"\\n\" (blanks (inc ind))) :none :indent 37]]\n                      (:map options) ;nl-separator?\n                      comma?\n                      pair-print)\n                    r-str-vec))))))))))\n\n(defn fzprint-map\n  \"Format a real map.\"\n  [options ind zloc]\n  (let [[ns lifted-map]\n          (when (znamespacedmap? zloc)\n            ; Only true when operating on zippers\n            (let [zloc-seq (zmap identity zloc)]\n              (dbg-pr options \"fzprint-map: zloc-seq\" (map zstring zloc-seq))\n              [(zstring (first zloc-seq)) (second zloc-seq)]))]\n    (dbg-pr options\n            \"fzprint-map: ns:\" ns\n            \"indent:\" (:indent (:map options))\n            \"map-options:\" (:map options))\n    (if ns\n      (fzprint-map* :map\n                    \"{\"\n                    #_(str \"#\" ns \"{\")\n                    \"}\"\n                    (rightmost options)\n                    ind\n                    lifted-map\n                    ns)\n      (fzprint-map* :map \"{\" \"}\" (rightmost options) ind zloc nil))))\n\n(defn object-str?\n  \"Return true if the string starts with #object[\"\n  [s]\n  (re-find #\"^#object\\[\" s))\n\n(defn fzprint-object\n  \"Print something that looks like #object[...] in a way\n  that will acknowledge the structure inside of the [...]\"\n  ([options ind zloc zloc-value]\n   (fzprint-vec* :object\n                 \"#object[\"\n                 \"]\"\n                 options\n                 ind\n                 (zobj-to-vec zloc zloc-value)))\n  ([options ind zloc]\n   (fzprint-vec* :object \"#object[\" \"]\" options ind (zobj-to-vec zloc))))\n\n(defn hash-identity-str\n  \"Find the hash-code identity for an object.\"\n  [obj]\n  #?(:clj (Integer/toHexString (System/identityHashCode obj))\n     :cljs (str (hash obj))))\n\n; (with-out-str\n;    (printf \"%08x\" (System/identityHashCode obj))))\n\n(defn fzprint-atom\n  [{{:keys [object?]} :atom, :as options} ind zloc]\n  (if (and object? (object-str? (zstring zloc)))\n    (fzprint-object options ind zloc (zderef zloc))\n    (let [l-str \"#<\"\n          r-str \">\"\n          indent (count l-str)\n          l-str-vec [[l-str (zcolor-map options l-str) :left]]\n          r-str-vec (rstr-vec options ind zloc r-str)\n          arg-1 (str \"Atom@\" (hash-identity-str zloc))\n          arg-1-indent (+ ind indent 1 (count arg-1))]\n      (dbg-pr options\n              \"fzprint-atom: arg-1:\" arg-1\n              \"zstring arg-1:\" (zstring zloc))\n      (concat-no-nil l-str-vec\n                     [[arg-1 (zcolor-map options :none) :element]]\n                     (fzprint-hang-one :unknown\n                                       (rightmost options)\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       (zderef zloc))\n                     r-str-vec))))\n\n(defn fzprint-future-promise-delay-agent\n  \"Print out a future or a promise or a delay.  These can only be \n  sexpressions, since they don't exist in a textual representation \n  of code (or data for that matter).  That means that we can use \n  regular sexpression operations on zloc.\"\n  [options ind zloc]\n  (let [zloc-type (cond (zfuture? zloc) :future\n                        (zpromise? zloc) :promise\n                        (zdelay? zloc) :delay\n                        (zagent? zloc) :agent\n                        :else (throw (#?(:clj Exception.\n                                         :cljs js/Error.)\n                                      \"Not a future, promise, or delay:\"\n                                      (zstring zloc))))]\n    (if (and (:object? (options zloc-type)) (object-str? (zstring zloc)))\n      (if (or (= zloc-type :agent) (realized? zloc))\n        (fzprint-object options ind zloc (zderef zloc))\n        (fzprint-object options ind zloc))\n      (let [l-str \"#<\"\n            r-str \">\"\n            indent (count l-str)\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options ind zloc r-str)\n            type-str (case zloc-type\n                       :future \"Future@\"\n                       :promise \"Promise@\"\n                       :delay \"Delay@\"\n                       :agent \"Agent@\")\n            arg-1 (str type-str (hash-identity-str zloc))\n            #?@(:clj [arg-1\n                      (if (and (= zloc-type :agent) (agent-error zloc))\n                        (str arg-1 \" FAILED\")\n                        arg-1)])\n              arg-1-indent\n            (+ ind indent 1 (count arg-1)) zloc-realized?\n            (if (= zloc-type :agent) true (realized? zloc)) value\n            (if zloc-realized?\n              (zderef zloc)\n              (case zloc-type\n                :future \"pending\"\n                :promise \"not-delivered\"\n                :delay \"pending\"))\n              options\n            (if zloc-realized? options (assoc options :string-str? true))]\n        (dbg-pr options\n                \"fzprint-fpda: arg-1:\" arg-1\n                \"zstring arg-1:\" (zstring zloc))\n        (concat-no-nil l-str-vec\n                       [[arg-1 (zcolor-map options :none) :element]]\n                       (fzprint-hang-one :unknown\n                                         (rightmost options)\n                                         arg-1-indent\n                                         (+ indent ind)\n                                         value)\n                       r-str-vec)))))\n\n(defn fzprint-fn-obj\n  \"Print a function object, what you get when you put a function in\n  a collection, for instance.  This doesn't do macros, you will notice.\n  It also can't be invoked when zloc is a zipper.\"\n  [{{:keys [object?]} :fn-obj, :as options} ind zloc]\n  (if (and object? (object-str? (zstring zloc)))\n    (fzprint-object options ind zloc)\n    (let [l-str \"#<\"\n          r-str \">\"\n          indent (count l-str)\n          l-str-vec [[l-str (zcolor-map options :fn) :left]]\n          r-str-vec (rstr-vec options ind zloc r-str :fn)\n          arg-1-left \"Fn@\"\n          arg-1-right (hash-identity-str zloc)\n          arg-1-indent (+ ind indent 1 (count arg-1-left) (count arg-1-right))\n          class-str (pr-str #?(:clj (class zloc)\n                               :cljs (type zloc)))\n          #?@(:clj [[class-name & more]\n                    (s/split (s/replace-first class-str #\"\\$\" \"/\") #\"\\$\") color\n                    (if (re-find #\"clojure\" class-name)\n                      (zcolor-map options :fn)\n                      :none) arg-2 (str class-name (when more \"[fn]\"))]\n              :cljs [name-js (str (.-name zloc)) color\n                     (if (or (re-find #\"^clojure\" name-js)\n                             (re-find #\"^cljs\" name-js))\n                       (zcolor-map options :fn)\n                       :none) name-split (clojure.string/split name-js #\"\\$\")\n                     arg-2\n                     (str (apply str (interpose \".\" (butlast name-split)))\n                          \"/\"\n                          (last name-split))])]\n      (dbg-pr options\n              \"fzprint-fn-obj: arg-1:\"\n              arg-1-left\n              arg-1-right\n              \"zstring arg-1:\"\n              (zstring zloc))\n      (concat-no-nil l-str-vec\n                     [[arg-1-left (zcolor-map options :fn) :element]]\n                     [[arg-1-right (zcolor-map options :none) :element]]\n                     (fzprint-hang-one :unknown\n                                       (rightmost (assoc options\n                                                    :string-str? true\n                                                    :string-color color))\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       arg-2)\n                     r-str-vec))))\n\n(defn fzprint-ns\n  [options ind zloc]\n  (let [l-str \"#<\"\n        r-str \">\"\n        indent (count l-str)\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options ind zloc r-str)\n        arg-1 \"Namespace\"\n        arg-1-indent (+ ind indent 1 (count arg-1))]\n    (dbg-pr options \"fzprint-ns: arg-1:\" arg-1 \"zstring arg-1:\" (zstring zloc))\n    (concat-no-nil l-str-vec\n                   [[arg-1 (zcolor-map options :none) :element]]\n                   (fzprint-hang-one :unknown\n                                     (rightmost options)\n                                     arg-1-indent\n                                     (+ indent ind)\n                                     (ns-name zloc))\n                   r-str-vec)))\n\n(defn dec-depth\n  \"Given an options map, decrement the :depth value and return the result.\"\n  [options]\n  (when options (assoc options :depth (dec (or (:depth options) 1)))))\n\n(defn fzprint-record\n  [{{:keys [record-type? to-string?]} :record, :as options} ind zloc]\n  (if to-string?\n    (fzprint* options ind (. zloc toString))\n    (if-not record-type?\n      ; if not printing as record-type, turn it into map\n      (fzprint* options ind (into {} zloc))\n      (let [l-str \"#\"\n            r-str \"\"\n            indent (count l-str)\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options ind zloc r-str)\n            arg-1 #?(:clj (pr-str (class zloc))\n                     :cljs\n                       (clojure.string/replace (pr-str (type zloc)) \"/\" \".\"))\n            arg-1 (let [tokens (clojure.string/split arg-1 #\"\\.\")]\n                    (apply str (into [] (interpose \".\" tokens))))\n            arg-1-indent (+ ind indent 1 (count arg-1))]\n        (dbg-pr options\n                \"fzprint-record: arg-1:\" arg-1\n                \"zstring zloc:\" (zstring zloc))\n        (concat-no-nil l-str-vec\n                       [[arg-1 (zcolor-map options :none) :element]]\n                       (fzprint-hang-one :record\n                                         (dec-depth options)\n                                         ;(rightmost options)\n                                         arg-1-indent\n                                         (+ indent ind)\n                                         ; this only works because\n                                         ; we never actually get here\n                                         ; with a zipper, just an sexpr\n                                         (into {} zloc))\n                       r-str-vec)))))\n\n(defn fzprint-meta\n  \"Print the two items in a meta node.  Different because it doesn't print\n  a single collection, so it doesn't do any indent or rightmost.  It also\n  uses a different approach to calling fzprint-flow-seq with the\n  results zmap, so that it prints all of the seq, not just the rightmost.\"\n  [options ind zloc]\n  (let [l-str \"^\"\n        r-str \"\"\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options ind zloc r-str)]\n    (dbg-pr options \"fzprint-meta: zloc:\" (zstring zloc))\n    (concat-no-nil\n      l-str-vec\n      (if (:indent-only? (:list options))\n        ; Since l-str isn't a \"pair\" and shouldn't be considered in the\n        ; indent, we don't tell fzprint-indent abouit.\n        (fzprint-indent :vector\n                        l-str\n                        \"\"\n                        options\n                        ind\n                        zloc\n                        nil\n                        nil\n                        :first-indent-only?)\n        (fzprint-flow-seq\n          ; No rightmost, because this isn't a collection.\n          ; This is essentially two separate things.\n          options\n          ; no indent for second line, as the leading ^ is\n          ; not a normal collection beginning\n          ; TODO: change this to (+ (count l-str) ind)\n          (apply vector (+ (count l-str) ind) (repeat (dec (zcount zloc)) ind))\n          ;[(inc ind) ind]\n          (fzprint-get-zloc-seq :list options zloc)))\n      r-str-vec)))\n\n(defn fzprint-reader-macro\n  \"Print a reader-macro, often a reader-conditional. Adapted for differences\n  in parsing #?@ between rewrite-clj and rewrite-cljs.  Also adapted for\n  the rewrite-clj not parsing namespaced maps in the version presently\n  used.\"\n  [options ind zloc]\n  (let [zstr (zstring (zfirst zloc))\n        ; rewrite-cljs parses #?@ differently from rewrite-clj.  In\n        ; rewrite-cljs zfirst is ?@, not ?, so deal with that.\n        ; Not clear which is correct, I could see it go either way.\n        alt-at? (and (= (count zstr) 2) (= (subs zstr 1 2) \"@\"))\n        reader-cond? (= (subs zstr 0 1) \"?\")\n        ; are we dealing with a namespaced map?\n        ; 5/30/19 I don't know if we ever encounter this anymore...\n        ; Was unable to get namespaced? to be true despite running all 616\n        ; tests and some repl testing as well.\n        namespaced? (= (subs zstr 0 1) \":\")\n        at? (or (= (ztag (zsecond zloc)) :deref) alt-at?)\n        ; If :reader-cond doesn't have these things, then let :map govern\n        [respect-nl? respect-bl? indent-only?]\n          (get-respect-indent options :reader-cond :map)\n        l-str (cond (and reader-cond? at?) \"#?@\"\n                    (and reader-cond? (zcoll? (zsecond zloc))) \"#?\"\n                    reader-cond?\n                      (throw (#?(:clj Exception.\n                                 :cljs js/Error.)\n                              (str \"Unknown reader macro: '\" (zstring zloc)\n                                   \"' zfirst zloc: \" (zstring (zfirst zloc)))))\n                    namespaced? (str \"#\" zstr)\n                    :else \"#\")\n        r-str \"\"\n        ; Error to debug zpst\n        _ (when (:dbg-bug? options)\n            #?(:clj (+ \"a\" \"b\")\n               :cljs nil))\n        indent (count l-str)\n        ; we may want to color this based on something other than\n        ; its actual character string\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options ind zloc r-str)\n        floc\n          (if (and at? (not alt-at?)) (zfirst (zsecond zloc)) (zsecond zloc))]\n    (dbg-pr options\n            \"fzprint-reader-macro: zloc:\" (zstring zloc)\n            \"floc:\" (zstring floc)\n            \"l-str:\" l-str)\n    ; This isn't really all that correct, but does yield the right output.\n    ; Question about whether or not it does the right stuff for focus.\n    ; Maybe there is some way to call fzprint-indent with just the\n    ; #? and \"\", and let it deal with the underlying list. I don't know\n    ; if that would be possible, though maybe if we carefully positioned\n    ; the floc for that case.  But could we hack in the [\"\" :none :element]\n    ; in that case? At present documented that focus and :indent-only\n    ; don't work together..\n    (if indent-only?\n      (let [l-str-io (if reader-cond? (str l-str \"(\") l-str)\n            r-str-io (if reader-cond? \")\" \"\")\n            l-str-vec-io [[l-str-io (zcolor-map options l-str-io) :left]]\n            r-str-vec-io (rstr-vec options ind zloc r-str-io)]\n        (concat-no-nil\n          l-str-vec-io\n          (if reader-cond?\n            (fzprint-indent :map\n                            l-str-io\n                            r-str-io\n                            (rightmost options)\n                            ind\n                            floc\n                            nil ;fn-style\n                            nil) ;arg-1-indent, will prevent hang\n            (fzprint-indent :map\n                            l-str-io\n                            r-str-io\n                            (rightmost options)\n                            ind\n                            (if namespaced? (znextnws-w-nl zloc) zloc)\n                            nil ; fn-style\n                            nil) ;arg-1-indent\n          )\n          r-str-vec-io))\n      (concat-no-nil\n        l-str-vec\n        ; Because there is a token here in the zipper, we need something to\n        ; make the focus positioning come out right.\n        [[\"\" :none :element]]\n        (if reader-cond?\n          ; yes rightmost, this is a collection\n          (fzprint-map* :reader-cond\n                        \"(\"\n                        \")\"\n                        (rightmost options)\n                        ; Here is where we might adjust the indent, but if\n                        ; we do it here (since this looks like a list), we\n                        ; also have to deal with it when the map code is\n                        ; doing the next thing (like :cljs after :clj). If\n                        ; you just (dec indent) here you break 14 tests.\n                        (+ indent ind)\n                        floc\n                        nil)\n          ; not reader-cond?\n          (fzprint-flow-seq options\n                            (+ indent ind)\n                            (let [zloc-seq\n                                    (cond respect-nl? (zmap-w-nl identity zloc)\n                                          respect-bl? (zmap-w-bl identity zloc)\n                                          :else (zmap identity zloc))]\n                              (if namespaced? (next zloc-seq) zloc-seq))))\n        r-str-vec))))\n\n(defn fzprint-newline\n  \"Given an element which contains newlines, split it up into individual\n  newline elements.\"\n  [options ind zloc]\n  (let [zstr (zstring zloc)\n        [newline-count _] (newline-vec zstr)]\n    (dbg-pr options\n            \"fzprint-newline: zloc:\" (zstring zloc)\n            \"newline-count:\" newline-count\n            \"ind:\" ind)\n    (into []\n          (repeat newline-count [(str \"\\n\" (blanks ind)) :none :newline 2]))))\n\n(def prefix-tags\n  {:quote \"'\",\n   :syntax-quote \"`\",\n   :unquote \"~\",\n   :unquote-splicing \"~@\",\n   :deref \"@\",\n   :var \"#'\",\n   :uneval \"#_\"})\n\n(defn prefix-options\n  \"Change options as necessary based on prefix tag.\"\n  [options prefix-tag]\n  (cond (= prefix-tag :uneval) (assoc options\n                                 :color-map (:color-map (:uneval options)))\n        (= prefix-tag :syntax-quote)\n          (-> options\n              (assoc-in [:color-map :paren]\n                        (:syntax-quote-paren (:color-map options)))\n              (assoc-in [:color-map :hash-paren]\n                        (:syntax-quote-paren (:color-map options))))\n        :else options))\n\n(defn make-caller\n  \"Sometime we need to give a caller to a routine, and there isn't\n  a specific caller in the configuration.  So, we will use the configuration\n  from some other caller and make up a new one just for this situation.\n  The key-seq is the series of keys to both look up and create.  The\n  caller is the new caller, and the existing-caller is the one from which\n  we we will extract the information. This returns a new options map with\n  the new-caller in it.\"\n  [options new-caller existing-caller key-seq]\n  (update-in options\n             (concat [new-caller] key-seq)\n             #(do % (get-in options (concat [existing-caller] key-seq)))))\n\n;; Fix fzprint* to look at cursor to see if there is one, and\n;; fzprint to set cursor with binding.  If this works, might pass\n;; it around.  Maybe pass ctx to everyone and they can look at it\n;; or something.  But for testing, let's just do this.\n\n;;\n;; # The center of the zprint universe\n;;\n;; Looked into alternative ways to dispatch this, but at the end of\n;; the day, this looked like the best.\n;;\n\n(defn fzprint*\n  \"The pretty print part of fzprint.\"\n  [{:keys [width rightcnt hex? shift-seq dbg? dbg-print? in-hang? one-line?\n           string-str? string-color depth max-depth trim-comments? in-code?\n           max-hang-depth max-hang-span max-hang-count next-inner],\n    :as options} indent zloc]\n  (let [avail (- width indent)\n        ; note that depth affects how comments are printed, toward the end\n        options (assoc options :depth (inc depth))\n        options (if next-inner\n                  (dissoc\n                    (first (zprint.config/config-and-validate \"next-inner:\"\n                                                              nil\n                                                              options\n                                                              next-inner))\n                    :next-inner)\n                  options)\n        options (if (or dbg? dbg-print?)\n                  (assoc options\n                    :dbg-indent (str (get options :dbg-indent \"\")\n                                     (cond one-line? \"o\"\n                                           in-hang? \"h\"\n                                           :else \".\")))\n                  options)\n        _ (dbg options\n               \"fzprint* **** rightcnt:\"\n               rightcnt\n               \"depth:\"\n               depth\n               \"in-hang?:\"\n               in-hang?\n               (pr-str (zstring zloc)))\n        dbg-data @fzprint-dbg\n        dbg-focus? (and dbg? (= dbg-data (second (zfind-path zloc))))\n        options (if dbg-focus? (assoc options :dbg :on) options)\n        _ (if dbg-focus? (println \"fzprint dbg-data:\" dbg-data))]\n    #_(def zlocx zloc)\n    ; We don't check depth if it is not a collection.  We might have\n    ; just not incremented depth if it wasn't a collection, but this\n    ; may be equivalent.\n    (cond\n      (and (zcoll? zloc)\n           (or (>= depth max-depth) (zero? (get-max-length options))))\n        (if (= zloc (zdotdotdot))\n          [[\"...\" (zcolor-map options :none) :element]]\n          [[(:max-depth-string options) (zcolor-map options :keyword)\n            :element]])\n      ; Try to fix up runaway exponential time increases with very deep\n      ; strucures.  Note this is typically only affects maps, but it would\n      ; affect lists that were not code.\n      (and in-hang?\n           (not one-line?)\n           (not in-code?)\n           ;(> (/ indent width) 0.3)\n           (or (> (- depth in-hang?) max-hang-span)\n               (and (not one-line?)\n                    (> (zcount zloc) max-hang-count)\n                    (> depth max-hang-depth))))\n        nil\n      (zrecord? zloc) (fzprint-record options indent zloc)\n      (zlist? zloc) (fzprint-list options indent zloc)\n      (zvector? zloc) (fzprint-vec options indent zloc)\n      (or (zmap? zloc) (znamespacedmap? zloc)) (fzprint-map options indent zloc)\n      (zset? zloc) (fzprint-set options indent zloc)\n      (zanonfn? zloc) (fzprint-anon-fn options indent zloc)\n      (zfn-obj? zloc) (fzprint-fn-obj options indent zloc)\n      (zarray? zloc)\n        (if (:object? (:array options))\n          (fzprint-object options indent zloc)\n          (fzprint-array #?(:clj (if (:hex? (:array options))\n                                   (assoc options\n                                     :hex? (:hex? (:array options))\n                                     :shift-seq (zarray-to-shift-seq zloc))\n                                   options)\n                            :cljs options)\n                         indent\n                         (zexpandarray zloc)))\n      (zatom? zloc) (fzprint-atom options indent zloc)\n      (zmeta? zloc) (fzprint-meta options indent zloc)\n      (prefix-tags (ztag zloc))\n        (fzprint-vec* :prefix-tags\n                      (prefix-tags (ztag zloc))\n                      \"\"\n                      ; Pick up the :indent-only?, :respect-nl?, and\n                      ; respect-bl? config from :list\n                      ; Note that the routine get-respect-indent exists,\n                      ; and its use in fzprint-vec* and fzprint-map* also\n                      ; solves a similar problem\n                      (-> (prefix-options options (ztag zloc))\n                          (make-caller :prefix-tags :list [:indent-only?])\n                          (make-caller :prefix-tags :list [:respect-nl?])\n                          (make-caller :prefix-tags :list [:respect-bl?]))\n                      indent\n                      zloc)\n      (zns? zloc) (fzprint-ns options indent zloc)\n      (or (zpromise? zloc) (zfuture? zloc) (zdelay? zloc) (zagent? zloc))\n        (fzprint-future-promise-delay-agent options indent zloc)\n      (zreader-macro? zloc) (fzprint-reader-macro options indent zloc)\n      ; This is needed to not be there for newlines in parse-string-all,\n      ; but is needed for respect-nl? support.\n      ;(and (= (ztag zloc) :newline) (> depth 0)) [[\"\\n\" :none :newline]]\n      (and (= (ztag zloc) :newline) (> depth 0))\n        (fzprint-newline options indent zloc)\n      :else\n        (let [zstr (zstring zloc)\n              overflow-in-hang? (and in-hang?\n                                     (> (+ (count zstr) indent (or rightcnt 0))\n                                        width))]\n          (cond\n            (and (zcomment? zloc)\n                 #_(not (clojure.string/starts-with? \";\" zstr))\n                 (not (some #{\\;} zstr)))\n              ; We should remvoe them when we get zutil fixed.\n              (fzprint-newline options indent zloc)\n            (zcomment? zloc)\n              (let [zcomment\n                      ; trim-comments? is true for parse-string-all\n                      (if (and (zero? depth) (not trim-comments?))\n                        zstr\n                        ; Remove trailing newlines and spaces\n                        (clojure.string/trimr zstr))\n                    ; Only check for inline comments if we are doing them\n                    ; otherwise we get left with :comment-inline element\n                    ; types that don't go away\n                    inline-comment-vec (when (:inline? (:comment options))\n                                         (inlinecomment? zloc))]\n                (dbg options\n                     \"fzprint* trim-comments?:\" trim-comments?\n                     \"inline-comment-vec:\" inline-comment-vec)\n                (if (and (:count? (:comment options)) overflow-in-hang?)\n                  (do (dbg options \"fzprint*: overflow comment ========\") nil)\n                  (if inline-comment-vec\n                    [[zcomment (zcolor-map options :comment) :comment-inline\n                      (first inline-comment-vec) (second inline-comment-vec)]]\n                    [[zcomment (zcolor-map options :comment) :comment]])))\n            (= (ztag zloc) :comma) [[zstr (zcolor-map options :comma) :comma]]\n            #?@(:cljs [(and (= (ztag zloc) :whitespace)\n                            (clojure.string/includes? zstr \",\"))])\n              #?@(:cljs [[[\",\" (zcolor-map options :comma) :comma]]])\n            ; Really just testing for whitespace, comments filtered above\n            (zwhitespaceorcomment? zloc) [[zstr :none :whitespace 24]]\n            ; At this point, having filtered out whitespace and\n            ; comments above, now we expect zsexpr will work for all of\n            ; the remaining things.\n            ;\n            ; If we are going to overflow, and we are doing a hang, let's\n            ; stop now!\n            overflow-in-hang? (do (dbg options \"fzprint*: overflow <<<<<<<<<<\")\n                                  nil)\n            (zkeyword? zloc) [[zstr (zcolor-map options :keyword) :element]]\n            :else (let [zloc-sexpr (zsexpr zloc)]\n                    (cond (string? zloc-sexpr)\n                            [[(if string-str?\n                                (str (zsexpr zloc))\n                                ; zstr\n                                (zstring zloc))\n                              (if string-color\n                                string-color\n                                (zcolor-map options :string)) :element]]\n                          (showfn? options (zsexpr zloc))\n                            [[zstr (zcolor-map options :fn) :element]]\n                          (show-user-fn? options (zsexpr zloc))\n                            [[zstr (zcolor-map options :user-fn) :element]]\n                          (number? (zsexpr zloc))\n                            [[(if hex? (znumstr zloc hex? shift-seq) zstr)\n                              (zcolor-map options :number) :element]]\n                          (symbol? (zsexpr zloc))\n                            [[zstr (zcolor-map options :symbol) :element]]\n                          (nil? (zsexpr zloc)) [[zstr (zcolor-map options :nil)\n                                                 :element]]\n                          (true? (zsexpr zloc))\n                            [[zstr (zcolor-map options :true) :element]]\n                          (false? (zsexpr zloc))\n                            [[zstr (zcolor-map options :false) :element]]\n                          (char? (zsexpr zloc))\n                            [[zstr (zcolor-map options :char) :element]]\n                          (or (instance? #?(:clj java.util.regex.Pattern\n                                            :cljs (type #\"regex\"))\n                                         (zsexpr zloc))\n                              (re-find #\"^#\\\".*\\\"$\" zstr))\n                            [[zstr (zcolor-map options :regex) :element]]\n                          :else [[zstr (zcolor-map options :none)\n                                  :element]])))))))\n\n;;\n;; # External interface to all fzprint functions\n;;\n\n(defn fzprint\n  \"The pretty print part of fzprint.\"\n  [options indent zloc]\n  #_(def opt options)\n  (dbg options \"fzprint: indent:\" indent \"(:indent options)\" (:indent options))\n  ; if we are doing specs, find the docstring and modify it with\n  ; the spec output.\n  #_(println \"fn-name:\" (:fn-name options))\n  #_(println \"spec:\" (:value (:spec options)))\n  (let [zloc (if-not (and (= (:ztype options) :zipper) (:value (:spec options)))\n               zloc\n               (add-spec-to-docstring zloc (:value (:spec options))))\n        style-vec (fzprint* (assoc options\n                              :depth 0\n                              :map-depth 0)\n                            indent\n                            zloc)]\n    #_(def fsv style-vec)\n    style-vec))\n\n;    (if (= (:ztype options) :sexpr)\n;      style-vec\n;      (if (:wrap? (:comment options))\n;        (fzprint-wrap-comments options style-vec)\n;        style-vec))))\n\n;;\n;; # Basic functions for testing results -- used only for tests\n;;\n\n(defn line-count \"Count lines in a string.\" [s] (inc (count (re-seq #\"\\n\" s))))\n\n(defn line-widths\n  \"Return a vector the lengths of lines.\"\n  [s]\n  (map count (clojure.string/split s #\"\\n\")))\n\n(defn max-width\n  \"Split a string into lines, and figure the max width.\"\n  [s]\n  (reduce max (line-widths s)))\n\n;;\n;; # Tab Expansion\n;;\n\n(defn expand-tabs\n  \"Takes a string, and expands tabs inside of the string based\n  on a tab-size argument.\"\n  ([tab-size s]\n   ; If we don't have tabs, don't do anything.\n   (if (clojure.string/includes? s \"\\t\")\n     (apply str\n       (loop [char-seq (seq s)\n              cur-len (long 0)\n              out (transient [])]\n         (if (empty? char-seq)\n           (persistent! out)\n           (let [this-char (first char-seq)\n                 tab-expansion (if (= this-char \\tab)\n                                 (- tab-size (mod cur-len tab-size))\n                                 nil)]\n             (recur (rest char-seq)\n                    (if (= this-char \\newline)\n                      0\n                      (+ cur-len (long (or tab-expansion 1))))\n                    (if tab-expansion\n                      (apply conj-it! out (repeat tab-expansion \\space))\n                      (conj! out this-char)))))))\n     s))\n  ([s] (expand-tabs 8 s)))\n\n;;\n;; # Line Endings\n;;\n\n(defn determine-ending-split-lines\n  \"Given a string, find the line ending that is predominent in the beginning\n  of the string, and split the string into separate lines.  Returns \n  [line-ending-string vector-of-lines]\"\n  [s]\n  (if (clojure.string/includes? s \"\\r\")\n    ; Figure out the line endings\n    (let [lines (clojure.string/split s #\"\\r\\n|\\r|\\n\" -1)\n          first-lines (clojure.string/split (subs s 0 (min (count s) 2000))\n                                            #\"\\r\")\n          #_(prn \"first-lines:\" first-lines)\n          nl-count\n            (reduce #(if (clojure.string/starts-with? %2 \"\\n\") (inc %1) %1)\n              0\n              first-lines)\n          #_(prn \"nl-count:\" nl-count)\n          line-ending (if (>= nl-count (/ (count first-lines) 2)) \"\\r\\n\" \"\\r\")]\n      [line-ending lines])\n    ; If no \\r, then we assume \\n line endings\n    [\"\\n\" (clojure.string/split s #\"\\n\" -1)]))\n\n;;\n;; # Needed for expectations testing\n;;\n;; Seems defrecord doesn't work in test environment, which is pretty odd.\n;;\n\n(defrecord r [left right])\n(defn make-record [left right] (new r left right))\n\n;;\n;; End of testing functions\n;;\n"]}