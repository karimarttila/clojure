{"version":3,"sources":["reitit/frontend.cljs"],"mappings":"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","names":["reitit.frontend/query-param","q","k","vs","cljs.core/vec","reitit.frontend/query-params","uri","cljs.core.map","p1__80695#","cljs.core.juxt","cljs.core/keyword","cljs.core.into","reitit.frontend/match-by-path","router","path","js/goog.Uri","temp__5733__auto__","match","reitit.core/match-by-path","cljs.core.assoc","parameters","or__4126__auto__","reitit.coercion/coerce!","var_args","G__80701","reitit.frontend/match-by-name","js/Error","name","reitit.frontend.match_by_name","path-params","reitit.core/match-by-name","G__80710","reitit.frontend/router","raw-routes","reitit.frontend.router","opts","reitit.core.router","cljs.core.merge","reitit.coercion/compile-request-coercers","G__80718","reitit.frontend/match-by-name!","reitit.frontend.match_by_name_BANG_","reitit.core/partial-match?","p1__80716#","cljs.core/every?","cljs.core/contains?","defined","cljs.core/keys","cljs.core/set","missing","clojure.set.difference","js/console.warn"],"sourcesContent":["(ns reitit.frontend\n  (:require [clojure.set :as set]\n            [reitit.coercion :as coercion]\n            [reitit.core :as r])\n  (:import goog.Uri\n           goog.Uri.QueryData))\n\n(defn- query-param [^QueryData q k]\n  (let [vs (.getValues q k)]\n    (if (< (alength vs) 2)\n      (aget vs 0)\n      (vec vs))))\n\n(defn query-params\n  \"Given goog.Uri, read query parameters into Clojure map.\"\n  [^Uri uri]\n  (let [q (.getQueryData uri)]\n    (->> q\n         (.getKeys)\n         (map (juxt keyword #(query-param q %)))\n         (into {}))))\n\n(defn match-by-path\n  \"Given routing tree and current path, return match with possibly\n  coerced parameters. Return nil if no match found.\"\n  [router path]\n  (let [uri (.parse Uri path)]\n    (if-let [match (r/match-by-path router (.getPath uri))]\n      (let [q (query-params uri)\n            match (assoc match :query-params q)\n            ;; Return uncoerced values if coercion is not enabled - so\n            ;; that tha parameters are always accessible from same property.\n            parameters (or (coercion/coerce! match)\n                           {:path (:path-params match)\n                            :query q})]\n        (assoc match :parameters parameters)))))\n\n(defn match-by-name\n  \"Given a router, route name and optionally path-parameters,\n  will return a Match (exact match), PartialMatch (missing path-parameters)\n  or `nil` (no match).\"\n  ([router name]\n   (match-by-name router name {}))\n  ([router name path-params]\n   (r/match-by-name router name path-params)))\n\n(defn router\n  \"Create a `reitit.core.router` from raw route data and optionally an options map.\n  Enables request coercion. See [[reitit.core/router]] for details on options.\"\n  ([raw-routes]\n   (router raw-routes {}))\n  ([raw-routes opts]\n   (r/router raw-routes (merge {:compile coercion/compile-request-coercers} opts))))\n\n(defn match-by-name!\n  \"Logs problems using console.warn\"\n  ([router name]\n   (match-by-name! router name {}))\n  ([router name path-params]\n   (if-let [match (match-by-name router name path-params)]\n     (if (r/partial-match? match)\n       (if (every? #(contains? path-params %) (:required match))\n         match\n         (let [defined (-> path-params keys set)\n               missing (set/difference (:required match) defined)]\n           (js/console.warn\n             \"missing path-params for route\" name\n             {:template (:template match)\n              :missing missing\n              :path-params path-params\n              :required (:required match)})\n           nil))\n       match)\n     (do (js/console.warn \"missing route\" name)\n         nil))))\n"]}