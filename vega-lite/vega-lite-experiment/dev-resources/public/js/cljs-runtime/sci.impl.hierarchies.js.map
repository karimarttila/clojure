{"version":3,"sources":["sci/impl/hierarchies.cljc"],"mappings":";AAMA,AAAA,AAAMA,AAAkBC;AAAxB,AACE,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAQ,AAAA,AAAMF;;AAEjB,AAAA,AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFL,AAAIO,AAAIC;AADZ,AAEG,AAACC,AAAoB,AAACV,AAAiBC,AAClB,AAAKU;AAAL,AACE,AAACC,AAAOD,AAAEH,AAAIC;;;AAJxC;;;AAAA,AAAA,AAAA,AAAMH,AAMFO,AAAKF,AAAEH,AAAIC;AANf,AAOG,AAACG,AAAOD,AAAEH,AAAIC;;;AAPjB,AAAA,AAAA,AAAMH;;AAAN,AASA,AAAA,AAAA,AAAAF,AAAMW;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAR,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMQ,AACFd,AAAIO,AAAIC;AADZ,AAEG,AAACC,AAAoB,AAACV,AAAiBC,AAClB,AAAKU;AAAL,AACE,AAACK,AAASL,AAAEH,AAAIC;;;AAJ1C;;;AAAA,AAAA,AAAA,AAAMM,AAMFF,AAAKF,AAAEH,AAAIC;AANf,AAOG,AAACO,AAASL,AAAEH,AAAIC;;;AAPnB,AAAA,AAAA,AAAMM;;AAAN,AASA,AAAA,AAAA,AAAAX,AAAMc;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAX,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMW,AACFjB,AAAIkB,AAAMV;AADd,AAEG,AAAA,AAAAP,AAAMS,AAAG,AAACX,AAAiBC;AAA3B,AACE,AAACmB,AAAKT,AAAEQ,AAAMV;;;AAHnB,AAAA,AAAA,AAAMS,AAIFL,AAAKF,AAAEQ,AAAMV;AAJjB,AAKG,AAACW,AAAKT,AAAEQ,AAAMV;;;AALjB,AAAA,AAAA,AAAMS;;AAAN,AAOA,AAAA,AAAA,AAAAd,AAAMkB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAf,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMe,AACFrB,AAAIO;AADR,AAEG,AAAA,AAAAN,AAAMS,AAAG,AAACX,AAAiBC;AAA3B,AACE,AAACsB,AAAUZ,AAAEH;;;AAHlB,AAAA,AAAA,AAAMc,AAIFT,AAAKF,AAAEH;AAJX,AAKG,AAACe,AAAUZ,AAAEH;;;AALhB,AAAA,AAAA,AAAMc;;AAAN,AAOA,AAAA,AAAA,AAAAlB,AAAMqB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAlB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMkB,AACFxB,AAAIO;AADR,AAEG,AAAA,AAAAN,AAAMS,AAAG,AAACX,AAAiBC;AAA3B,AACE,AAACyB,AAAYf,AAAEH;;;AAHpB,AAAA,AAAA,AAAMiB,AAIFZ,AAAKF,AAAEH;AAJX,AAKG,AAACkB,AAAYf,AAAEH;;;AALlB,AAAA,AAAA,AAAMiB;;AAAN,AAOA,AAAA,AAAA,AAAArB,AAAMwB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAArB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMqB,AACF3B,AAAIO;AADR,AAEG,AAAA,AAAAN,AAAMS,AAAG,AAACX,AAAiBC;AAA3B,AACE,AAAC4B,AAAQlB,AAAEH;;;AAHhB,AAAA,AAAA,AAAMoB,AAIFf,AAAKF,AAAEH;AAJX,AAKG,AAACqB,AAAQlB,AAAEH;;;AALd,AAAA,AAAA,AAAMoB;;AAAN","names":["sci.impl.hierarchies/global-hierarchy","ctx","cljs.core/deref","cljs.core.get_in","var_args","G__51117","sci.impl.hierarchies/derive*","js/Error","tag","parent","sci.impl.vars/alter-var-root","h","cljs.core.derive","_ctx","G__51123","sci.impl.hierarchies/underive*","cljs.core.underive","G__51137","sci.impl.hierarchies/isa?*","child","cljs.core.isa_QMARK_","G__51141","sci.impl.hierarchies/ancestors*","cljs.core.ancestors","G__51147","sci.impl.hierarchies/descendants*","cljs.core.descendants","G__51167","sci.impl.hierarchies/parents*","cljs.core.parents"],"sourcesContent":["(ns sci.impl.hierarchies\n  {:no-doc true}\n  (:require [sci.impl.vars :as vars]))\n\n;;;; Hierarchies\n\n(defn global-hierarchy [ctx]\n  (get-in @(:env ctx) [:namespaces 'clojure.core 'global-hierarchy]))\n\n(defn derive*\n  ([ctx tag parent]\n   (vars/alter-var-root (global-hierarchy ctx)\n                        (fn [h]\n                          (derive h tag parent)))\n   nil)\n  ([_ctx h tag parent]\n   (derive h tag parent)))\n\n(defn underive*\n  ([ctx tag parent]\n   (vars/alter-var-root (global-hierarchy ctx)\n                        (fn [h]\n                          (underive h tag parent)))\n   nil)\n  ([_ctx h tag parent]\n   (underive h tag parent)))\n\n(defn isa?*\n  ([ctx child parent]\n   (let [h @(global-hierarchy ctx)]\n     (isa? h child parent)))\n  ([_ctx h child parent]\n   (isa? h child parent)))\n\n(defn ancestors*\n  ([ctx tag]\n   (let [h @(global-hierarchy ctx)]\n     (ancestors h tag)))\n  ([_ctx h tag]\n   (ancestors h tag)))\n\n(defn descendants*\n  ([ctx tag]\n   (let [h @(global-hierarchy ctx)]\n     (descendants h tag)))\n  ([_ctx h tag]\n   (descendants h tag)))\n\n(defn parents*\n  ([ctx tag]\n   (let [h @(global-hierarchy ctx)]\n     (parents h tag)))\n  ([_ctx h tag]\n   (parents h tag)))\n"]}