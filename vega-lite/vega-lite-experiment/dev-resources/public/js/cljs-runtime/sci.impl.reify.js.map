{"version":3,"sources":["sci/impl/reify.cljc"],"mappings":";AAMA,AAAA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAOQ,AAAEA,AAAEC,AAAOC;AAAxB,AACE,AAAMK,AAAiB,AAACC,AAAWC,AAAQP;AACrCK,AAAiB,AAAA,AAACG,AAAQ,AAACC,AAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAV,AAAAS;AAAAE,AAAA,AAAApB,AAAAmB;AAAAA,AAAA,AAAAlB,AAAAkB;AAAAC,AAAMC;AAANF,AAAeG;AAAf,AAAA,AACGD,AAAM,AAAA,AAACN,AACK,AAACC,AAAI,AAAKQ;AAAL,AAAA,AAAAD,AAAA,AAAAf,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAAH,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAH,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACM,AAACX,AAAMwB,AAAW,AAACC,AAAOD,AAAQ,AAACE,AAAMF;AAChDF;AACnBV;AANrC,AAAA,AAAAJ,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAOyBC;;;AAR3B,AAAA,AAAA,AAAMf;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAK,AAAA,AAAAH,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAAA,AAAAL,AAAAG,AAAAC,AAAAL;;;AAAA,AAUA,AAAA,AAAM6B,AACiBrB,AAAMM;AAD7B,AAeW,AAAAgB,AAA0B,AAAC5B,AAAMY;AAAjC,AAAAiB,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAAiBN;AAAjB,AACE,AAACS,AAAYD,AAAUR","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.reify/reify","seq52649","G__52650","cljs.core/first","cljs.core/next","G__52651","G__52652","self__4723__auto__","_","_ctx","args","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","classes->methods","sci.impl.utils/split-when","cljs.core/symbol?","cljs.core.into","cljs.core.map","p__52655","vec__52656","seq__52657","first__52658","class","methods","cljs.core/vec","meth","cljs.core/second","cljs.core/nnext","sci.impl.reify/reify*","vec__52660","cljs.core.nth","interface","sci.impl.types/->Reified"],"sourcesContent":["(ns sci.impl.reify\n  {:no-doc true}\n  (:refer-clojure :exclude [reify])\n  (:require [sci.impl.types :as t]\n            [sci.impl.utils :refer [split-when]]))\n\n(defn reify [_ _ _ctx & args]\n  (let [classes->methods (split-when symbol? args)\n        classes->methods (into {} (map (fn [[class &  methods]]\n                                         [class (into {}\n                                                      (map (fn [meth]\n                                                             `['~(first meth) (fn ~(second meth) ~@(nnext meth))])\n                                                          methods))])\n                                       classes->methods))]\n    `(clojure.core/reify* ~classes->methods)))\n\n(defn reify* [#?(:clj ctx\n                 :cljs _ctx) classes->methods]\n  #?(:clj (let [ks (keys classes->methods)]\n            ;; NOTE: if the first thing in reify is a class, we assume all\n            ;; classes and no protocols. This should be addressed in a future version.\n            (if (class? (first ks))\n              (let [class-names (set (map #(symbol (.getName ^Class %)) ks))]\n                (if-let [factory (get-in ctx [:reify class-names])]\n                  (factory (zipmap class-names (vals classes->methods)))\n                  (throw (ex-info (str \"No reify factory for: \" class-names)\n                                  {:class class}))))\n              ;; So far we only supported reify-ing one protocol at a time. This\n              ;; should be addressed in a future version\n              (let [[interface methods] (first classes->methods)]\n                (t/->Reified interface methods))))\n     :cljs (let [[interface methods] (first classes->methods)]\n             (t/->Reified interface methods))))\n"]}