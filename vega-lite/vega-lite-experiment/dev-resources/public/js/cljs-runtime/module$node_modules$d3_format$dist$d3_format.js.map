{
"version":3,
"file":"module$node_modules$d3_format$dist$d3_format.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/d3-format/dist/d3-format.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_format$dist$d3_format\"] = function(global,require,module,exports) {\n// https://d3js.org/d3-format/ v2.0.0 Copyright 2020 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}));\n}(this, (function (exports) { 'use strict';\n\nfunction formatDecimal(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nfunction formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, \u00b1Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n\nfunction exponent(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n\nfunction formatGroup(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n\nfunction formatNumerals(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n\n// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nfunction formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n\n// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nfunction formatTrim(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n\nvar prefixExponent;\n\nfunction formatPrefixAuto(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n\nfunction formatRounded(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n\nvar formatTypes = {\n  \"%\": (x, p) => (x * 100).toFixed(p),\n  \"b\": (x) => Math.round(x).toString(2),\n  \"c\": (x) => x + \"\",\n  \"d\": formatDecimal,\n  \"e\": (x, p) => x.toExponential(p),\n  \"f\": (x, p) => x.toFixed(p),\n  \"g\": (x, p) => x.toPrecision(p),\n  \"o\": (x) => Math.round(x).toString(8),\n  \"p\": (x, p) => formatRounded(x * 100, p),\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": (x) => Math.round(x).toString(16).toUpperCase(),\n  \"x\": (x) => Math.round(x).toString(16)\n};\n\nfunction identity(x) {\n  return x;\n}\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\u00b5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nfunction formatLocale(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"\u2212\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer \u201cvalue\u201d part that can be\n        // grouped, and fractional or exponential \u201csuffix\u201d part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n\nvar locale;\n\ndefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nfunction defaultLocale(definition) {\n  locale = formatLocale(definition);\n  exports.format = locale.format;\n  exports.formatPrefix = locale.formatPrefix;\n  return locale;\n}\n\nfunction precisionFixed(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n\nfunction precisionPrefix(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n\nfunction precisionRound(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n\nexports.FormatSpecifier = FormatSpecifier;\nexports.formatDefaultLocale = defaultLocale;\nexports.formatLocale = formatLocale;\nexports.formatSpecifier = formatSpecifier;\nexports.precisionFixed = precisionFixed;\nexports.precisionPrefix = precisionPrefix;\nexports.precisionRound = precisionRound;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","d3","formatDecimalParts","x","p","i","toExponential","indexOf","coefficient","slice","length","exponent","Math","abs","NaN","formatGroup","grouping","thousands","value","width","t","j","g","max","push","substring","reverse","join","formatNumerals","numerals","replace","formatSpecifier","specifier","match","re","exec","Error","FormatSpecifier","fill","align","sign","symbol","zero","comma","precision","trim","type","undefined","formatRounded","d","Array","identity","formatLocale","locale","newFormat","format","valuePrefix","prefix","valueSuffix","suffix","n","c","formatType","valueNegative","isNaN","nan","s","i0","i1","minus","prefixes","prefixExponent","maybeSuffix","charCodeAt","decimal","group","Infinity","padding","formatTypes","currencyPrefix","test","toLowerCase","currencySuffix","percent","min","toString","format.toString","map","call","Number","currency","String","formatPrefix","f","e","floor","k","pow","defaultLocale","definition","prototype","FormatSpecifier.prototype.toString","%","toFixed","b","round","formatDecimal","toLocaleString","toPrecision","o","formatPrefixAuto","X","toUpperCase","formatDefaultLocale","precisionFixed","step","precisionPrefix","precisionRound","Object","defineProperty"]
}
