{"version":3,"sources":["rewrite_clj/parser.cljs"],"mappings":";AAOA;;;AAAA,AAAMA,AAESC;AAFf,AAGE,AAACC,AAAaD;;AAEhB;;;AAAA,AAAME,AAESF;AAFf,AAGE,AAAMG,AAAW,AAAA,AAACC,AACD,AAACC,AAAWC,AACZ,AAACC;AAFD,AAAa,AAACR,AAAMC;;AAArC,AAGE,AAACQ,AACC,AAACC,AAAAA,AAAAA,AAAgBN,AAAAA,AACjB,AAACO,AAAK,AAACC,AAAMR;;AAInB;;;AAAA,AAAMS,AAEHC;AAFH,AAGE,AAACd,AAAM,AAACe,AAAAA,AAAAA,AAA4BD,AAAAA;;AAEtC;;;AAAA,AAAME,AAEHF;AAFH,AAGE,AAACX,AAAU,AAACY,AAAAA,AAAAA,AAA4BD,AAAAA","names":["rewrite-clj.parser/parse","reader","rewrite-clj.parser.core/parse-next","rewrite-clj.parser/parse-all","nodes","cljs.core.repeatedly","cljs.core.take_while","cljs.core/identity","cljs.core.doall","cljs.core/with-meta","rewrite-clj.node/forms-node","cljs.core/meta","cljs.core/first","rewrite-clj.parser/parse-string","s","rewrite-clj.reader/indexing-push-back-reader","rewrite-clj.parser/parse-string-all"],"sourcesContent":["(ns rewrite-clj.parser\n  (:require [rewrite-clj.parser.core :as p]\n            [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as r]))\n\n;; ## Parser Core\n\n(defn parse\n  \"Parse next form from the given reader.\"\n  [^not-native reader]\n  (p/parse-next reader))\n\n(defn parse-all\n  \"Parse all forms from the given reader.\"\n  [^not-native reader]\n  (let [nodes (->> (repeatedly #(parse reader))\n                   (take-while identity)\n                   (doall))]\n    (with-meta\n      (node/forms-node nodes)\n      (meta (first nodes)))))\n\n;; ## Specialized Parsers\n\n(defn parse-string\n  \"Parse first form in the given string.\"\n  [s]\n  (parse (r/indexing-push-back-reader s)))\n\n(defn parse-string-all\n  \"Parse all forms in the given string.\"\n  [s]\n  (parse-all (r/indexing-push-back-reader s)))\n\n\n"]}