{"version":3,"sources":["rewrite_clj/node/whitespace.cljs"],"mappings":"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","names":["rewrite-clj.node.whitespace/*newline-fn*","cljs.core/identity","rewrite-clj.node.whitespace/*count-fn*","cljs.core/count","this__4380__auto__","k__4381__auto__","this__4382__auto__","k45973","else__4383__auto__","G__45977","cljs.core/Keyword","whitespace","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__45978","vec__45979","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__45972","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this45974","other45975","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__45983","cljs.core/keyword-identical?","expr__45984","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.whitespace/WhitespaceNode","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__45976","extmap__4419__auto__","G__45991","cljs.core/record?","rewrite-clj.node.whitespace/->WhitespaceNode","rewrite-clj.node.whitespace/map->WhitespaceNode","_","js/Error","this","k45993","G__46002","newlines","p__46003","vec__46004","G__45992","this45994","other45995","pred__46024","expr__46025","rewrite-clj.node.whitespace/NewlineNode","G__45997","G__46036","rewrite-clj.node.whitespace/->NewlineNode","rewrite-clj.node.whitespace/map->NewlineNode","rewrite-clj.node.whitespace/whitespace-node","s","rewrite-clj.node.whitespace/newline-node","rewrite-clj.node.whitespace/newline?","c","rewrite-clj.node.whitespace/whitespace-nodes","cljs.core.partition_by","cljs.core.map","char-seq","cljs.core.apply","cljs.core/str","cljs.core/first","rewrite-clj.node.whitespace/spaces","n","cljs.core.repeat","rewrite-clj.node.whitespace/newlines","comma","rewrite-clj.node.whitespace/comma-separated","nodes","cljs.core/butlast","cljs.core.interleave","nl","rewrite-clj.node.whitespace/line-separated","space","rewrite-clj.node.whitespace/space-separated","rewrite-clj.node.whitespace/whitespace?","node","rewrite-clj.node.protocols/tag","rewrite-clj.node.whitespace/linebreak?"],"sourcesContent":["(ns rewrite-clj.node.whitespace\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Newline Modifiers\n\n(def ^:dynamic *newline-fn*\n  \"This function is applied to every newline string.\"\n  identity)\n\n(def ^:dynamic *count-fn*\n  \"This function is applied to every newline string and should produce\n   the eventual character count.\"\n  count)\n\n\n;; TODO\n;; (defmacro with-newline-fn\n;;   [f & body]\n;;   `(binding [*newline-fn* (comp *newline-fn* ~f)]\n;;      ~@body))\n\n;; (defmacro with-count-fn\n;;   [f & body]\n;;   `(binding [*count-fn* (comp *count-fn* ~f)]\n;;      ~@body))\n\n;; ## Nodes\n\n(defrecord WhitespaceNode [whitespace]\n  node/Node\n  (tag [_] :whitespace)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (count whitespace))\n  (string [_] whitespace)\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(defrecord NewlineNode [newlines]\n  node/Node\n  (tag [_] :newline)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (*count-fn* newlines))\n  (string [_] (*newline-fn* newlines))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n\n;; TODO\n;; (node/make-printable! WhitespaceNode)\n;; (node/make-printable! NewlineNode)\n\n;; ## Constructors\n\n(defn whitespace-node\n  \"Create whitespace node.\"\n  [s]\n  (->WhitespaceNode s))\n\n(defn newline-node\n  \"Create newline node.\"\n  [s]\n  (->NewlineNode s))\n\n(defn- newline?\n  \"Check whether a character represents a linebreak.\"\n  [c]\n  (contains? #{\\return \\newline} c))\n\n(defn whitespace-nodes\n  \"Convert a string of whitespace to whitespace/newline nodes.\"\n  [s]\n  (->> (partition-by newline? s)\n       (map\n         (fn [char-seq]\n           (let [s (apply str char-seq)]\n             (if (newline? (first char-seq))\n               (newline-node s)\n               (whitespace-node s)))))))\n\n;; ## Utilities\n\n(defn spaces\n  \"Create node representing the given number of spaces.\"\n  [n]\n  (whitespace-node (apply str (repeat n \\space))))\n\n(defn newlines\n  \"Create node representing the given number of newline characters.\"\n  [n]\n  (newline-node (apply str (repeat n \\newline))))\n\n\n\n(let [comma (whitespace-node \", \")]\n  (defn comma-separated\n    \"Interleave the given seq of nodes with `\\\", \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat comma)))))\n\n(let [nl (newline-node \"\\n\")]\n  (defn line-separated\n    \"Interleave the given seq of nodes with newline nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat nl)))))\n\n(let [space (whitespace-node \" \")]\n  (defn space-separated\n    \"Interleave the given seq of nodes with `\\\" \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat space)))))\n\n;; ## Predicates\n\n(defn whitespace?\n  \"Check whether a node represents whitespace.\"\n  [node]\n  (contains?\n    #{:whitespace\n      :newline}\n    (node/tag node)))\n\n(defn linebreak?\n  \"Check whether a ndoe represents linebreaks.\"\n  [node]\n  (= (node/tag node) :newline))\n"]}