{"version":3,"sources":["sci/impl/io.cljc"],"mappings":"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","names":["sci.impl.io/in","*unrestricted*-orig-val__51110","*unrestricted*-temp-val__51111","sci.impl.unrestrict/*unrestricted*","G__51112","sci.impl.vars.dynamic_var","sci.impl.vars/unbind","sci.impl.io/out","*unrestricted*-orig-val__51113","*unrestricted*-temp-val__51114","G__51115","sci.impl.io/err","*unrestricted*-orig-val__51118","*unrestricted*-temp-val__51119","G__51120","sci.impl.io/print-meta","sci.impl.io/print-length","sci.impl.io/print-level","sci.impl.io/print-namespace-maps","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.io/pr","seq51121","self__4724__auto__","cljs.core/seq","objs","*print-length*-orig-val__51124","*print-level*-orig-val__51125","*print-meta*-orig-val__51126","*print-namespace-maps*-orig-val__51127","*print-length*-temp-val__51128","cljs.core/deref","*print-level*-temp-val__51129","*print-meta*-temp-val__51130","*print-namespace-maps*-temp-val__51131","cljs.core/*print-length*","cljs.core/*print-level*","cljs.core/*print-meta*","cljs.core/*print-namespace-maps*","cljs.core.apply","cljs.core/pr-str","sci.impl.io/flush","sci.impl.io/newline","sci.impl.io/println","sci.impl.io/pr-str","seq51138","*print-length*-orig-val__51156","*print-level*-orig-val__51157","*print-meta*-orig-val__51158","*print-namespace-maps*-orig-val__51159","*print-length*-temp-val__51160","*print-level*-temp-val__51161","*print-meta*-temp-val__51162","*print-namespace-maps*-temp-val__51163","sci.impl.io/prn","seq51168","*print-length*-orig-val__51172","*print-level*-orig-val__51173","*print-meta*-orig-val__51174","*print-namespace-maps*-orig-val__51175","*print-length*-temp-val__51176","*print-level*-temp-val__51177","*print-meta*-temp-val__51178","*print-namespace-maps*-temp-val__51179","cljs.core/prn-str","sci.impl.io/prn-str","seq51191","*print-length*-orig-val__51197","*print-level*-orig-val__51198","*print-meta*-orig-val__51199","*print-namespace-maps*-orig-val__51200","*print-length*-temp-val__51201","*print-level*-temp-val__51202","*print-meta*-temp-val__51203","*print-namespace-maps*-temp-val__51204","sci.impl.io/print","seq51206","*print-length*-orig-val__51242","*print-level*-orig-val__51243","*print-namespace-maps*-orig-val__51244","*print-length*-temp-val__51245","*print-level*-temp-val__51246","*print-namespace-maps*-temp-val__51247","cljs.core/print-str","sci.impl.io/print-str","seq51248","*print-length*-orig-val__51256","*print-level*-orig-val__51257","*print-meta*-orig-val__51258","*print-namespace-maps*-orig-val__51259","*print-length*-temp-val__51260","*print-level*-temp-val__51261","*print-meta*-temp-val__51262","*print-namespace-maps*-temp-val__51263","seq51269","*print-length*-orig-val__51280","*print-level*-orig-val__51281","*print-meta*-orig-val__51282","*print-namespace-maps*-orig-val__51283","*print-length*-temp-val__51284","*print-level*-temp-val__51285","*print-meta*-temp-val__51286","*print-namespace-maps*-temp-val__51287","cljs.core/println-str","sci.impl.io/with-out-str","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","seq51300","G__51301","cljs.core/first","cljs.core/next","G__51302","self__4723__auto__","_","body"],"sourcesContent":["(ns sci.impl.io\n  {:no-doc true}\n  (:refer-clojure :exclude [pr prn pr-str prn-str print print-str println\n                            newline flush with-out-str with-in-str read-line\n                            printf #?@(:cljs [string-print])])\n  (:require #?(:cljs [goog.string])\n            [sci.impl.unrestrict :refer [*unrestricted*]]\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def in (binding [*unrestricted* true]\n          (doto (vars/dynamic-var '*in*)\n                                        (vars/unbind))))\n\n(def out (binding [*unrestricted* true]\n           (doto (vars/dynamic-var '*out*)\n             (vars/unbind))))\n\n(def err (binding [*unrestricted* true]\n           (doto (vars/dynamic-var '*err*)\n             (vars/unbind))))\n\n(def print-meta\n  (vars/dynamic-var '*print-meta* false))\n\n(def print-length (vars/dynamic-var '*print-length* nil))\n\n(def print-level (vars/dynamic-var '*print-level* nil))\n\n(def print-namespace-maps (vars/dynamic-var '*print-namespace-maps* true))\n\n#?(:clj (defn pr-on\n          {:private true\n           :static true}\n          [x w]\n          (if *print-dup*\n            (print-dup x w)\n            (print-method x w))\n          nil))\n\n#?(:clj (defn pr\n          ([] nil)\n          ([x]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta\n                     *print-namespace-maps* @print-namespace-maps]\n             (pr-on x @out)))\n          ([x & more]\n           (pr x)\n           (. ^java.io.Writer @out (append \\space))\n           (if-let [nmore (next more)]\n             (recur (first more) nmore)\n             (apply pr more))))\n   :cljs (defn pr\n           [& objs]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta\n                     *print-namespace-maps* @print-namespace-maps]\n             (.append @out (apply cljs.core/pr-str objs))\n             nil)))\n\n#?(:clj\n   (defn flush\n     []\n     (. ^java.io.Writer @out (flush))\n     nil)\n   :cljs (defn flush [] ;stub\n           nil))\n\n#?(:cljs (declare println))\n\n#?(:clj (defn newline\n          []\n          (. ^java.io.Writer @out (append ^String @#'clojure.core/system-newline))\n          nil)\n   :cljs (defn newline\n           []\n           (println)))\n\n#?(:clj\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply pr xs))\n       (str sw)))\n   :cljs\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps]\n       (apply cljs.core/pr-str objs))))\n\n#?(:clj\n   (defn prn\n     [& more]\n     (apply pr more)\n     (newline)\n     (when *flush-on-newline*\n       (flush)))\n   :cljs\n   (defn prn\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps]\n       (.append @out (apply cljs.core/prn-str objs))\n       nil)))\n\n#?(:clj\n   (defn prn-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply prn xs))\n       (str sw)))\n   :cljs\n   (defn prn-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps]\n       (apply cljs.core/prn-str objs))))\n\n#?(:clj\n   (defn print\n     [& more]\n     (binding [*print-readably* nil]\n       (apply pr more)))\n   :cljs\n   (defn print\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-namespace-maps* @print-namespace-maps]\n       (.append @out (apply cljs.core/print-str objs))\n       nil)))\n\n#?(:clj\n   (defn print-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply print xs))\n       (str sw)))\n   :cljs\n   (defn print-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps]\n       (apply cljs.core/print-str objs))))\n\n#?(:clj\n   (defn println\n     [& more]\n     (binding [*print-readably* nil]\n       (apply prn more)))\n   :cljs\n   (defn println\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps]\n       (.append @out (apply println-str objs))\n       nil)))\n\n#?(:clj\n   (defn printf\n     [fmt & args]\n     (print (apply format fmt args))))\n\n(defn with-out-str\n  [_ _ & body]\n  `(let [s# (new #?(:clj java.io.StringWriter\n                    :cljs goog.string.StringBuffer))]\n     (binding [*out* s#]\n       ~@body\n       (str s#))))\n\n#?(:clj\n   (defn with-in-str\n     [_ _ s & body]\n     `(with-open [s# (-> (java.io.StringReader. ~s) clojure.lang.LineNumberingPushbackReader.)]\n        (binding [*in* s#]\n          ~@body))))\n\n#?(:clj\n   (defn read-line\n     []\n     (if (instance? clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^java.io.BufferedReader @in))))\n"]}