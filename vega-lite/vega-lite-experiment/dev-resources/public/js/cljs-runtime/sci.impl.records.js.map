{"version":3,"sources":["sci/impl/records.cljc"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.records/defrecord","seq49071","G__49072","cljs.core/first","cljs.core/next","G__49073","G__49074","G__49075","G__49076","self__4723__auto__","_","ctx","record-name","fields","protocol-impls","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","cljs.core.apply","cljs.core/array-map","factory-fn-str","factory-fn-sym","cljs.core.symbol","map-factory-sym","keys","cljs.core.mapv","cljs.core/keyword","sci.impl.utils/split-when","cljs.core/symbol?","cljs.core.mapcat","p__49085","vec__49086","seq__49087","first__49088","protocol-name","impls","p1__49068#","cljs.core/group-by","protocol","fexpr__49094","cljs.core/deref","sci.impl.utils/eval-resolve-state","sci.impl.vars/var?","protocol-ns","pns","sci.impl.vars/getName","fq-meth-name","cljs.core.map","p__49098","vec__49099","cljs.core.nth","method-name","bodies","cljs.core/rest","impl","args","this","bindings","field","cljs.core.keyword","sci.impl.records/sci-record?","x","or__4126__auto__","cljs.core/map?","G__49150","cljs.core/meta","cljs.core/record?","G__49152","sci.impl.records/resolve-record-or-protocol-class","js/Error","sym","sym-str","last-dot","clojure.string.last_index_of","class-name","cljs.core.subs","namespace","sci.impl.vars/current-ns-name","sci.impl.records.resolve_record_or_protocol_class","package","class","clojure.string/replace","temp__5735__auto__","sci-var","cljs.core.get_in","sci.impl.records/resolve-record-class","class-sym","cljs.core/Symbol"],"sourcesContent":["(ns sci.impl.records\n  {:no-doc true}\n  (:refer-clojure :exclude [defrecord record?])\n  (:require [clojure.string :as str]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn defrecord [_ _ ctx record-name fields & protocol-impls]\n  (let [factory-fn-str (str \"->\" record-name)\n        factory-fn-sym (symbol factory-fn-str)\n        map-factory-sym (symbol (str \"map\" factory-fn-str))\n        keys (mapv keyword fields)\n        protocol-impls (utils/split-when symbol? protocol-impls)\n        protocol-impls\n        (mapcat (fn [[protocol-name & impls]]\n                  (let [impls (group-by first impls)\n                        protocol (@utils/eval-resolve-state ctx protocol-name)\n                        protocol (if (vars/var? protocol) @protocol protocol)\n                        protocol-ns (:ns protocol)\n                        pns (str (vars/getName protocol-ns))\n                        fq-meth-name #(symbol pns %)]\n                    (map (fn [[method-name bodies]]\n                           (let [bodies (map rest bodies)\n                                 bodies (mapv (fn [impl]\n                                                (let [args (first impl)\n                                                      this (first args)\n                                                      bindings (vec (mapcat (fn [field]\n                                                                              [field (list (keyword field) this)])\n                                                                            fields))]\n                                                  `(~args\n                                                    (let ~bindings\n                                                      ~@(next impl))))) bodies)]\n                             `(defmethod ~(fq-meth-name (str method-name)) '~record-name ~@bodies)))\n                         impls)))\n                protocol-impls)]\n    `(do\n       (defn ~factory-fn-sym [& args#]\n         (vary-meta (zipmap ~keys args#)\n                    assoc\n                    :sci.impl/record true\n                    :sci.impl/type '~record-name))\n       (defn ~map-factory-sym [m#]\n         (vary-meta m#\n                    assoc\n                    :sci.impl/record true\n                    :sci.impl/type '~record-name))\n       (defn ~factory-fn-sym [& args#]\n         (vary-meta (zipmap ~keys args#)\n                    assoc\n                    :sci.impl/record true\n                    :sci.impl/type '~record-name))\n       (def ~record-name (with-meta '~record-name\n                           {:sci.impl/record true\n                            :sci.impl.record/constructor ~factory-fn-sym}))\n       ~@protocol-impls)))\n\n(defn sci-record? [x]\n  (or\n   (when (map? x)\n     (some-> x meta :sci.impl/record))\n   (clojure.core/record? x)))\n\n(defn resolve-record-or-protocol-class\n  \"A record class is represented by a symbol with metadata (currently). This is only an implementation detail.\n   A protocol is represented by a map with :ns, :methods and optionally :class. This is also an implementation detail.\"\n  ;; TODO: we should probably use munging here for namespaces with hyphens in them.\n  ([ctx sym]\n   (let [sym-str (str sym)\n         last-dot (str/last-index-of sym-str \".\")\n         class-name (if last-dot\n                      (subs sym-str (inc last-dot) (count sym-str))\n                      sym-str)\n         namespace (if last-dot\n                     (symbol (subs sym-str 0 last-dot))\n                     (vars/current-ns-name))]\n     (resolve-record-or-protocol-class ctx namespace (symbol class-name))))\n  ([ctx package class]\n   (let [namespace (-> package str (str/replace \"_\" \"-\") symbol)]\n     (when-let [sci-var (get-in @(:env ctx) [:namespaces namespace class])]\n       (if (vars/var? sci-var)\n         @sci-var\n         sci-var)))))\n\n(defn resolve-record-class\n  [ctx class-sym]\n  (when-let [x (resolve-record-or-protocol-class ctx class-sym)]\n    (when (symbol? x) x)))\n"]}