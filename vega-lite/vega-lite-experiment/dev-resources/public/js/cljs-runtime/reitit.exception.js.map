{"version":3,"sources":["reitit/exception.cljc"],"mappings":";AAGA,AAAA,AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AAEG,AAAA,AAACC,AAAMD;;;AAFV,AAAA,AAAA,AAAMF,AAGFE,AAAKE;AAHT,AAIG,AAAO,AAAA,AAAA,AAAA,AAACC,AAAQ,AAAKH,AAAaA,AAAYE;;;AAJjD,AAAA,AAAA,AAAMJ;;AAAN,AAMA,AAAA,AAAMM,AAAaC;AAAnB,AAC2C,AAACC,AAAWD;;AAEvD,AAAA,AAAAE,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUS;AAAVR,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAA2B,AAAKnB,AAAKqB,AAAEA;AAAZ,AAAerB;AAA1C,AAAAe,AAAAL,AAAAE,AAAAC,AAAAC;;;AAEA,AAAA,AAAMQ,AAAWjB;AAAjB,AACE,AAAMH,AAAK,AAACqB,AAAQlB;AACdmB,AAAQ,AAACJ,AAAiB,AAAA,AAAOlB,AAAM,AAACE,AAAYC,AAAG,AAAA,AAAOH;AADpE,AAGE,AAACC,AAAQqB,AAAQ,AAACC,AAAM,AAAAC,AAAIxB;AAAJ,AAAA,AAAAwB;AAAAA;;AAAA;;AAAP,AAA4BrB;;AAMjD,AAAAe,AAAA,AAAA,AAAsCC,AAAEG,AAAQtB;AAAhD,AACE,AAAKsB,AAAQ,AAAA,AAAItB,AAAK,AAAA,AAAY,AAACyB,AAAOzB;;AAE5C,AAAAkB,AAAA,AAAA,AAA6CC,AAAEA,AAAEO;AAAjD,AACE,AAAA,AAAsBC,AAAKC;AAA3B,AACU,AAAA,AAAK,AAAA,AAAA,AAAI,AAAA,AAAcA,AAClBD,AAAS,AAACE,AAAU,AAAA,AAAA,AAACC,AAAYF;;AAFhD,AAGE,AAAA,AAACG,AAAMC,AACA,AAACC,AACC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAC,AAAAF,AAAA,AAAA;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAOT;AAAP,AAAAU,AAAAD,AAAA,AAAA,AAAYR;AAAZ,AAAAS,AAAAF,AAAA,AAAA,AAAwBG;AAAxB,AACE,AAAA,AAAK,AAACC,AAAYZ,AAAKC,AAElB,AAAA,AAACY,AAAc,AAACP,AAAK,AAAAQ;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAJ,AAAAK,AAAA,AAAA,AAAMf;AAAN,AAAAU,AAAAK,AAAA,AAAA,AAAWd;AAAX,AACE,AAACW,AAAYZ,AAAKC;AAH9C,AAG2DU;AAE7DZ;;AAEb,AAAAR,AAAA,AAAA,AAA6CC,AAAEA,AAAEO;AAAjD,AACE,AAAA,AAACK,AAAMC,AACA,AAACC,AACC,AAAAU;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAN,AAAAO,AAAA,AAAA,AAAMC;AAAN,AAAAR,AAAAO,AAAA,AAAA,AAAWN;AAAX,AACE,AAAA,AAAA,AAAKO,AAAa,AAAA,AAACL,AAAiB,AAACP,AAAKa,AAAMR;AAClDZ;;AAEX,AAAAR,AAAA,AAAA,AAAqDC,AAAEA,AAAEnB;AAAzD,AACE,AAAA,AAAoC,AAACyB,AAAOzB","names":["var_args","G__78992","reitit.exception/fail!","js/Error","type","reitit.exception.fail_BANG_","data","cljs.core.ex_info","reitit.exception/get-message","e","cljs.core/ex-message","js/reitit","js/reitit.exception","js/reitit.exception.format-exception","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__78993","cljs.core/MultiFn","cljs.core.symbol","reitit.exception/format-exception","_","reitit.exception/exception","cljs.core/ex-data","message","cljs.core.assoc","or__4126__auto__","cljs.core.pr_str","conflicts","path","route-data","cljs.core/not-empty","cljs.core/select-keys","cljs.core.apply","cljs.core/str","cljs.core.mapv","p__78999","vec__79000","vec__79003","cljs.core.nth","vals","resolve-str","clojure.string.join","p__79010","vec__79011","p__79017","vec__79018","name","cljs.core/first"],"sourcesContent":["(ns reitit.exception\n  (:require [clojure.string :as str]))\n\n(defn fail!\n  ([type]\n   (fail! type nil))\n  ([type data]\n   (throw (ex-info (str type) {:type type, :data data}))))\n\n(defn get-message [e]\n  #?(:clj (.getMessage ^Exception e) :cljs (ex-message e)))\n\n(defmulti format-exception (fn [type _ _] type))\n\n(defn exception [e]\n  (let [data (ex-data e)\n        message (format-exception (:type data) (get-message e) (:data data))]\n    ;; there is a 3-arity version (+cause) of ex-info, but the default repl error message is taken from the cause\n    (ex-info message (assoc (or data {}) ::cause e))))\n\n;;\n;; Formatters\n;;\n\n(defmethod format-exception :default [_ message data]\n  (str message (if data (str \"\\n\\n\" (pr-str data)))))\n\n(defmethod format-exception :path-conflicts [_ _ conflicts]\n  (letfn [(resolve-str [path route-data]\n            (str (if (:conflicting route-data) \"   \" \"-> \")\n                 path \" \" (not-empty (select-keys route-data [:conflicting]))))]\n    (apply str \"Router contains conflicting route paths:\\n\\n\"\n           (mapv\n             (fn [[[path route-data] vals]]\n               (str (resolve-str path route-data)\n                    \"\\n\"\n                    (str/join \"\\n\" (mapv (fn [[path route-data]]\n                                           (resolve-str path route-data)) vals))\n                    \"\\n\\n\"))\n             conflicts))))\n\n(defmethod format-exception :name-conflicts [_ _ conflicts]\n  (apply str \"Router contains conflicting route names:\\n\\n\"\n         (mapv\n           (fn [[name vals]]\n             (str name \"\\n-> \" (str/join \"\\n-> \" (mapv first vals)) \"\\n\"))\n           conflicts)))\n\n(defmethod format-exception :reitit.impl/merge-data [_ _ data]\n  (str \"Error merging route-data\\n\\n\" (pr-str data)))\n"]}