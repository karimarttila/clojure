{"version":3,"sources":["rewrite_clj/node/token.cljs"],"mappings":"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","names":["this__4380__auto__","k__4381__auto__","this__4382__auto__","k46042","else__4383__auto__","G__46057","cljs.core/Keyword","value","string-value","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__46059","vec__46060","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__46041","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this46043","other46044","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__46073","cljs.core/keyword-identical?","expr__46074","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.token/TokenNode","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__46045","extmap__4419__auto__","G__46076","cljs.core/record?","rewrite-clj.node.token/->TokenNode","rewrite-clj.node.token/map->TokenNode","_","this","var_args","G__46078","rewrite-clj.node.token/token-node","js/Error","rewrite_clj.node.token.token_node","cljs.core.pr_str"],"sourcesContent":["(ns rewrite-clj.node.token\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord TokenNode [value string-value]\n  node/Node\n  (tag [_] :token)\n  (printable-only? [_] false)\n  (sexpr [_] value)\n  (length [_] (.-length string-value))\n  (string [_] string-value)\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n; TODO\n;(node/make-printable! TokenNode)\n\n;; ## Constructor\n\n(defn token-node\n  \"Create node for an unspecified EDN token.\"\n  ([value]\n   (token-node value (pr-str value)))\n  ([value string-value]\n  (->TokenNode value string-value)))\n"]}