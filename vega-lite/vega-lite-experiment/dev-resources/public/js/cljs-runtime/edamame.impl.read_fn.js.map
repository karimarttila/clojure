{"version":3,"sources":["edamame/impl/read_fn.cljc"],"mappings":"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","names":["edamame.impl.read-fn/walk*","inner","outer","form","cljs.core/list?","cljs.core/with-meta","G__51336","cljs.core.apply","cljs.core/list","cljs.core.map","cljs.core/meta","cljs.core/map-entry?","G__51337","cljs.core/MapEntry","G__51338","cljs.core/key","G__51339","cljs.core/val","cljs.core/seq?","G__51340","cljs.core.doall","cljs.core/record?","G__51341","cljs.core.reduce","r","x","cljs.core.conj","cljs.core/coll?","G__51342","cljs.core.into","cljs.core/empty","edamame.impl.read-fn/postwalk*","f","cljs.core.partial","edamame.impl.read-fn/read-fn","expr","map__51344","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","max-fixed","cljs.core.get","var-args?","state","cljs.core/volatile!","elt","cljs.core/Symbol","temp__5733__auto__","vec__51345","cljs.core.nth","_","m","cljs.core/re-matches","cljs.core/name","cljs.core/empty?","cljs.core.update","cljs.core/max","cljs.core._EQ_","cljs.core.assoc","n","js/parseInt","fixed-names","p1__51343#","cljs.core.symbol","cljs.core.range","var-args-sym","arg-list","cljs.core/vec","cljs.core.concat","cljs.core/List"],"sourcesContent":["(ns edamame.impl.read-fn\n  {:no-doc true})\n\n(defn walk*\n  \"Preserves metadata, unlike clojure.walk/walk.\"\n  [inner outer form]\n  (cond\n    (list? form) (with-meta (outer (apply list (map inner form)))\n                   (meta form))\n    #?(:clj (instance? clojure.lang.IMapEntry form) :cljs (map-entry? form))\n    (outer #?(:clj (clojure.lang.MapEntry/create (inner (key form)) (inner (val form)))\n              :cljs (MapEntry. (inner (key form)) (inner (val form)) nil)))\n    (seq? form) (with-meta (outer (doall (map inner form)))\n                  (meta form))\n    #?(:clj (instance? clojure.lang.IRecord form)\n       :cljs (record? form))\n    (outer (reduce (fn [r x] (conj r (inner x))) form form))\n    (coll? form) (outer (into (empty form) (map inner form)))\n    :else (outer form)))\n\n(defn postwalk*\n  \"Preserves metadata, unlike clojure.walk/postwalk.\"\n  [f form]\n  (walk* (partial postwalk* f) f form))\n\n(defn read-fn [expr]\n  (let [state (volatile! {:max-fixed 0 :var-args? false})\n        expr (postwalk* (fn [elt]\n                          (if (symbol? elt)\n                            (if-let [[_ m] (re-matches #\"^%(.*)\" (name elt))]\n                              (cond (empty? m)\n                                    (do (vswap! state update :max-fixed max 1)\n                                        '%1)\n                                    (= \"&\" m)\n                                    (do (vswap! state assoc :var-args? true)\n                                        elt)\n                                    :else (do (let [n #?(:clj (Integer/parseInt m)\n                                                         :cljs (js/parseInt m))]\n                                                (vswap! state update :max-fixed max n))\n                                              elt))\n                              elt)\n                            elt))\n                        expr)\n        {:keys [:max-fixed :var-args?]} @state\n        fixed-names (map #(symbol (str \"%\" %)) (range 1 (inc max-fixed)))\n        var-args-sym '%&\n        arg-list (vec (concat fixed-names (when var-args?\n                                            ['& var-args-sym])))\n        form (list 'fn* arg-list expr)]\n    form))\n"]}