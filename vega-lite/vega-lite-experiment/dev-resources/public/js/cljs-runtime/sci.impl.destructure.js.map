{"version":3,"sources":["sci/impl/destructure.cljc"],"mappings":"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","names":["sci.impl.destructure/destructure*","bindings","bents","cljs.core.partition","pb","bvec","b","v","pvec","val","gvec","cljs.core.gensym","gseq","gfirst","has-rest","cljs.core/some","ret","cljs.core.conj","cljs.core/List","cljs.core/seq","n","bs","seen-rest?","firstb","cljs.core/first","cljs.core._EQ_","cljs.core/second","cljs.core/nnext","js/Error","cljs.core.sequence","cljs.core.concat","cljs.core/next","cljs.core/nth","pmap","gmap","defaults","cljs.core/seq?","cljs.core/apply","cljs.core/hash-map","bes","transforms","cljs.core.reduce","mk","cljs.core/Keyword","mkns","cljs.core/namespace","mkn","cljs.core/name","p1__47058#","cljs.core.assoc","cljs.core.keyword","or__4126__auto__","p1__47059#","cljs.core.symbol","cljs.core/str","cljs.core/keys","entry","p1__47060#","p2__47061#","fexpr__47112","cljs.core/val","cljs.core.dissoc","cljs.core/key","fexpr__47113","bb","bk","local","cljs.core/PROTOCOL_SENTINEL","cljs.core/with-meta","cljs.core/meta","cljs.core/not","bv","temp__5733__auto__","cljs.core/find","cljs.core/get","cljs.core/Symbol","cljs.core/vector?","cljs.core/map?","process-entry","cljs.core/every?","cljs.core/symbol?","cljs.core.map","kwbs","p1__47062#","cljs.core.filter","cljs.core/ffirst","sci.impl.destructure/destructure"],"sourcesContent":["(ns sci.impl.destructure\n  \"Destructure function, adapted from Clojure and ClojureScript.\"\n  {:no-doc true}\n  (:refer-clojure :exclude [destructure]))\n\n(defn destructure* [bindings]\n  (let [bents (partition 2 bindings)\n        pb (fn pb [bvec b v]\n             (let [pvec\n                   (fn [bvec b val]\n                     (let [gvec (gensym \"vec__\")\n                           gseq (gensym \"seq__\")\n                           gfirst (gensym \"first__\")\n                           has-rest (some #{'&} b)]\n                       (loop [ret (let [ret (conj bvec gvec val)]\n                                    (if has-rest\n                                      (conj ret gseq (list seq gvec))\n                                      ret))\n                              n 0\n                              bs b\n                              seen-rest? false]\n                         (if (seq bs)\n                           (let [firstb (first bs)]\n                             (cond\n                               (= firstb '&) (recur (pb ret (second bs) gseq)\n                                                    n\n                                                    (nnext bs)\n                                                    true)\n                               (= firstb :as) (pb ret (second bs) gvec)\n                               :else (if seen-rest?\n                                       (throw #?(:clj (new Exception \"Unsupported binding form, only :as can follow & parameter\")\n                                                 :cljs (new js/Error \"Unsupported binding form, only :as can follow & parameter\")))\n                                       (recur (pb (if has-rest\n                                                    (conj ret\n                                                          gfirst `(~first ~gseq)\n                                                          gseq `(~next ~gseq))\n                                                    ret)\n                                                  firstb\n                                                  (if has-rest\n                                                    gfirst\n                                                    (list nth gvec n nil)))\n                                              (inc n)\n                                              (next bs)\n                                              seen-rest?))))\n                           ret))))\n                   pmap\n                   (fn [bvec b v]\n                     (let [gmap (gensym \"map__\")\n                           defaults (:or b)]\n                       (loop [ret (-> bvec (conj gmap) (conj v)\n                                      (conj gmap) (conj (list 'if (list seq? gmap)\n                                                              (list apply hash-map gmap)\n                                                              gmap))\n                                      ((fn [ret]\n                                         (if (:as b)\n                                           (conj ret (:as b) gmap)\n                                           ret))))\n                              bes (let [transforms\n                                        (reduce\n                                         (fn [transforms mk]\n                                           (if (keyword? mk)\n                                             (let [mkns (namespace mk)\n                                                   mkn (name mk)]\n                                               (cond (= mkn \"keys\")\n                                                     (assoc transforms mk\n                                                            #(keyword (or mkns (namespace %))\n                                                                      (name %)))\n                                                     (= mkn \"syms\")\n                                                     (assoc transforms mk\n                                                            #(symbol (or mkns\n                                                                         (namespace %))\n                                                                     (name %)))\n                                                     (= mkn \"strs\") (assoc transforms mk str)\n                                                     :else transforms))\n                                             transforms))\n                                         {}\n                                         (keys b))]\n                                    (reduce\n                                     (fn [bes entry]\n                                       (reduce #(assoc %1 %2 ((val entry) %2))\n                                               (dissoc bes (key entry))\n                                               ((key entry) bes)))\n                                     (dissoc b :as :or)\n                                     transforms))]\n                         (if (seq bes)\n                           (let [bb (key (first bes))\n                                 bk (val (first bes))\n                                 local (if #?(:clj  (instance? clojure.lang.Named bb)\n                                              :cljs (implements? INamed bb))\n                                         (with-meta (symbol nil (name bb)) (meta bb))\n                                         bb)\n                                 ;; if bk has metadata (:line, :column, etc)\n                                 ;; then it's a binding that needs eval\n                                 bk (if-not (meta bk)\n                                      (list 'quote bk)\n                                      bk)\n                                 bv (if-let [entry (find defaults local)]\n                                      (list get gmap bk (val entry))\n                                      (list get gmap bk))]\n                             (recur\n                              (if (or (keyword? bb) (symbol? bb)) ;(ident? bb)\n                                (-> ret (conj local bv))\n                                (pb ret bb bv))\n                              (next bes)))\n                           ret))))]\n               (cond\n                 (symbol? b) (-> bvec (conj (if (namespace b)\n                                              (symbol (name b)) b)) (conj v))\n                 (keyword? b) (-> bvec (conj (symbol (name b))) (conj v))\n                 (vector? b) (pvec bvec b v)\n                 (map? b) (pmap bvec b v)\n                 :else (throw\n                        #?(:clj (new Exception (str \"Unsupported binding form: \" b))\n                           :cljs (new js/Error (str \"Unsupported binding form: \" b)))))))\n        process-entry (fn [bvec b] (pb bvec (first b) (second b)))]\n    (if (every? symbol? (map first bents))\n      bindings\n      (if-let [kwbs (seq (filter #(keyword? (first %)) bents))]\n        (throw\n         #?(:clj (new Exception (str \"Unsupported binding key: \" (ffirst kwbs)))\n            :cljs (new js/Error (str \"Unsupported binding key: \" (ffirst kwbs)))))\n        (reduce process-entry [] bents)))))\n\n(defn destructure [b]\n  (destructure* b))\n"]}