{"version":3,"sources":["sci/impl/read.cljc"],"mappings":";AASA,AAAA;;;AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEFE;AAFJ,AAGG,AAAA,AAAAC,AAACC,AAAKF,AAASG;;;AAHlB,AAAA,AAAA,AAAML,AAIFE,AAAQI;AAJZ,AAKG,AAAA,AAAA,AAACF,AAAKF,AAAQI;;;AALjB,AAAA,AAAA,AAAMN,AAMFE,AAAQI,AAAOC,AAAWC;AAN9B,AAOG,AAAA,AAACJ,AAAKF,AAAQI,AAAOC,AAAWC;;;AAPnC,AAAA,AAAA,AAAMR,AAQFE,AAAQI,AAAOG,AAAYD,AAAUE;AARzC,AASG,AAAMC,AAAE,AAAA,AAAA,AAACC,AAAkBV,AAAQI,AAAaE;AAAhD,AACE,AAAI,AAACK,AAAAA,AAAAA,AAAoBC,AAAA,AAAAA,AAAA,AAAWH,AAAAA;AAClCH;;AACAG;;;;AAZP,AAAA,AAAA,AAAMX,AAaFE,AAAQa,AAAMT;AAblB,AAcG,AAACM,AAAkBV,AAAQI;;;AAd9B,AAAA,AAAA,AAAMN;;AAAN,AAgBA,AAAA,AAAMgB,AACFd,AAAQe;AADZ,AAEG,AAAMC,AAAO,AAACC,AAA4B,AAACC,AAA0BH;AAArE,AACE,AAACL,AAAkBV,AAAQgB;;AAEhC,AAAA,AAAMG,AAAMnB,AAAQoB;AAApB,AACE,AAAAC,AAAA,AAAApB,AAAEqB;AAAF,AAAA,AAAAD,AAAAA,AAAAA,AAAwBrB,AAAAA,AAAQoB,AAAAA;;AAElC,AAAA,AAAMG,AAAavB,AAAQe;AAA3B,AACE,AAAA,AAAAS,AAAA,AAAA,AAAAvB,AAAqByB,AAAiBA;;AAAtC,AAAA,AAAA,AACE,AAAMV,AAAO,AAACC,AAA4B,AAACC,AAA0BH;AAArE,AACE,AAAA,AAAOY;;AAAP,AACE,AAAMC,AAAE,AAAClB,AAAkBV,AAAQgB;AAAnC,AACE,AAAI,AAACL,AAAAA,AAAAA,AAAoBC,AAAA,AAAAA,AAAA,AAAWgB,AAAAA;AAClCD;;AACA,AAAO,AAACR,AAAKnB,AAAQ4B;;;;;;AAN/B,AAAA,AAAAH;;AASF,AAAA,AAAMI,AACHD;AADH,AAGW,AAAME,AAAc,AAACC,AAAgBH;AAArC,AACMI;AACAC,AAAgB,AAAAC,AAAmBJ,AACA,AAACK,AAAaH,AACdA,AAAQA;AAJjD,AAKE,AAACI,AAAkCH","names":["var_args","G__52577","sci.impl.read/read","js/Error","sci-ctx","cljs.core/deref","sci.impl.read.read","sci.impl.io/in","stream","eof-error?","eof-value","_eof-error?","_recursive?","v","sci.impl.parser.parse_next","sci.impl.utils/kw-identical?","sci.impl.parser/eof","_opts","sci.impl.read/read-string","s","reader","cljs.tools.reader.reader_types.indexing_push_back_reader","cljs.tools.reader.reader_types.string_push_back_reader","sci.impl.read/eval","form","fexpr__52615","sci.impl.utils/eval-form-state","sci.impl.read/load-string","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.impl.vars/current-ns","ret","x","sci.impl.read/source-logging-reader","string-reader","cljs.tools.reader.reader-types/string-reader","buf-len","pushback-reader","cljs.tools.reader.reader-types/PushbackReader","cljs.core.object_array","cljs.tools.reader.reader_types.source_logging_push_back_reader"],"sourcesContent":["(ns sci.impl.read\n  {:no-doc true}\n  (:refer-clojure :exclude [eval load-string read read-string read+string])\n  (:require [clojure.tools.reader.reader-types :as r]\n            [sci.impl.io :as io]\n            [sci.impl.parser :as parser]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn read\n  \"Added for compatibility. Does not support all of the options from the original yet.\"\n  ([sci-ctx]\n   (read sci-ctx @io/in))\n  ([sci-ctx stream]\n   (read sci-ctx stream true nil))\n  ([sci-ctx stream eof-error? eof-value]\n   (read sci-ctx stream eof-error? eof-value false))\n  ([sci-ctx stream _eof-error? eof-value _recursive?]\n   (let [v (parser/parse-next sci-ctx stream {:eof eof-value})]\n     (if (utils/kw-identical? parser/eof v)\n       eof-value\n       v)))\n  ([sci-ctx _opts stream]\n   (parser/parse-next sci-ctx stream)))\n\n(defn read-string\n  ([sci-ctx s]\n   (let [reader (r/indexing-push-back-reader (r/string-push-back-reader s))]\n     (parser/parse-next sci-ctx reader))))\n\n(defn eval [sci-ctx form]\n  (@utils/eval-form-state sci-ctx form))\n\n(defn load-string [sci-ctx s]\n  (vars/with-bindings {vars/current-ns @vars/current-ns}\n    (let [reader (r/indexing-push-back-reader (r/string-push-back-reader s))]\n      (loop [ret nil]\n        (let [x (parser/parse-next sci-ctx reader)]\n          (if (utils/kw-identical? parser/eof x)\n            ret\n            (recur (eval sci-ctx x))))))))\n\n;; used by source-fn\n(defn source-logging-reader\n  [x]\n  #?(:clj (r/source-logging-push-back-reader (r/push-back-reader x))\n     :cljs (let [string-reader (r/string-reader x)\n                 buf-len 1\n                 pushback-reader (r/PushbackReader. string-reader\n                                                    (object-array buf-len)\n                                                    buf-len buf-len)]\n             (r/source-logging-push-back-reader pushback-reader))))\n"]}