{"version":3,"sources":["rewrite_clj/zip/findz.cljs"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.findz/tag-predicate","p__46338","vec__46339","cljs.core.nth","seq46336","G__46337","cljs.core/first","cljs.core/next","self__4723__auto__","t","additional","p1__46335#","node","cljs.core._EQ_","rewrite-clj.zip.base/tag","p__46347","p__46348","map__46349","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__46350","rewrite-clj.zip.findz/in-range?","row","col","end-row","end-col","r","c","G__46361","rewrite-clj.zip.findz/find","js/Error","zloc","p?","rewrite_clj.zip.findz.find","rewrite-clj.zip.move/right","f","cljs.core/iterate","cljs.core.take_while","cljs.core/identity","cljs.core/complement","rewrite-clj.zip.move/end?","cljs.core.drop_while","G__46369","rewrite-clj.zip.findz/find-last-by-pos","pos","rewrite_clj.zip.findz.find_last_by_pos","cljs.core/constantly","clojure.zip/next","p1__46367#","cljs.core.filter","and__4115__auto__","clojure.zip/node","cljs.core/meta","cljs.core/last","rewrite-clj.zip.findz/find-depth-first","rewrite-clj.zip.move/next","G__46376","rewrite-clj.zip.findz/find-next","rewrite_clj.zip.findz.find_next","G__46377","rewrite-clj.zip.findz/find-next-depth-first","G__46380","rewrite-clj.zip.findz/find-tag","rewrite_clj.zip.findz.find_tag","p1__46378#","G__46382","rewrite-clj.zip.findz/find-next-tag","rewrite_clj.zip.findz.find_next_tag","rewrite-clj.zip.findz/find-tag-by-pos","p1__46383#","G__46387","rewrite-clj.zip.findz/find-token","rewrite_clj.zip.findz.find_token","rewrite_clj.zip.findz.tag_predicate","G__46389","rewrite-clj.zip.findz/find-next-token","rewrite_clj.zip.findz.find_next_token","G__46398","rewrite-clj.zip.findz/find-value","v","rewrite_clj.zip.findz.find_value","p1__46396#","cljs.core/set?","cljs.core.comp","rewrite-clj.zip.base/sexpr","G__46405","rewrite-clj.zip.findz/find-next-value","rewrite_clj.zip.findz.find_next_value"],"sourcesContent":["(ns rewrite-clj.zip.findz\n  (:refer-clojure :exclude [find])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.node :as node]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n;; ## Helpers\n\n(defn- tag-predicate\n  [t & [additional]]\n  (if additional\n    (fn [node]\n      (and (= (base/tag node) t)\n           (additional node)))\n    #(= (base/tag %) t)))\n\n\n(defn in-range? [{:keys [row col end-row end-col]} {r :row c :col}]\n  (and (>= r row)\n       (<= r end-row)\n       (if (= r row) (>= c col) true)\n       (if (= r end-row) (<= c end-col) true)))\n\n\n;; ## Find Operations\n\n(defn find\n  \"Find node satisfying the given predicate by repeatedly\n   applying the given movement function to the initial zipper\n   location.\"\n  ([zloc p?]\n   (find zloc m/right p?))\n  ([zloc f p?]\n   (->> zloc\n        (iterate f)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (drop-while (complement p?))\n        (first))))\n\n\n\n(defn find-last-by-pos\n  \"Find last node (if more than one node) that is in range of pos and\n  satisfying the given predicate depth first from initial zipper\n  location.\"\n  ([zloc pos] (find-last-by-pos zloc pos (constantly true)))\n  ([zloc pos p?]\n   (->> zloc\n        (iterate z/next)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (filter #(and (p? %)\n                      (in-range? (-> % z/node meta) pos)))\n        last)))\n\n\n(defn find-depth-first\n  \"Find node satisfying the given predicate by traversing\n   the zipper in a depth-first way.\"\n  [zloc p?]\n  (find zloc m/next p?))\n\n\n(defn find-next\n  \"Find node other than the current zipper location matching\n   the given predicate by applying the given movement function\n   to the initial zipper location.\"\n  ([zloc p?]\n   (find-next zloc m/right p?))\n  ([zloc f p?]\n   (some-> zloc f (find f p?))))\n\n(defn find-next-depth-first\n  \"Find node other than the current zipper location matching\n   the given predicate by traversing the zipper in a\n   depth-first way.\"\n  [zloc p?]\n  (find-next zloc m/next p?))\n\n(defn find-tag\n  \"Find node with the given tag by repeatedly applying the given\n   movement function to the initial zipper location.\"\n  ([zloc t]\n   (find-tag zloc m/right t))\n  ([zloc f t]\n   (find zloc f #(= (base/tag %) t))))\n\n(defn find-next-tag\n  \"Find node other than the current zipper location with the\n   given tag by repeatedly applying the given movement function to\n   the initial zipper location.\"\n  ([zloc t]\n   (find-next-tag zloc m/right t))\n  ([zloc f t]\n   (->> (tag-predicate t)\n        (find-next zloc f))))\n\n\n(defn find-tag-by-pos\n  \"Find node with the given tag and pos depth-first from initial zipper location.\"\n  ([zloc pos t]\n   (find-last-by-pos zloc pos #(= (base/tag %) t))))\n\n\n\n(defn find-token\n  \"Find token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc p?]\n   (find-token zloc m/right p?))\n  ([zloc f p?]\n   (->> (tag-predicate :token p?)\n        (find zloc f))))\n\n(defn find-next-token\n  \"Find next token node matching the given predicate by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc p?]\n   (find-next-token zloc m/right p?))\n  ([zloc f p?]\n   (find-token (f zloc) f p?)))\n\n(defn find-value\n  \"Find token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc v]\n   (find-value zloc m/right v))\n  ([zloc f v]\n   (let [p? (if (set? v)\n              (comp v base/sexpr)\n              #(= (base/sexpr %) v))]\n     (find-token zloc f p?))))\n\n(defn find-next-value\n  \"Find next token node whose value matches the given one by applying the\n   given movement function to the initial zipper location, defaulting\n   to `right`.\"\n  ([zloc v]\n   (find-next-value zloc m/right v))\n  ([zloc f v]\n   (find-value (f zloc) f v)))\n"]}