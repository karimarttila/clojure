{"version":3,"sources":["sci/impl/utils.cljc"],"mappings":"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","names":["cljs.core.derive","sci.impl.utils/constant?","x","cljs.core/Keyword","cljs.core/boolean?","sci.impl.utils/eval?","G__48169","cljs.core/meta","sci.impl.utils/kw-identical?","cljs.core/keyword-identical?","var_args","G__48183","sci.impl.utils/mark-eval-call","js/Error","expr","cljs.core.vary_meta","m","cljs.core.assoc","cljs.core/deref","sci.impl.vars/current-ns","sci.impl.vars/current-file","extra-key","extra-val","sci.impl.utils/mark-eval","G__48191","sci.impl.utils/throw-error-with-location","msg","iobj","sci.impl.utils.throw_error_with_location","data","map__48194","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","line","cljs.core.get","column","file","cljs.core.ex_info","cljs.core.merge","sci.impl.utils/*in-try*","sci.impl.utils/macro?","f","temp__5735__auto__","or__4126__auto__","sci.impl.utils/needs-ctx","cljs.core.symbol","sci.impl.utils/evaluate","sci.impl.utils/rethrow-with-location-of-node","ctx","e","node","cljs.core/seqable?","cljs.core/first","fm","G__48224","op","special?","cljs.core/Symbol","cljs.core/not","cljs.core.swap_BANG_","cljs.core/update-in","vt","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj","cljs.core/volatile!","cljs.core/List","d","cljs.core/ex-data","cljs.core.isa_QMARK_","map__48225","ex-msg","and__4115__auto__","clojure.string/replace","new-exception","base","cljs.core/Delay","v","cljs.core.get_in","phase","sci.impl.utils/iobj?","obj","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.utils/vary-meta*","seq48233","G__48234","cljs.core/next","G__48235","self__4723__auto__","args","cljs.core/vary-meta","sci.impl.utils/merge-meta","temp__5733__auto__","cljs.core/with-meta","sci.impl.utils/strip-core-ns","sym","G__48246","cljs.core/namespace","cljs.core/name","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/walk*","inner","form","cljs.core/list?","cljs.core/list","cljs.core.map","cljs.core/map-entry?","cljs.core/MapEntry","G__48255","cljs.core/key","G__48256","cljs.core/val","cljs.core/seq?","cljs.core.doall","cljs.core/record?","cljs.core.reduce","r","cljs.core/coll?","cljs.core.into","cljs.core/empty","sci.impl.utils/prewalk","cljs.core.partial","sci.impl.utils/namespace-object","env","ns-sym","create?","attr-map","env*","ns-map","ns-obj","sci.impl.vars/->SciNamespace","cljs.core/assoc-in","sci.impl.utils/set-namespace!","sci.impl.types/setVal","sci.impl.utils/eval-form-state","sci.impl.utils/eval-require-state","sci.impl.utils/eval-use-state","sci.impl.utils/eval-resolve-state","sci.impl.utils/eval-refer-state","sci.impl.utils/macroexpand*","sci.impl.utils/macroexpand-1*","sci.impl.utils/eval*","sci.impl.utils/eval-do*","sci.impl.utils/eval-fn","sci.impl.utils/eval-string*","sci.impl.utils/lookup","sci.impl.utils/split-when","pred","coll","cljs.core/LazySeq","s","cljs.core/seq","fst","cljs.core/complement","run","cljs.core/cons","p1__48275#","cljs.core.take_while","G__48276","G__48277","cljs.core.drop","cljs.core/count","sci.impl.utils/ana-macros"],"sourcesContent":["(ns sci.impl.utils\n  {:no-doc true}\n  (:require [clojure.string :as str]\n            [sci.impl.types :as t]\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(derive :sci.error/realized-beyond-max :sci/error)\n(derive :sci.error/parse :sci/error)\n\n(defn constant? [x]\n  (or (number? x) (string? x) (keyword? x) (boolean? x)))\n\n(defn eval? [x]\n  (some-> x meta :sci.impl/op))\n\n(def kw-identical? #?(:clj identical? :cljs keyword-identical?))\n\n(defn mark-eval-call\n  ([expr]\n   (vary-meta\n    expr\n    (fn [m]\n      (-> m\n          (assoc :sci.impl/op :call)\n          (assoc :ns @vars/current-ns)\n          (assoc :file @vars/current-file)))))\n  ([expr extra-key extra-val]\n   (vary-meta\n    expr\n    (fn [m]\n      (-> m\n          (assoc :sci.impl/op :call)\n          (assoc :ns @vars/current-ns)\n          (assoc :file @vars/current-file)\n          (assoc extra-key extra-val))))))\n\n(defn mark-eval\n  [expr]\n  (vary-meta\n   expr\n   (fn [m]\n     (assoc m :sci.impl/op :eval))))\n\n(defn throw-error-with-location\n  ([msg iobj] (throw-error-with-location msg iobj {}))\n  ([msg iobj data]\n   (let [{:keys [:line :column :file]\n          :or {file @vars/current-file}} (meta iobj)]\n     (throw (ex-info msg (merge {:type :sci/error\n                                 :line line\n                                 :column column\n                                 :file file} data))))))\n\n(def ^:dynamic *in-try* false)\n\n(defn macro? [f]\n  (when-let [m (meta f)]\n    (or (:sci/macro m)\n        (:macro m))))\n\n(def needs-ctx (symbol \"needs-ctx\"))\n(def evaluate (symbol \"eval\"))\n\n(defn rethrow-with-location-of-node [ctx ^Throwable e node]\n  (let [m (meta node)\n        f (when (seqable? node) (first node))\n        fm (or (:sci.impl/f-meta node) (some-> f meta))\n        op (when fm (.get ^java.util.Map m :sci.impl/op))\n        special? (or\n                  ;; special call like def\n                  (and (symbol? f) (not op))\n                  ;; anonymous function\n                  (kw-identical? :fn op)\n                  ;; special thing like require\n                  (identical? needs-ctx op))]\n    (when (not special?)\n      (swap! (:env ctx) update-in [:sci.impl/callstack (:id ctx)]\n             (fn [vt]\n               (if vt\n                 (do (vswap! vt conj node)\n                     vt)\n                 (volatile! (list node))))))\n    (if-not *in-try*\n      (let [d (ex-data e)]\n        (if (isa? (:type d) :sci/error)\n          (throw e)\n          (let [ex-msg #?(:clj (or (.getMessage e))\n                          :cljs (.-message e))\n                {:keys [:line :column :file]\n                 :or {line (:line ctx)\n                      column (:column ctx)}} (meta node)\n                ex-msg (if (and ex-msg (:name fm))\n                         (str/replace ex-msg #\"(sci\\.impl\\.)?fns/fun/[a-zA-Z0-9-]+--\\d+\"\n                                      (str (:name fm)))\n                         ex-msg)]\n            (if (and line column)\n              (let [m ex-msg\n                    new-exception\n                    (let [d (ex-data e)\n                          base {:type :sci/error\n                                :line line\n                                :column column\n                                :message m\n                                :sci.impl/callstack (delay (when-let [v (get-in @(:env ctx) [:sci.impl/callstack (:id ctx)])]\n                                                    @v))\n                                :file file\n                                :locals (:bindings ctx)}\n                          phase (:phase ctx)\n                          base (if phase\n                                 (assoc base :phase phase)\n                                 base)]\n                      (ex-info m (merge base d) e))]\n                (throw new-exception))\n              (throw e))))\n        (throw e))\n      (throw e))))\n\n(defn iobj? [obj]\n  (and #?(:clj (instance? clojure.lang.IObj obj)\n          :cljs (implements? IWithMeta obj))\n       (meta obj)))\n\n(defn vary-meta*\n  \"Only adds metadata to obj if d is not nil and if obj already has meta\"\n  [obj f & args]\n  (if (iobj? obj)\n    (apply vary-meta obj f args)\n    obj))\n\n(defn merge-meta\n  \"Only adds metadata to obj if d is not nil and if meta on obj isn't already nil.\"\n  [obj d]\n  (if (and d #?(:clj (instance? clojure.lang.IObj obj)\n                :cljs (implements? IWithMeta obj)))\n    (if-let [m (meta obj)]\n      (do\n        nil\n        ;; this should not happen, turn on for debugging\n        #_(when (identical? m d) (prn :identical obj d m))\n        (with-meta obj (merge m d)))\n      obj)\n    obj))\n\n(defn strip-core-ns [sym]\n  (case (namespace sym)\n    (\"clojure.core\" \"cljs.core\") (symbol (name sym))\n    sym))\n\n(def allowed-loop (symbol \"loop\"))\n(def allowed-recur (symbol \"recur\"))\n\n(defn walk*\n  [inner form]\n  (cond\n    (:sci.impl/op (meta form)) form\n    (list? form) (with-meta (apply list (map inner form))\n                   (meta form))\n    #?(:clj (instance? clojure.lang.IMapEntry form) :cljs (map-entry? form))\n    #?(:clj (clojure.lang.MapEntry/create (inner (key form)) (inner (val form)))\n       :cljs (MapEntry. (inner (key form)) (inner (val form)) nil))\n    (seq? form) (with-meta (doall (map inner form))\n                  (meta form))\n    #?(:clj (instance? clojure.lang.IRecord form)\n       :cljs (record? form))\n    (reduce (fn [r x] (conj r (inner x))) form form)\n    (coll? form) (into (empty form) (map inner form))\n    :else form))\n\n(defn prewalk\n  \"Prewalk with metadata preservation. Does not prewalk :sci.impl/op nodes.\"\n  [f form]\n  (walk* (partial prewalk f) (f form)))\n\n(defn namespace-object\n  \"Fetches namespaces from env if it exists. Else, if `create?`,\n  produces one regardless of the existince of the namespace in env and\n  adds it to env before returning it.\"\n  [env ns-sym create? attr-map]\n  (let [env* @env\n        ns-map (get-in env* [:namespaces ns-sym])]\n    (or (:obj ns-map)\n        (when (or ns-map create?)\n          (let [ns-obj (vars/->SciNamespace ns-sym attr-map)]\n            (swap! env assoc-in [:namespaces ns-sym :obj] ns-obj)\n            ns-obj)))))\n\n(defn set-namespace! [ctx ns-sym attr-map]\n  (let [env (:env ctx)\n        attr-map (merge (meta ns-sym) attr-map)\n        ns-obj (namespace-object env ns-sym true attr-map)]\n    (t/setVal vars/current-ns ns-obj)))\n\n(def eval-form-state (volatile! nil))\n(def eval-require-state (volatile! nil))\n(def eval-use-state (volatile! nil))\n(def eval-resolve-state (volatile! nil))\n(def eval-refer-state (volatile! nil))\n(def macroexpand* (volatile! nil))\n(def macroexpand-1* (volatile! nil))\n(def eval* (volatile! nil))\n(def eval-do* (volatile! nil))\n(def eval-fn (volatile! nil))\n(def eval-string* (volatile! nil))\n(def lookup (volatile! nil))\n\n(defn split-when\n  \"Like partition-by but splits collection only when `pred` returns\n  a truthy value. E.g. `(split-when odd? [1 2 3 4 5]) => ((1 2) (3 4) (5))`\"\n  [pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [fst (first s)\n           f (complement pred)\n           run (cons fst (take-while #(f %) (next s)))]\n       (cons run (split-when pred (lazy-seq (drop (count run) s))))))))\n\n(def ana-macros\n  '#{do if and or let fn fn* def defn\n     comment loop lazy-seq for doseq case try defmacro\n     declare expand-dot* expand-constructor new . import in-ns ns var\n     set! resolve #_#_macroexpand-1 macroexpand})\n"]}