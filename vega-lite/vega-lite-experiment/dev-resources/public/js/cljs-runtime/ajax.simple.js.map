{"version":3,"sources":["ajax/simple.cljc"],"mappings":";AAYA,AAAA,AAAMA,AAAkBC;AAAxB,AACE,AAAI,AAAAC,AAAUD;AACZ,AAACE,AAAe,AAACC,AAAKH;;AACtBA;;;AAEJ,AAAA,AAAMI,AAAkBC,AAASC;AAAjC,AACE,AAACC,AAAqBD,AAAYD;;AAEpC,AAAA,AAAA,AAAAG,AAAgBE;AAAhB,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAgBD,AAAYE,AAAQC,AAAaR;AAAjD,AACE,AAAMS,AAAU,AAACC,AAAOX,AAAiBC,AAASQ;AAAlD,AASE,AAACD,AAAAA,AAAAA,AAAQE,AAAAA;;;AAVb,AAAA,AAAA,AAAgBJ,AAAYE,AAAQC;AAApC,AAAA,AAAiDR;AAAjD,AACE,AAAMS,AAAU,AAACC,AAAOX,AAAiBC,AAASQ;AAAlD,AASE,AAACD,AAAAA,AAAAA,AAAQE,AAAAA;;;;AAVb,AAAA,AAAA,AAAgBJ,AAAYE;AAA5B,AAAA,AAAoCC,AAAaR;AAAjD,AACE,AAAMS,AAAU,AAACC,AAAOX,AAAiBC,AAASQ;AAAlD,AASE,AAACD,AAAAA,AAAAA,AAAQE,AAAAA;;;;AAVb,AAAA,AAAA,AAAgBJ;;AAAhB,AAYA,AAAA,AAAAM,AAAMM,AAAcT;AAApB,AAAA,AAAAI,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAyCL;AAAzC,AACE,AAAIA;AACF,AAACW,AAAWX,AAAQC;;AACpB,AAAA,AAACW;;;AAEL,AAAKC,AAAqB,AAAA,AAACC;AAE3B,AAAA,AAAMC,AAAmBC;AAAzB,AACE,AAAMC,AAAgB,AAACC,AAAsBC,AAAyBH;AAAtE,AACMA,AACA,AAAA,AAACI,AAAejC,AAChB,AAAA,AAAA,AAAAkC,AAACD;AAAD,AACS,AAAA,AAACE,AAAQL,AACD,AAAAM,AAAAF;AAAA,AAAA,AAAAE;AAAAA;;AAAA,AAAAC,AAAOX;;AACPY;;;AAEzB,AAAA,AAAMC;AAAN,AAEY,AAAKC;;AAEjB,AAAA,AAAMC,AAAiBZ,AAAQtB;AAA/B,AAAA;AAEE,AAACmC,AAAoBnC,AAAYsB;;AAEnC,AAAA,AAAAc,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzB,AAAA,AAAAyB,AAAA,AAAA,AAAA,AAAA,AAAAxB,AAAAC,AAAAuB,AAAAA;AAAAA,AAAkDf;AAAlD,AAAAP,AAAAsB,AAAA,AAAgC9B;AAAhC,AAAA;AAEE,AAAMe,AAAQ,AAACb,AAAOyB,AAAgBZ,AAAQf;AAExCD,AAAQ,AAACU,AAAa,AAACuB,AAAQhC,AAAce;AAE7CkB,AAAI,AAAAX,AAAI,AAAA,AAAMP;AAAV,AAAA,AAAAO;AAAAA;;AAAmB,AAACG;;;AAJ9B,AAKE,AAACS,AAAoBD,AAAIlB,AAAQhB;;AAErC,AAAA,AAAMoC,AAAcpB;AAApB,AACE,AAAA,AAAIA,AAAQD,AAAkBiB","names":["ajax.simple/normalize-method","method","cljs.core/Keyword","clojure.string/upper-case","cljs.core/name","ajax.simple/process-response","response","interceptor","ajax.protocols/-process-response","var_args","G__75827","ajax.simple/js-handler","js/Error","handler","interceptors","processed","cljs.core.reduce","p__75836","map__75838","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","ajax.simple/base-handler","ajax.simple.js_handler","ajax.util/throw-error","ajax.simple/default-interceptors","cljs.core.atom","ajax.simple/normalize-request","request","response-format","ajax.interceptors/get-response-format","ajax.formats/detect-response-format","cljs.core.update","p1__75843#","cljs.core.concat","or__4126__auto__","cljs.core/deref","ajax.interceptors/request-interceptors","ajax.simple/new-default-api","js/goog.net.XhrIo","ajax.simple/process-request","ajax.protocols/-process-request","p__75848","map__75849","ajax.simple/raw-ajax-request","cljs.core/reverse","api","ajax.protocols/-js-ajax-request","ajax.simple/ajax-request"],"sourcesContent":["(ns ajax.simple\n    (:require [clojure.string :as str]\n              [ajax.protocols :as pr]\n              [ajax.interceptors :as i]\n              [ajax.formats :as f]\n              [ajax.util :as u]\n              #? (:clj [ajax.apache :as a])\n              #? (:clj [ajax.macros :as m]\n                  :cljs [goog.net.XhrIo :as xhr]))\n    #? (:clj (:import [java.io Closeable])\n        :cljs (:require-macros [ajax.macros :as m])))\n\n(defn normalize-method [method]\n  (if (keyword? method)\n    (str/upper-case (name method))\n    method))\n\n(defn process-response [response interceptor]\n  (pr/-process-response interceptor response))\n\n(m/defn-curried js-handler [handler interceptors response]\n  (let [processed (reduce process-response response interceptors)]\n    ;;; This requires a bit of explanation: if we return a closeable,\n    ;;; it should be wrapping the original response, so we _don't_\n    ;;; close the original response stream\n    ;;; If you're writing a weird interceptor that doesn't do this,\n    ;;; remember to close the original stream yourself\n    #? (:clj (if (and response\n                      (instance? Closeable (second processed)))\n               (.close ^Closeable (pr/-body response))))\n    (handler processed)))\n\n(defn base-handler [interceptors {:keys [handler]}]\n  (if handler\n    (js-handler handler interceptors)\n    (u/throw-error \"No ajax handler provided.\")))\n\n(def default-interceptors (atom []))\n\n(defn normalize-request [request]\n  (let [response-format (i/get-response-format f/detect-response-format request)]\n    (-> request\n        (update :method normalize-method)\n        (update :interceptors\n                #(concat [response-format]\n                         (or % @default-interceptors)\n                         i/request-interceptors)))))\n\n(defn new-default-api []\n  #? (:clj  (a/new-api)\n      :cljs (new goog.net.XhrIo)))\n\n(defn process-request [request interceptor]\n  \"-process-request with the arguments flipped for use in reduce\"\n  (pr/-process-request interceptor request))\n\n(defn raw-ajax-request [{:keys [interceptors] :as request}]\n  \"The main request function.\"\n  (let [request (reduce process-request request interceptors)\n        ;;; Pass the request through the interceptors\n        handler (base-handler (reverse interceptors) request)\n        ;;; Set up a handler that passes it back through\n        api (or (:api request) (new-default-api))]\n    (pr/-js-ajax-request api request handler)))\n\n(defn ajax-request [request]\n  (-> request normalize-request raw-ajax-request))\n"]}