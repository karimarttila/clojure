{"version":3,"sources":["rewrite_clj/node/stringz.cljs"],"mappings":"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","names":["rewrite-clj.node.stringz/wrap-string","v","rewrite-clj.node.stringz/join-lines","lines","clojure.string.join","this__4380__auto__","k__4381__auto__","this__4382__auto__","k45845","else__4383__auto__","G__45854","cljs.core/Keyword","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__45855","vec__45856","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__45844","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this45846","other45847","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__45874","cljs.core/keyword-identical?","expr__45875","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.stringz/StringNode","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__45848","extmap__4419__auto__","G__45898","cljs.core/record?","rewrite-clj.node.stringz/->StringNode","rewrite-clj.node.stringz/map->StringNode","_","cljs.core/next","cljs.core.map","cljs.core.comp","cljs.tools.reader/read-string","cljs.core/+","this","rewrite-clj.node.stringz/string-node"],"sourcesContent":["(ns rewrite-clj.node.stringz\n  (:require [rewrite-clj.node.protocols :as node]\n            [cljs.tools.reader :as r]\n            [clojure.string :as s]))\n\n;; ## Node\n\n(defn- wrap-string\n  [v]\n  (str \"\\\"\" v \"\\\"\"))\n\n(defn- join-lines\n  [lines]\n  (s/join \"\\n\" lines))\n\n(defrecord StringNode [lines]\n  node/Node\n  (tag [_]\n    (if (next lines)\n      :multi-line\n      :token))\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (join-lines\n      (map\n        (comp r/read-string wrap-string)\n        lines)))\n  (length [_]\n    (+ 2 (reduce + (map count lines))))\n  (string [_]\n    (wrap-string (join-lines lines)))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;(node/make-printable! StringNode)\n\n;; ## Constructors\n\n(defn string-node\n  \"Create node representing a string value.\n   Takes either a seq of strings or a single one.\"\n  [lines]\n  (if (string? lines)\n    (->StringNode [lines])\n    (->StringNode lines)))\n"]}