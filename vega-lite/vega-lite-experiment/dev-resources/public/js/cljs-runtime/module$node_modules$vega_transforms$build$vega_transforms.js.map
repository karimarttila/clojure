{
"version":3,
"file":"module$node_modules$vega_transforms$build$vega_transforms.js",
"lineCount":114,
"mappings":"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",
"sources":["node_modules/vega-transforms/build/vega-transforms.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_transforms$build$vega_transforms\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-dataflow'), require('vega-statistics'), require('d3-array'), require('vega-time')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-dataflow', 'vega-statistics', 'd3-array', 'vega-time'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega, global.d3, global.vega));\n}(this, (function (exports, vegaUtil, vegaDataflow, vegaStatistics, d3Array, vegaTime) { 'use strict';\n\n  function multikey(f) {\n    return x => {\n      const n = f.length;\n      let i = 1,\n          k = String(f[0](x));\n\n      for (; i < n; ++i) {\n        k += '|' + f[i](x);\n      }\n\n      return k;\n    };\n  }\n  function groupkey(fields) {\n    return !fields || !fields.length ? function () {\n      return '';\n    } : fields.length === 1 ? fields[0] : multikey(fields);\n  }\n\n  function measureName(op, field, as) {\n    return as || op + (!field ? '' : '_' + field);\n  }\n\n  const noop = () => {};\n\n  const base_op = {\n    init: noop,\n    add: noop,\n    rem: noop,\n    idx: 0\n  };\n  const AggregateOps = {\n    values: {\n      init: m => m.cell.store = true,\n      value: m => m.cell.data.values(),\n      idx: -1\n    },\n    count: {\n      value: m => m.cell.num\n    },\n    __count__: {\n      value: m => m.missing + m.valid\n    },\n    missing: {\n      value: m => m.missing\n    },\n    valid: {\n      value: m => m.valid\n    },\n    sum: {\n      init: m => m.sum = 0,\n      value: m => m.sum,\n      add: (m, v) => m.sum += +v,\n      rem: (m, v) => m.sum -= v\n    },\n    product: {\n      init: m => m.product = 1,\n      value: m => m.valid ? m.product : undefined,\n      add: (m, v) => m.product *= v,\n      rem: (m, v) => m.product /= v\n    },\n    mean: {\n      init: m => m.mean = 0,\n      value: m => m.valid ? m.mean : undefined,\n      add: (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n      rem: (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n    },\n    average: {\n      value: m => m.valid ? m.mean : undefined,\n      req: ['mean'],\n      idx: 1\n    },\n    variance: {\n      init: m => m.dev = 0,\n      value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n      add: (m, v) => m.dev += m.mean_d * (v - m.mean),\n      rem: (m, v) => m.dev -= m.mean_d * (v - m.mean),\n      req: ['mean'],\n      idx: 1\n    },\n    variancep: {\n      value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stdev: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stdevp: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stderr: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    distinct: {\n      value: m => m.cell.data.distinct(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    ci0: {\n      value: m => m.cell.data.ci0(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    ci1: {\n      value: m => m.cell.data.ci1(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    median: {\n      value: m => m.cell.data.q2(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    q1: {\n      value: m => m.cell.data.q1(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    q3: {\n      value: m => m.cell.data.q3(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    min: {\n      init: m => m.min = undefined,\n      value: m => m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min,\n      add: (m, v) => {\n        if (v < m.min || m.min === undefined) m.min = v;\n      },\n      rem: (m, v) => {\n        if (v <= m.min) m.min = NaN;\n      },\n      req: ['values'],\n      idx: 4\n    },\n    max: {\n      init: m => m.max = undefined,\n      value: m => m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max,\n      add: (m, v) => {\n        if (v > m.max || m.max === undefined) m.max = v;\n      },\n      rem: (m, v) => {\n        if (v >= m.max) m.max = NaN;\n      },\n      req: ['values'],\n      idx: 4\n    },\n    argmin: {\n      init: m => m.argmin = undefined,\n      value: m => m.argmin || m.cell.data.argmin(m.get),\n      add: (m, v, t) => {\n        if (v < m.min) m.argmin = t;\n      },\n      rem: (m, v) => {\n        if (v <= m.min) m.argmin = undefined;\n      },\n      req: ['min', 'values'],\n      idx: 3\n    },\n    argmax: {\n      init: m => m.argmax = undefined,\n      value: m => m.argmax || m.cell.data.argmax(m.get),\n      add: (m, v, t) => {\n        if (v > m.max) m.argmax = t;\n      },\n      rem: (m, v) => {\n        if (v >= m.max) m.argmax = undefined;\n      },\n      req: ['max', 'values'],\n      idx: 3\n    }\n  };\n  const ValidAggregateOps = Object.keys(AggregateOps);\n\n  function measure(key, value) {\n    return out => vegaUtil.extend({\n      name: key,\n      out: out || key\n    }, base_op, value);\n  }\n\n  ValidAggregateOps.forEach(key => {\n    AggregateOps[key] = measure(key, AggregateOps[key]);\n  });\n  function createMeasure(op, name) {\n    return AggregateOps[op](name);\n  }\n\n  function compareIndex(a, b) {\n    return a.idx - b.idx;\n  }\n\n  function resolve(agg) {\n    const map = {};\n    agg.forEach(a => map[a.name] = a);\n\n    const getreqs = a => {\n      if (!a.req) return;\n      a.req.forEach(key => {\n        if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n      });\n    };\n\n    agg.forEach(getreqs);\n    return Object.values(map).sort(compareIndex);\n  }\n\n  function init() {\n    this.valid = 0;\n    this.missing = 0;\n\n    this._ops.forEach(op => op.init(this));\n  }\n\n  function add(v, t) {\n    if (v == null || v === '') {\n      ++this.missing;\n      return;\n    }\n\n    if (v !== v) return;\n    ++this.valid;\n\n    this._ops.forEach(op => op.add(this, v, t));\n  }\n\n  function rem(v, t) {\n    if (v == null || v === '') {\n      --this.missing;\n      return;\n    }\n\n    if (v !== v) return;\n    --this.valid;\n\n    this._ops.forEach(op => op.rem(this, v, t));\n  }\n\n  function set(t) {\n    this._out.forEach(op => t[op.out] = op.value(this));\n\n    return t;\n  }\n\n  function compileMeasures(agg, field) {\n    const get = field || vegaUtil.identity,\n          ops = resolve(agg),\n          out = agg.slice().sort(compareIndex);\n\n    function ctr(cell) {\n      this._ops = ops;\n      this._out = out;\n      this.cell = cell;\n      this.init();\n    }\n\n    ctr.prototype.init = init;\n    ctr.prototype.add = add;\n    ctr.prototype.rem = rem;\n    ctr.prototype.set = set;\n    ctr.prototype.get = get;\n    ctr.fields = agg.map(op => op.out);\n    return ctr;\n  }\n\n  function TupleStore(key) {\n    this._key = key ? vegaUtil.field(key) : vegaDataflow.tupleid;\n    this.reset();\n  }\n  const prototype$1 = TupleStore.prototype;\n\n  prototype$1.reset = function () {\n    this._add = [];\n    this._rem = [];\n    this._ext = null;\n    this._get = null;\n    this._q = null;\n  };\n\n  prototype$1.add = function (v) {\n    this._add.push(v);\n  };\n\n  prototype$1.rem = function (v) {\n    this._rem.push(v);\n  };\n\n  prototype$1.values = function () {\n    this._get = null;\n    if (this._rem.length === 0) return this._add;\n    const a = this._add,\n          r = this._rem,\n          k = this._key,\n          n = a.length,\n          m = r.length,\n          x = Array(n - m),\n          map = {};\n    let i, j, v; // use unique key field to clear removed values\n\n    for (i = 0; i < m; ++i) {\n      map[k(r[i])] = 1;\n    }\n\n    for (i = 0, j = 0; i < n; ++i) {\n      if (map[k(v = a[i])]) {\n        map[k(v)] = 0;\n      } else {\n        x[j++] = v;\n      }\n    }\n\n    this._rem = [];\n    return this._add = x;\n  }; // memoizing statistics methods\n\n\n  prototype$1.distinct = function (get) {\n    const v = this.values(),\n          map = {};\n    let n = v.length,\n        count = 0,\n        s;\n\n    while (--n >= 0) {\n      s = get(v[n]) + '';\n\n      if (!vegaUtil.hasOwnProperty(map, s)) {\n        map[s] = 1;\n        ++count;\n      }\n    }\n\n    return count;\n  };\n\n  prototype$1.extent = function (get) {\n    if (this._get !== get || !this._ext) {\n      const v = this.values(),\n            i = vegaUtil.extentIndex(v, get);\n      this._ext = [v[i[0]], v[i[1]]];\n      this._get = get;\n    }\n\n    return this._ext;\n  };\n\n  prototype$1.argmin = function (get) {\n    return this.extent(get)[0] || {};\n  };\n\n  prototype$1.argmax = function (get) {\n    return this.extent(get)[1] || {};\n  };\n\n  prototype$1.min = function (get) {\n    const m = this.extent(get)[0];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype$1.max = function (get) {\n    const m = this.extent(get)[1];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype$1.quartile = function (get) {\n    if (this._get !== get || !this._q) {\n      this._q = vegaStatistics.quartiles(this.values(), get);\n      this._get = get;\n    }\n\n    return this._q;\n  };\n\n  prototype$1.q1 = function (get) {\n    return this.quartile(get)[0];\n  };\n\n  prototype$1.q2 = function (get) {\n    return this.quartile(get)[1];\n  };\n\n  prototype$1.q3 = function (get) {\n    return this.quartile(get)[2];\n  };\n\n  prototype$1.ci = function (get) {\n    if (this._get !== get || !this._ci) {\n      this._ci = vegaStatistics.bootstrapCI(this.values(), 1000, 0.05, get);\n      this._get = get;\n    }\n\n    return this._ci;\n  };\n\n  prototype$1.ci0 = function (get) {\n    return this.ci(get)[0];\n  };\n\n  prototype$1.ci1 = function (get) {\n    return this.ci(get)[1];\n  };\n\n  /**\n   * Group-by aggregation operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n   * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n   * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n   * @param {boolean} [params.cross=false] - A flag indicating that the full\n   *   cross-product of groupby values should be generated, including empty cells.\n   *   If true, the drop parameter is ignored and empty cells are retained.\n   * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n   */\n\n  function Aggregate(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this._adds = []; // array of added output tuples\n\n    this._mods = []; // array of modified output tuples\n\n    this._alen = 0; // number of active added tuples\n\n    this._mlen = 0; // number of active modified tuples\n\n    this._drop = true; // should empty aggregation cells be removed\n\n    this._cross = false; // produce full cross-product of group-by values\n\n    this._dims = []; // group-by dimension accessors\n\n    this._dnames = []; // group-by dimension names\n\n    this._measures = []; // collection of aggregation monoids\n\n    this._countOnly = false; // flag indicating only count aggregation\n\n    this._counts = null; // collection of count fields\n\n    this._prev = null; // previous aggregation cells\n\n    this._inputs = null; // array of dependent input tuple field names\n\n    this._outputs = null; // array of output tuple field names\n  }\n  Aggregate.Definition = {\n    'type': 'Aggregate',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidAggregateOps\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'drop',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'cross',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(Aggregate, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const aggr = this,\n            out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n            mod = _.modified();\n\n      aggr.stamp = out.stamp;\n\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        aggr._prev = aggr.value;\n        aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        aggr.value = aggr.value || aggr.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      } // Indicate output fields and return aggregate tuples.\n\n\n      out.modifies(aggr._outputs); // Should empty cells be dropped?\n\n      aggr._drop = _.drop !== false; // If domain cross-product requested, generate empty cells as needed\n      // and ensure that empty cells are not dropped\n\n      if (_.cross && aggr._dims.length > 1) {\n        aggr._drop = false;\n        aggr.cross();\n      }\n\n      if (pulse.clean() && aggr._drop) {\n        out.clean(true).runAfter(() => this.clean());\n      }\n\n      return aggr.changes(out);\n    },\n\n    cross() {\n      const aggr = this,\n            curr = aggr.value,\n            dims = aggr._dnames,\n            vals = dims.map(() => ({})),\n            n = dims.length; // collect all group-by domain values\n\n      function collect(cells) {\n        let key, i, t, v;\n\n        for (key in cells) {\n          t = cells[key].tuple;\n\n          for (i = 0; i < n; ++i) {\n            vals[i][v = t[dims[i]]] = v;\n          }\n        }\n      }\n\n      collect(aggr._prev);\n      collect(curr); // iterate over key cross-product, create cells as needed\n\n      function generate(base, tuple, index) {\n        const name = dims[index],\n              v = vals[index++];\n\n        for (const k in v) {\n          const key = base ? base + '|' + k : k;\n          tuple[name] = v[k];\n          if (index < n) generate(key, tuple, index);else if (!curr[key]) aggr.cell(key, tuple);\n        }\n      }\n\n      generate('', {}, 0);\n    },\n\n    init(_) {\n      // initialize input and output fields\n      const inputs = this._inputs = [],\n            outputs = this._outputs = [],\n            inputMap = {};\n\n      function inputVisit(get) {\n        const fields = vegaUtil.array(vegaUtil.accessorFields(get)),\n              n = fields.length;\n        let i = 0,\n            f;\n\n        for (; i < n; ++i) {\n          if (!inputMap[f = fields[i]]) {\n            inputMap[f] = 1;\n            inputs.push(f);\n          }\n        }\n      } // initialize group-by dimensions\n\n\n      this._dims = vegaUtil.array(_.groupby);\n      this._dnames = this._dims.map(d => {\n        const dname = vegaUtil.accessorName(d);\n        inputVisit(d);\n        outputs.push(dname);\n        return dname;\n      });\n      this.cellkey = _.key ? _.key : groupkey(this._dims); // initialize aggregate measures\n\n      this._countOnly = true;\n      this._counts = [];\n      this._measures = [];\n      const fields = _.fields || [null],\n            ops = _.ops || ['count'],\n            as = _.as || [],\n            n = fields.length,\n            map = {};\n      let field, op, m, mname, outname, i;\n\n      if (n !== ops.length) {\n        vegaUtil.error('Unmatched number of fields and aggregate ops.');\n      }\n\n      for (i = 0; i < n; ++i) {\n        field = fields[i];\n        op = ops[i];\n\n        if (field == null && op !== 'count') {\n          vegaUtil.error('Null aggregate field specified.');\n        }\n\n        mname = vegaUtil.accessorName(field);\n        outname = measureName(op, mname, as[i]);\n        outputs.push(outname);\n\n        if (op === 'count') {\n          this._counts.push(outname);\n\n          continue;\n        }\n\n        m = map[mname];\n\n        if (!m) {\n          inputVisit(field);\n          m = map[mname] = [];\n          m.field = field;\n\n          this._measures.push(m);\n        }\n\n        if (op !== 'count') this._countOnly = false;\n        m.push(createMeasure(op, outname));\n      }\n\n      this._measures = this._measures.map(m => compileMeasures(m, m.field));\n      return {}; // aggregation cells (this.value)\n    },\n\n    // -- Cell Management -----\n    cellkey: groupkey(),\n\n    cell(key, t) {\n      let cell = this.value[key];\n\n      if (!cell) {\n        cell = this.value[key] = this.newcell(key, t);\n        this._adds[this._alen++] = cell;\n      } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._adds[this._alen++] = cell;\n      } else if (cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._mods[this._mlen++] = cell;\n      }\n\n      return cell;\n    },\n\n    newcell(key, t) {\n      const cell = {\n        key: key,\n        num: 0,\n        agg: null,\n        tuple: this.newtuple(t, this._prev && this._prev[key]),\n        stamp: this.stamp,\n        store: false\n      };\n\n      if (!this._countOnly) {\n        const measures = this._measures,\n              n = measures.length;\n        cell.agg = Array(n);\n\n        for (let i = 0; i < n; ++i) {\n          cell.agg[i] = new measures[i](cell);\n        }\n      }\n\n      if (cell.store) {\n        cell.data = new TupleStore();\n      }\n\n      return cell;\n    },\n\n    newtuple(t, p) {\n      const names = this._dnames,\n            dims = this._dims,\n            n = dims.length,\n            x = {};\n\n      for (let i = 0; i < n; ++i) {\n        x[names[i]] = dims[i](t);\n      }\n\n      return p ? vegaDataflow.replace(p.tuple, x) : vegaDataflow.ingest(x);\n    },\n\n    clean() {\n      const cells = this.value;\n\n      for (const key in cells) {\n        if (cells[key].num === 0) {\n          delete cells[key];\n        }\n      }\n    },\n\n    // -- Process Tuples -----\n    add(t) {\n      const key = this.cellkey(t),\n            cell = this.cell(key, t);\n      cell.num += 1;\n      if (this._countOnly) return;\n      if (cell.store) cell.data.add(t);\n      const agg = cell.agg;\n\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].add(agg[i].get(t), t);\n      }\n    },\n\n    rem(t) {\n      const key = this.cellkey(t),\n            cell = this.cell(key, t);\n      cell.num -= 1;\n      if (this._countOnly) return;\n      if (cell.store) cell.data.rem(t);\n      const agg = cell.agg;\n\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].rem(agg[i].get(t), t);\n      }\n    },\n\n    celltuple(cell) {\n      const tuple = cell.tuple,\n            counts = this._counts; // consolidate stored values\n\n      if (cell.store) {\n        cell.data.values();\n      } // update tuple properties\n\n\n      for (let i = 0, n = counts.length; i < n; ++i) {\n        tuple[counts[i]] = cell.num;\n      }\n\n      if (!this._countOnly) {\n        const agg = cell.agg;\n\n        for (let i = 0, n = agg.length; i < n; ++i) {\n          agg[i].set(tuple);\n        }\n      }\n\n      return tuple;\n    },\n\n    changes(out) {\n      const adds = this._adds,\n            mods = this._mods,\n            prev = this._prev,\n            drop = this._drop,\n            add = out.add,\n            rem = out.rem,\n            mod = out.mod;\n      let cell, key, i, n;\n      if (prev) for (key in prev) {\n        cell = prev[key];\n        if (!drop || cell.num) rem.push(cell.tuple);\n      }\n\n      for (i = 0, n = this._alen; i < n; ++i) {\n        add.push(this.celltuple(adds[i]));\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i = 0, n = this._mlen; i < n; ++i) {\n        cell = mods[i];\n        (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n\n      this._prev = null;\n      return out;\n    }\n\n  });\n\n  const EPSILON$1 = 1e-14;\n  /**\n   * Generates a binning function for discretizing data.\n   * @constructor\n   * @param {object} params - The parameters for this operator. The\n   *   provided values should be valid options for the {@link bin} function.\n   * @param {function(object): *} params.field - The data field to bin.\n   */\n\n  function Bin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Bin.Definition = {\n    'type': 'Bin',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'interval',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'anchor',\n      'type': 'number'\n    }, {\n      'name': 'maxbins',\n      'type': 'number',\n      'default': 20\n    }, {\n      'name': 'base',\n      'type': 'number',\n      'default': 10\n    }, {\n      'name': 'divide',\n      'type': 'number',\n      'array': true,\n      'default': [5, 2]\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2,\n      'required': true\n    }, {\n      'name': 'span',\n      'type': 'number'\n    }, {\n      'name': 'step',\n      'type': 'number'\n    }, {\n      'name': 'steps',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'minstep',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'nice',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'name',\n      'type': 'string'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['bin0', 'bin1']\n    }]\n  };\n  vegaUtil.inherits(Bin, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const band = _.interval !== false,\n            bins = this._bins(_),\n            start = bins.start,\n            step = bins.step,\n            as = _.as || ['bin0', 'bin1'],\n            b0 = as[0],\n            b1 = as[1];\n\n      let flag;\n\n      if (_.modified()) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n      } else {\n        flag = pulse.modified(vegaUtil.accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n      }\n\n      pulse.visit(flag, band ? t => {\n        const v = bins(t); // minimum bin value (inclusive)\n\n        t[b0] = v; // maximum bin value (exclusive)\n        // use convoluted math for better floating point agreement\n        // see https://github.com/vega/vega/issues/830\n        // infinite values propagate through this formula! #2227\n\n        t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n      } : t => t[b0] = bins(t));\n      return pulse.modifies(band ? as : b0);\n    },\n\n    _bins(_) {\n      if (this.value && !_.modified()) {\n        return this.value;\n      }\n\n      const field = _.field,\n            bins = vegaStatistics.bin(_),\n            step = bins.step;\n      let start = bins.start,\n          stop = start + Math.ceil((bins.stop - start) / step) * step,\n          a,\n          d;\n\n      if ((a = _.anchor) != null) {\n        d = a - (start + step * Math.floor((a - start) / step));\n        start += d;\n        stop += d;\n      }\n\n      const f = function (t) {\n        let v = vegaUtil.toNumber(field(t));\n        return v == null ? null : v < start ? -Infinity : v > stop ? +Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));\n      };\n\n      f.start = start;\n      f.stop = bins.stop;\n      f.step = step;\n      return this.value = vegaUtil.accessor(f, vegaUtil.accessorFields(field), _.name || 'bin_' + vegaUtil.accessorName(field));\n    }\n\n  });\n\n  function SortedList (idFunc, source, input) {\n    const $ = idFunc;\n    let data = source || [],\n        add = input || [],\n        rem = {},\n        cnt = 0;\n    return {\n      add: t => add.push(t),\n      remove: t => rem[$(t)] = ++cnt,\n      size: () => data.length,\n      data: (compare, resort) => {\n        if (cnt) {\n          data = data.filter(t => !rem[$(t)]);\n          rem = {};\n          cnt = 0;\n        }\n\n        if (resort && compare) {\n          data.sort(compare);\n        }\n\n        if (add.length) {\n          data = compare ? vegaUtil.merge(compare, data, add.sort(compare)) : data.concat(add);\n          add = [];\n        }\n\n        return data;\n      }\n    };\n  }\n\n  /**\n   * Collects all data tuples that pass through this operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for additionally sorting the collected tuples.\n   */\n\n  function Collect(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Collect.Definition = {\n    'type': 'Collect',\n    'metadata': {\n      'source': true\n    },\n    'params': [{\n      'name': 'sort',\n      'type': 'compare'\n    }]\n  };\n  vegaUtil.inherits(Collect, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n            list = SortedList(vegaDataflow.tupleid, this.value, out.materialize(out.ADD).add),\n            sort = _.sort,\n            mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));\n      out.visit(out.REM, list.remove);\n      this.modified(mod);\n      this.value = out.source = list.data(vegaDataflow.stableCompare(sort), mod); // propagate tree root if defined\n\n      if (pulse.source && pulse.source.root) {\n        this.value.root = pulse.source.root;\n      }\n\n      return out;\n    }\n\n  });\n\n  /**\n   * Generates a comparator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string|function>} params.fields - The fields to compare.\n   * @param {Array<string>} [params.orders] - The sort orders.\n   *   Each entry should be one of \"ascending\" (default) or \"descending\".\n   */\n\n  function Compare(params) {\n    vegaDataflow.Operator.call(this, null, update$5, params);\n  }\n  vegaUtil.inherits(Compare, vegaDataflow.Operator);\n\n  function update$5(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.compare(_.fields, _.orders);\n  }\n\n  /**\n   * Count regexp-defined pattern occurrences in a text field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the text field.\n   * @param {string} [params.pattern] - RegExp string defining the text pattern.\n   * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n   * @param {string} [params.stopwords] - RegExp string of words to ignore.\n   */\n\n  function CountPattern(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  CountPattern.Definition = {\n    'type': 'CountPattern',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'case',\n      'type': 'enum',\n      'values': ['upper', 'lower', 'mixed'],\n      'default': 'mixed'\n    }, {\n      'name': 'pattern',\n      'type': 'string',\n      'default': '[\\\\w\"]+'\n    }, {\n      'name': 'stopwords',\n      'type': 'string',\n      'default': ''\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['text', 'count']\n    }]\n  };\n\n  function tokenize(text, tcase, match) {\n    switch (tcase) {\n      case 'upper':\n        text = text.toUpperCase();\n        break;\n\n      case 'lower':\n        text = text.toLowerCase();\n        break;\n    }\n\n    return text.match(match);\n  }\n\n  vegaUtil.inherits(CountPattern, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const process = update => tuple => {\n        var tokens = tokenize(get(tuple), _.case, match) || [],\n            t;\n\n        for (var i = 0, n = tokens.length; i < n; ++i) {\n          if (!stop.test(t = tokens[i])) update(t);\n        }\n      };\n\n      const init = this._parameterCheck(_, pulse),\n            counts = this._counts,\n            match = this._match,\n            stop = this._stop,\n            get = _.field,\n            as = _.as || ['text', 'count'],\n            add = process(t => counts[t] = 1 + (counts[t] || 0)),\n            rem = process(t => counts[t] -= 1);\n\n      if (init) {\n        pulse.visit(pulse.SOURCE, add);\n      } else {\n        pulse.visit(pulse.ADD, add);\n        pulse.visit(pulse.REM, rem);\n      }\n\n      return this._finish(pulse, as); // generate output tuples\n    },\n\n    _parameterCheck(_, pulse) {\n      let init = false;\n\n      if (_.modified('stopwords') || !this._stop) {\n        this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n        init = true;\n      }\n\n      if (_.modified('pattern') || !this._match) {\n        this._match = new RegExp(_.pattern || '[\\\\w\\']+', 'g');\n        init = true;\n      }\n\n      if (_.modified('field') || pulse.modified(_.field.fields)) {\n        init = true;\n      }\n\n      if (init) this._counts = {};\n      return init;\n    },\n\n    _finish(pulse, as) {\n      const counts = this._counts,\n            tuples = this._tuples || (this._tuples = {}),\n            text = as[0],\n            count = as[1],\n            out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n      let w, t, c;\n\n      for (w in counts) {\n        t = tuples[w];\n        c = counts[w] || 0;\n\n        if (!t && c) {\n          tuples[w] = t = vegaDataflow.ingest({});\n          t[text] = w;\n          t[count] = c;\n          out.add.push(t);\n        } else if (c === 0) {\n          if (t) out.rem.push(t);\n          counts[w] = null;\n          tuples[w] = null;\n        } else if (t[count] !== c) {\n          t[count] = c;\n          out.mod.push(t);\n        }\n      }\n\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Perform a cross-product of a tuple stream with itself.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object):boolean} [params.filter] - An optional filter\n   *   function for selectively including tuples in the cross product.\n   * @param {Array<string>} [params.as] - The names of the output fields.\n   */\n\n  function Cross(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Cross.Definition = {\n    'type': 'Cross',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'filter',\n      'type': 'expr'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['a', 'b']\n    }]\n  };\n  vegaUtil.inherits(Cross, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            as = _.as || ['a', 'b'],\n            a = as[0],\n            b = as[1],\n            reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');\n\n      let data = this.value;\n\n      if (reset) {\n        if (data) out.rem = data;\n        data = pulse.materialize(pulse.SOURCE).source;\n        out.add = this.value = cross(data, a, b, _.filter || vegaUtil.truthy);\n      } else {\n        out.mod = data;\n      }\n\n      out.source = this.value;\n      return out.modifies(as);\n    }\n\n  });\n\n  function cross(input, a, b, filter) {\n    var data = [],\n        t = {},\n        n = input.length,\n        i = 0,\n        j,\n        left;\n\n    for (; i < n; ++i) {\n      t[a] = left = input[i];\n\n      for (j = 0; j < n; ++j) {\n        t[b] = input[j];\n\n        if (filter(t)) {\n          data.push(vegaDataflow.ingest(t));\n          t = {};\n          t[a] = left;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  const Distributions = {\n    kde: vegaStatistics.randomKDE,\n    mixture: vegaStatistics.randomMixture,\n    normal: vegaStatistics.randomNormal,\n    lognormal: vegaStatistics.randomLogNormal,\n    uniform: vegaStatistics.randomUniform\n  };\n  const DISTRIBUTIONS = 'distributions',\n        FUNCTION = 'function',\n        FIELD = 'field';\n  /**\n   * Parse a parameter object for a probability distribution.\n   * @param {object} def - The distribution parameter object.\n   * @param {function():Array<object>} - A method for requesting\n   *   source data. Used for distributions (such as KDE) that\n   *   require sample data points. This method will only be\n   *   invoked if the 'from' parameter for a target data source\n   *   is not provided. Typically this method returns backing\n   *   source data for a Pulse object.\n   * @return {object} - The output distribution object.\n   */\n\n  function parse(def, data) {\n    const func = def[FUNCTION];\n\n    if (!vegaUtil.hasOwnProperty(Distributions, func)) {\n      vegaUtil.error('Unknown distribution function: ' + func);\n    }\n\n    const d = Distributions[func]();\n\n    for (const name in def) {\n      // if data field, extract values\n      if (name === FIELD) {\n        d.data((def.from || data()).map(def[name]));\n      } // if distribution mixture, recurse to parse each definition\n      else if (name === DISTRIBUTIONS) {\n          d[name](def[name].map(_ => parse(_, data)));\n        } // otherwise, simply set the parameter\n        else if (typeof d[name] === FUNCTION) {\n            d[name](def[name]);\n          }\n    }\n\n    return d;\n  }\n\n  /**\n   * Grid sample points for a probability density. Given a distribution and\n   * a sampling extent, will generate points suitable for plotting either\n   * PDF (probability density function) or CDF (cumulative distribution\n   * function) curves.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.distribution - The probability distribution. This\n   *   is an object parameter dependent on the distribution type.\n   * @param {string} [params.method='pdf'] - The distribution method to sample.\n   *   One of 'pdf' or 'cdf'.\n   * @param {Array<number>} [params.extent] - The [min, max] extent over which\n   *   to sample the distribution. This argument is required in most cases, but\n   *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n   *   that returns numerical sample points from which the extent can be deduced.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n\n  function Density(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  const distributions = [{\n    'key': {\n      'function': 'normal'\n    },\n    'params': [{\n      'name': 'mean',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'stdev',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'lognormal'\n    },\n    'params': [{\n      'name': 'mean',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'stdev',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'uniform'\n    },\n    'params': [{\n      'name': 'min',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'max',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'kde'\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'from',\n      'type': 'data'\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0\n    }]\n  }];\n  const mixture = {\n    'key': {\n      'function': 'mixture'\n    },\n    'params': [{\n      'name': 'distributions',\n      'type': 'param',\n      'array': true,\n      'params': distributions\n    }, {\n      'name': 'weights',\n      'type': 'number',\n      'array': true\n    }]\n  };\n  Density.Definition = {\n    'type': 'Density',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'steps',\n      'type': 'number'\n    }, {\n      'name': 'minsteps',\n      'type': 'number',\n      'default': 25\n    }, {\n      'name': 'maxsteps',\n      'type': 'number',\n      'default': 200\n    }, {\n      'name': 'method',\n      'type': 'string',\n      'default': 'pdf',\n      'values': ['pdf', 'cdf']\n    }, {\n      'name': 'distribution',\n      'type': 'param',\n      'params': distributions.concat(mixture)\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['value', 'density']\n    }]\n  };\n  vegaUtil.inherits(Density, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const dist = parse(_.distribution, source(pulse)),\n              minsteps = _.steps || _.minsteps || 25,\n              maxsteps = _.steps || _.maxsteps || 200;\n        let method = _.method || 'pdf';\n\n        if (method !== 'pdf' && method !== 'cdf') {\n          vegaUtil.error('Invalid density method: ' + method);\n        }\n\n        if (!_.extent && !dist.data) {\n          vegaUtil.error('Missing density extent parameter.');\n        }\n\n        method = dist[method];\n        const as = _.as || ['value', 'density'],\n              domain = _.extent || vegaUtil.extent(dist.data()),\n              values = vegaStatistics.sampleCurve(method, domain, minsteps, maxsteps).map(v => {\n          const tuple = {};\n          tuple[as[0]] = v[0];\n          tuple[as[1]] = v[1];\n          return vegaDataflow.ingest(tuple);\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n\n  });\n\n  function source(pulse) {\n    return () => pulse.materialize(pulse.SOURCE).source;\n  }\n\n  function fieldNames(fields, as) {\n    if (!fields) return null;\n    return fields.map((f, i) => as[i] || vegaUtil.accessorName(f));\n  }\n  function partition$1(data, groupby, field) {\n    const groups = [],\n          get = f => f(t);\n\n    let map, i, n, t, k, g; // partition data points into groups\n\n    if (groupby == null) {\n      groups.push(data.map(field));\n    } else {\n      for (map = {}, i = 0, n = data.length; i < n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n\n        if (!g) {\n          map[k] = g = [];\n          g.dims = k;\n          groups.push(g);\n        }\n\n        g.push(field(t));\n      }\n    }\n\n    return groups;\n  }\n\n  const Output = 'bin';\n  /**\n   * Dot density binning for dot plot construction.\n   * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n   * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to bin.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.step] - The step size (bin width) within which dots should be\n   *   stacked. Defaults to 1/30 of the extent of the data *field*.\n   * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n   *   stacks should be smoothed to reduce variance.\n   */\n\n  function DotBin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  DotBin.Definition = {\n    'type': 'DotBin',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number'\n    }, {\n      'name': 'smooth',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': Output\n    }]\n  };\n\n  const autostep = (data, field) => vegaUtil.span(vegaUtil.extent(data, field)) / 30;\n\n  vegaUtil.inherits(DotBin, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (this.value && !(_.modified() || pulse.changed())) {\n        return pulse; // early exit\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$1(pulse.source, _.groupby, vegaUtil.identity),\n            smooth = _.smooth || false,\n            field = _.field,\n            step = _.step || autostep(source, field),\n            sort = vegaDataflow.stableCompare((a, b) => field(a) - field(b)),\n            as = _.as || Output,\n            n = groups.length; // compute dotplot bins per group\n\n      let min = Infinity,\n          max = -Infinity,\n          i = 0,\n          j;\n\n      for (; i < n; ++i) {\n        const g = groups[i].sort(sort);\n        j = -1;\n\n        for (const v of vegaStatistics.dotbin(g, step, smooth, field)) {\n          if (v < min) min = v;\n          if (v > max) max = v;\n          g[++j][as] = v;\n        }\n      }\n\n      this.value = {\n        start: min,\n        stop: max,\n        step: step\n      };\n      return pulse.reflow(true).modifies(as);\n    }\n\n  });\n\n  /**\n   * Wraps an expression function with access to external parameters.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function} params.expr - The expression function. The\n   *  function should accept both a datum and a parameter object.\n   *  This operator's value will be a new function that wraps the\n   *  expression function with access to this operator's parameters.\n   */\n\n  function Expression(params) {\n    vegaDataflow.Operator.call(this, null, update$4, params);\n    this.modified(true);\n  }\n  vegaUtil.inherits(Expression, vegaDataflow.Operator);\n\n  function update$4(_) {\n    const expr = _.expr;\n    return this.value && !_.modified('expr') ? this.value : vegaUtil.accessor(datum => expr(datum, _), vegaUtil.accessorFields(expr), vegaUtil.accessorName(expr));\n  }\n\n  /**\n   * Computes extents (min/max) for a data field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field over which to compute extends.\n   */\n\n  function Extent(params) {\n    vegaDataflow.Transform.call(this, [undefined, undefined], params);\n  }\n  Extent.Definition = {\n    'type': 'Extent',\n    'metadata': {},\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Extent, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const extent = this.value,\n            field = _.field,\n            mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');\n\n      let min = extent[0],\n          max = extent[1];\n\n      if (mod || min == null) {\n        min = +Infinity;\n        max = -Infinity;\n      }\n\n      pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {\n        const v = vegaUtil.toNumber(field(t));\n\n        if (v != null) {\n          // NaNs will fail all comparisons!\n          if (v < min) min = v;\n          if (v > max) max = v;\n        }\n      });\n\n      if (!Number.isFinite(min) || !Number.isFinite(max)) {\n        let name = vegaUtil.accessorName(field);\n        if (name) name = ` for field \"${name}\"`;\n        pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n        min = max = undefined;\n      }\n\n      this.value = [min, max];\n    }\n\n  });\n\n  /**\n   * Provides a bridge between a parent transform and a target subflow that\n   * consumes only a subset of the tuples that pass through the parent.\n   * @constructor\n   * @param {Pulse} pulse - A pulse to use as the value of this operator.\n   * @param {Transform} parent - The parent transform (typically a Facet instance).\n   */\n\n  function Subflow(pulse, parent) {\n    vegaDataflow.Operator.call(this, pulse);\n    this.parent = parent;\n    this.count = 0;\n  }\n  vegaUtil.inherits(Subflow, vegaDataflow.Operator, {\n    /**\n     * Routes pulses from this subflow to a target transform.\n     * @param {Transform} target - A transform that receives the subflow of tuples.\n     */\n    connect(target) {\n      this.detachSubflow = target.detachSubflow;\n      this.targets().add(target);\n      return target.source = this;\n    },\n\n    /**\n     * Add an 'add' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being added.\n     */\n    add(t) {\n      this.count += 1;\n      this.value.add.push(t);\n    },\n\n    /**\n     * Add a 'rem' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being removed.\n     */\n    rem(t) {\n      this.count -= 1;\n      this.value.rem.push(t);\n    },\n\n    /**\n     * Add a 'mod' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being modified.\n     */\n    mod(t) {\n      this.value.mod.push(t);\n    },\n\n    /**\n     * Re-initialize this operator's pulse value.\n     * @param {Pulse} pulse - The pulse to copy from.\n     * @see Pulse.init\n     */\n    init(pulse) {\n      this.value.init(pulse, pulse.NO_SOURCE);\n    },\n\n    /**\n     * Evaluate this operator. This method overrides the\n     * default behavior to simply return the contained pulse value.\n     * @return {Pulse}\n     */\n    evaluate() {\n      // assert: this.value.stamp === pulse.stamp\n      return this.value;\n    }\n\n  });\n\n  /**\n   * Facets a dataflow into a set of subflows based on a key.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): *} params.key - The key field to facet by.\n   */\n\n  function Facet(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._keys = vegaUtil.fastmap(); // cache previously calculated key values\n    // keep track of active subflows, use as targets array for listeners\n    // this allows us to limit propagation to only updated subflows\n\n    const a = this._targets = [];\n    a.active = 0;\n\n    a.forEach = f => {\n      for (let i = 0, n = a.active; i < n; ++i) {\n        f(a[i], i, a);\n      }\n    };\n  }\n  vegaUtil.inherits(Facet, vegaDataflow.Transform, {\n    activate(flow) {\n      this._targets[this._targets.active++] = flow;\n    },\n\n    // parent argument provided by PreFacet subclass\n    subflow(key, flow, pulse, parent) {\n      const flows = this.value;\n      let sf = vegaUtil.hasOwnProperty(flows, key) && flows[key],\n          df,\n          p;\n\n      if (!sf) {\n        p = parent || (p = this._group[key]) && p.tuple;\n        df = pulse.dataflow;\n        sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n        df.add(sf).connect(flow(df, key, p));\n        flows[key] = sf;\n        this.activate(sf);\n      } else if (sf.value.stamp < pulse.stamp) {\n        sf.init(pulse);\n        this.activate(sf);\n      }\n\n      return sf;\n    },\n\n    clean() {\n      const flows = this.value;\n      let detached = 0;\n\n      for (const key in flows) {\n        if (flows[key].count === 0) {\n          const detach = flows[key].detachSubflow;\n          if (detach) detach();\n          delete flows[key];\n          ++detached;\n        }\n      } // remove inactive targets from the active targets array\n\n\n      if (detached) {\n        const active = this._targets.filter(sf => sf && sf.count > 0);\n\n        this.initTargets(active);\n      }\n    },\n\n    initTargets(act) {\n      const a = this._targets,\n            n = a.length,\n            m = act ? act.length : 0;\n      let i = 0;\n\n      for (; i < m; ++i) {\n        a[i] = act[i];\n      }\n\n      for (; i < n && a[i] != null; ++i) {\n        a[i] = null; // ensure old flows can be garbage collected\n      }\n\n      a.active = m;\n    },\n\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            key = _.key,\n            flow = _.subflow,\n            cache = this._keys,\n            rekey = _.modified('key'),\n            subflow = key => this.subflow(key, flow, pulse);\n\n      this._group = _.group || {};\n      this.initTargets(); // reset list of active subflows\n\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t),\n              k = cache.get(id);\n\n        if (k !== undefined) {\n          cache.delete(id);\n          subflow(k).rem(t);\n        }\n      });\n      pulse.visit(pulse.ADD, t => {\n        const k = key(t);\n        cache.set(vegaDataflow.tupleid(t), k);\n        subflow(k).add(t);\n      });\n\n      if (rekey || pulse.modified(key.fields)) {\n        pulse.visit(pulse.MOD, t => {\n          const id = vegaDataflow.tupleid(t),\n                k0 = cache.get(id),\n                k1 = key(t);\n\n          if (k0 === k1) {\n            subflow(k1).mod(t);\n          } else {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      } else if (pulse.changed(pulse.MOD)) {\n        pulse.visit(pulse.MOD, t => {\n          subflow(cache.get(vegaDataflow.tupleid(t))).mod(t);\n        });\n      }\n\n      if (rekey) {\n        pulse.visit(pulse.REFLOW, t => {\n          const id = vegaDataflow.tupleid(t),\n                k0 = cache.get(id),\n                k1 = key(t);\n\n          if (k0 !== k1) {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      }\n\n      if (pulse.clean()) {\n        df.runAfter(() => {\n          this.clean();\n          cache.clean();\n        });\n      } else if (cache.empty > df.cleanThreshold) {\n        df.runAfter(cache.clean);\n      }\n\n      return pulse;\n    }\n\n  });\n\n  /**\n   * Generates one or more field accessor functions.\n   * If the 'name' parameter is an array, an array of field accessors\n   * will be created and the 'as' parameter will be ignored.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.name - The field name(s) to access.\n   * @param {string} params.as - The accessor function name.\n   */\n\n  function Field(params) {\n    vegaDataflow.Operator.call(this, null, update$3, params);\n  }\n  vegaUtil.inherits(Field, vegaDataflow.Operator);\n\n  function update$3(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.isArray(_.name) ? vegaUtil.array(_.name).map(f => vegaUtil.field(f)) : vegaUtil.field(_.name, _.as);\n  }\n\n  /**\n   * Filters data tuples according to a predicate function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The predicate expression function\n   *   that determines a tuple's filter status. Truthy values pass the filter.\n   */\n\n  function Filter(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n  Filter.Definition = {\n    'type': 'Filter',\n    'metadata': {\n      'changes': true\n    },\n    'params': [{\n      'name': 'expr',\n      'type': 'expr',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Filter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            cache = this.value,\n            // cache ids of filtered tuples\n      output = pulse.fork(),\n            add = output.add,\n            rem = output.rem,\n            mod = output.mod,\n            test = _.expr;\n      let isMod = true;\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t);\n        if (!cache.has(id)) rem.push(t);else cache.delete(id);\n      });\n      pulse.visit(pulse.ADD, t => {\n        if (test(t, _)) add.push(t);else cache.set(vegaDataflow.tupleid(t), 1);\n      });\n\n      function revisit(t) {\n        const id = vegaDataflow.tupleid(t),\n              b = test(t, _),\n              s = cache.get(id);\n\n        if (b && s) {\n          cache.delete(id);\n          add.push(t);\n        } else if (!b && !s) {\n          cache.set(id, 1);\n          rem.push(t);\n        } else if (isMod && b && !s) {\n          mod.push(t);\n        }\n      }\n\n      pulse.visit(pulse.MOD, revisit);\n\n      if (_.modified()) {\n        isMod = false;\n        pulse.visit(pulse.REFLOW, revisit);\n      }\n\n      if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n      return output;\n    }\n\n  });\n\n  /**\n   * Flattens array-typed field values into new data objects.\n   * If multiple fields are specified, they are treated as parallel arrays,\n   * with output values included for each matching index (or null if missing).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of field\n   *   accessors for the tuple fields that should be flattened.\n   * @param {string} [params.index] - Optional output field name for index\n   *   value. If unspecified, no index field is included in the output.\n   * @param {Array<string>} [params.as] - Output field names for flattened\n   *   array fields. Any unspecified fields will use the field name provided\n   *   by the fields accessors.\n   */\n\n  function Flatten(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Flatten.Definition = {\n    'type': 'Flatten',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'index',\n      'type': 'string'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }]\n  };\n  vegaUtil.inherits(Flatten, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            as = fieldNames(fields, _.as || []),\n            index = _.index || null,\n            m = as.length; // remove any previous results\n\n      out.rem = this.value; // generate flattened tuples\n\n      pulse.visit(pulse.SOURCE, t => {\n        const arrays = fields.map(f => f(t)),\n              maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);\n        let i = 0,\n            j,\n            d,\n            v;\n\n        for (; i < maxlen; ++i) {\n          d = vegaDataflow.derive(t);\n\n          for (j = 0; j < m; ++j) {\n            d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n          }\n\n          if (index) {\n            d[index] = i;\n          }\n\n          out.add.push(d);\n        }\n      });\n      this.value = out.source = out.add;\n      if (index) out.modifies(index);\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Folds one more tuple fields into multiple tuples in which the field\n   * name and values are available under new 'key' and 'value' fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.fields - An array of field accessors\n   *   for the tuple fields that should be folded.\n   * @param {Array<string>} [params.as] - Output field names for folded key\n   *   and value fields, defaults to ['key', 'value'].\n   */\n\n  function Fold(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Fold.Definition = {\n    'type': 'Fold',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['key', 'value']\n    }]\n  };\n  vegaUtil.inherits(Fold, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            fnames = fields.map(vegaUtil.accessorName),\n            as = _.as || ['key', 'value'],\n            k = as[0],\n            v = as[1],\n            n = fields.length;\n      out.rem = this.value;\n      pulse.visit(pulse.SOURCE, t => {\n        for (let i = 0, d; i < n; ++i) {\n          d = vegaDataflow.derive(t);\n          d[k] = fnames[i];\n          d[v] = fields[i](t);\n          out.add.push(d);\n        }\n      });\n      this.value = out.source = out.add;\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Invokes a function for each data tuple and saves the results as a new field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n   * @param {string} params.as - The field name under which to save the result.\n   * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n   *   added tuples only, and does not update in response to modifications.\n   */\n\n  function Formula(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Formula.Definition = {\n    'type': 'Formula',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'expr',\n      'type': 'expr',\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'required': true\n    }, {\n      'name': 'initonly',\n      'type': 'boolean'\n    }]\n  };\n  vegaUtil.inherits(Formula, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const func = _.expr,\n            as = _.as,\n            mod = _.modified(),\n            flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;\n\n      if (mod) {\n        // parameters updated, need to reflow\n        pulse = pulse.materialize().reflow(true);\n      }\n\n      if (!_.initonly) {\n        pulse.modifies(as);\n      }\n\n      return pulse.visit(flag, t => t[as] = func(t, _));\n    }\n\n  });\n\n  /**\n   * Generates data tuples using a provided generator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Parameters): object} params.generator - A tuple generator\n   *   function. This function is given the operator parameters as input.\n   *   Changes to any additional parameters will not trigger re-calculation\n   *   of previously generated tuples. Only future tuples are affected.\n   * @param {number} params.size - The number of tuples to produce.\n   */\n\n  function Generate(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  vegaUtil.inherits(Generate, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n            gen = _.generator;\n      let data = this.value,\n          num = _.size - data.length,\n          add,\n          rem,\n          t;\n\n      if (num > 0) {\n        // need more tuples, generate and add\n        for (add = []; --num >= 0;) {\n          add.push(t = vegaDataflow.ingest(gen(_)));\n          data.push(t);\n        }\n\n        out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;\n      } else {\n        // need fewer tuples, remove\n        rem = data.slice(0, -num);\n        out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;\n        data = data.slice(-num);\n      }\n\n      out.source = this.value = data;\n      return out;\n    }\n\n  });\n\n  const Methods = {\n    value: 'value',\n    median: d3Array.median,\n    mean: d3Array.mean,\n    min: d3Array.min,\n    max: d3Array.max\n  };\n  const Empty = [];\n  /**\n   * Impute missing values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to impute.\n   * @param {Array<function(object): *>} [params.groupby] - An array of\n   *   accessors to determine series within which to perform imputation.\n   * @param {function(object): *} params.key - An accessor for a key value.\n   *   Each key value should be unique within a group. New tuples will be\n   *   imputed for any key values that are not found within a group.\n   * @param {Array<*>} [params.keyvals] - Optional array of required key\n   *   values. New tuples will be imputed for any key values that are not\n   *   found within a group. In addition, these values will be automatically\n   *   augmented with the key values observed in the input data.\n   * @param {string} [method='value'] - The imputation method to use. One of\n   *   'value', 'mean', 'median', 'max', 'min'.\n   * @param {*} [value=0] - The constant value to use for imputation\n   *   when using method 'value'.\n   */\n\n  function Impute(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Impute.Definition = {\n    'type': 'Impute',\n    'metadata': {\n      'changes': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'keyvals',\n      'array': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'value',\n      'values': ['value', 'mean', 'median', 'max', 'min']\n    }, {\n      'name': 'value',\n      'default': 0\n    }]\n  };\n\n  function getValue(_) {\n    var m = _.method || Methods.value,\n        v;\n\n    if (Methods[m] == null) {\n      vegaUtil.error('Unrecognized imputation method: ' + m);\n    } else if (m === Methods.value) {\n      v = _.value !== undefined ? _.value : 0;\n      return () => v;\n    } else {\n      return Methods[m];\n    }\n  }\n\n  function getField(_) {\n    const f = _.field;\n    return t => t ? f(t) : NaN;\n  }\n\n  vegaUtil.inherits(Impute, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      var out = pulse.fork(pulse.ALL),\n          impute = getValue(_),\n          field = getField(_),\n          fName = vegaUtil.accessorName(_.field),\n          kName = vegaUtil.accessorName(_.key),\n          gNames = (_.groupby || []).map(vegaUtil.accessorName),\n          groups = partition(pulse.source, _.groupby, _.key, _.keyvals),\n          curr = [],\n          prev = this.value,\n          m = groups.domain.length,\n          group,\n          value,\n          gVals,\n          kVal,\n          g,\n          i,\n          j,\n          l,\n          n,\n          t;\n\n      for (g = 0, l = groups.length; g < l; ++g) {\n        group = groups[g];\n        gVals = group.values;\n        value = NaN; // add tuples for missing values\n\n        for (j = 0; j < m; ++j) {\n          if (group[j] != null) continue;\n          kVal = groups.domain[j];\n          t = {\n            _impute: true\n          };\n\n          for (i = 0, n = gVals.length; i < n; ++i) t[gNames[i]] = gVals[i];\n\n          t[kName] = kVal;\n          t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;\n          curr.push(vegaDataflow.ingest(t));\n        }\n      } // update pulse with imputed tuples\n\n\n      if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n      if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n      this.value = curr;\n      return out;\n    }\n\n  });\n\n  function partition(data, groupby, key, keyvals) {\n    var get = f => f(t),\n        groups = [],\n        domain = keyvals ? keyvals.slice() : [],\n        kMap = {},\n        gMap = {},\n        gVals,\n        gKey,\n        group,\n        i,\n        j,\n        k,\n        n,\n        t;\n\n    domain.forEach((k, i) => kMap[k] = i + 1);\n\n    for (i = 0, n = data.length; i < n; ++i) {\n      t = data[i];\n      k = key(t);\n      j = kMap[k] || (kMap[k] = domain.push(k));\n      gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n\n      if (!(group = gMap[gKey])) {\n        group = gMap[gKey] = [];\n        groups.push(group);\n        group.values = gVals;\n      }\n\n      group[j - 1] = t;\n    }\n\n    groups.domain = domain;\n    return groups;\n  }\n\n  /**\n   * Extend input tuples with aggregate values.\n   * Calcuates aggregate values and joins them with the input stream.\n   * @constructor\n   */\n\n  function JoinAggregate(params) {\n    Aggregate.call(this, params);\n  }\n  JoinAggregate.Definition = {\n    'type': 'JoinAggregate',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidAggregateOps\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(JoinAggregate, Aggregate, {\n    transform(_, pulse) {\n      const aggr = this,\n            mod = _.modified();\n\n      let cells; // process all input tuples to calculate aggregates\n\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        cells = aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        cells = aggr.value = aggr.value || this.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      } // update aggregation cells\n\n\n      aggr.changes(); // write aggregate values to input tuples\n\n      pulse.visit(pulse.SOURCE, t => {\n        vegaUtil.extend(t, cells[aggr.cellkey(t)].tuple);\n      });\n      return pulse.reflow(mod).modifies(this._outputs);\n    },\n\n    changes() {\n      const adds = this._adds,\n            mods = this._mods;\n      let i, n;\n\n      for (i = 0, n = this._alen; i < n; ++i) {\n        this.celltuple(adds[i]);\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i = 0, n = this._mlen; i < n; ++i) {\n        this.celltuple(mods[i]);\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n    }\n\n  });\n\n  /**\n   * Compute kernel density estimates (KDE) for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   to estimate.\n   * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n   *   If zero or unspecified, the bandwidth is automatically determined.\n   * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n   *   output values should be probability estimates (false, default) or\n   *   smoothed counts (true).\n   * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n   *   density (false) or cumulative distribution (true) should be generated.\n   * @param {Array<number>} [params.extent] - The domain extent over which to\n   *   plot the density. If unspecified, the [min, max] data extent is used.\n   * @param {string} [params.resolve='independent'] - Indicates how parameters for\n   *   multiple densities should be resolved. If \"independent\" (the default), each\n   *   density may have its own domain extent and dynamic number of curve sample\n   *   steps. If \"shared\", the KDE transform will ensure that all densities are\n   *   defined over a shared domain and curve steps, enabling stacking.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n\n  function KDE(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  KDE.Definition = {\n    'type': 'KDE',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'cumulative',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'counts',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'resolve',\n      'type': 'enum',\n      'values': ['shared', 'independent'],\n      'default': 'independent'\n    }, {\n      'name': 'steps',\n      'type': 'number'\n    }, {\n      'name': 'minsteps',\n      'type': 'number',\n      'default': 25\n    }, {\n      'name': 'maxsteps',\n      'type': 'number',\n      'default': 200\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['value', 'density']\n    }]\n  };\n  vegaUtil.inherits(KDE, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const source = pulse.materialize(pulse.SOURCE).source,\n              groups = partition$1(source, _.groupby, _.field),\n              names = (_.groupby || []).map(vegaUtil.accessorName),\n              bandwidth = _.bandwidth,\n              method = _.cumulative ? 'cdf' : 'pdf',\n              as = _.as || ['value', 'density'],\n              values = [];\n        let domain = _.extent,\n            minsteps = _.steps || _.minsteps || 25,\n            maxsteps = _.steps || _.maxsteps || 200;\n\n        if (method !== 'pdf' && method !== 'cdf') {\n          vegaUtil.error('Invalid density method: ' + method);\n        }\n\n        if (_.resolve === 'shared') {\n          if (!domain) domain = vegaUtil.extent(source, _.field);\n          minsteps = maxsteps = _.steps || maxsteps;\n        }\n\n        groups.forEach(g => {\n          const density = vegaStatistics.randomKDE(g, bandwidth)[method],\n                scale = _.counts ? g.length : 1,\n                local = domain || vegaUtil.extent(g);\n          vegaStatistics.sampleCurve(density, local, minsteps, maxsteps).forEach(v => {\n            const t = {};\n\n            for (let i = 0; i < names.length; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n\n            t[as[0]] = v[0];\n            t[as[1]] = v[1] * scale;\n            values.push(vegaDataflow.ingest(t));\n          });\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n\n  });\n\n  /**\n   * Generates a key function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string>} params.fields - The field name(s) for the key function.\n   * @param {boolean} params.flat - A boolean flag indicating if the field names\n   *  should be treated as flat property names, side-stepping nested field\n   *  lookups normally indicated by dot or bracket notation.\n   */\n\n  function Key(params) {\n    vegaDataflow.Operator.call(this, null, update$2, params);\n  }\n  vegaUtil.inherits(Key, vegaDataflow.Operator);\n\n  function update$2(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.key(_.fields, _.flat);\n  }\n\n  /**\n   * Load and parse data from an external source. Marshalls parameter\n   * values and then invokes the Dataflow request method.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.url - The URL to load from.\n   * @param {object} params.format - The data format options.\n   */\n\n  function Load(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this._pending = null;\n  }\n  vegaUtil.inherits(Load, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow;\n\n      if (this._pending) {\n        // update state and return pulse\n        return output(this, pulse, this._pending);\n      }\n\n      if (stop(_)) return pulse.StopPropagation;\n\n      if (_.values) {\n        // parse and ingest values, return output pulse\n        return output(this, pulse, df.parse(_.values, _.format));\n      } else if (_.async) {\n        // return promise for non-blocking async loading\n        const p = df.request(_.url, _.format).then(res => {\n          this._pending = vegaUtil.array(res.data);\n          return df => df.touch(this);\n        });\n        return {\n          async: p\n        };\n      } else {\n        // return promise for synchronous loading\n        return df.request(_.url, _.format).then(res => output(this, pulse, vegaUtil.array(res.data)));\n      }\n    }\n\n  });\n\n  function stop(_) {\n    return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));\n  }\n\n  function output(op, pulse, data) {\n    data.forEach(vegaDataflow.ingest);\n    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n    out.rem = op.value;\n    op.value = out.source = out.add = data;\n    op._pending = null;\n    if (out.rem.length) out.clean(true);\n    return out;\n  }\n\n  /**\n   * Extend tuples by joining them with values from a lookup table.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Map} params.index - The lookup table map.\n   * @param {Array<function(object): *} params.fields - The fields to lookup.\n   * @param {Array<string>} params.as - Output field names for each lookup value.\n   * @param {*} [params.default] - A default value to use if lookup fails.\n   */\n\n  function Lookup(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n  }\n  Lookup.Definition = {\n    'type': 'Lookup',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'index',\n      'type': 'index',\n      'params': [{\n        'name': 'from',\n        'type': 'data',\n        'required': true\n      }, {\n        'name': 'key',\n        'type': 'field',\n        'required': true\n      }]\n    }, {\n      'name': 'values',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }, {\n      'name': 'default',\n      'default': null\n    }]\n  };\n  vegaUtil.inherits(Lookup, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const keys = _.fields,\n            index = _.index,\n            values = _.values,\n            defaultValue = _.default == null ? null : _.default,\n            reset = _.modified(),\n            n = keys.length;\n\n      let flag = reset ? pulse.SOURCE : pulse.ADD,\n          out = pulse,\n          as = _.as,\n          set,\n          m,\n          mods;\n\n      if (values) {\n        m = values.length;\n\n        if (n > 1 && !as) {\n          vegaUtil.error('Multi-field lookup requires explicit \"as\" parameter.');\n        }\n\n        if (as && as.length !== n * m) {\n          vegaUtil.error('The \"as\" parameter has too few output field names.');\n        }\n\n        as = as || values.map(vegaUtil.accessorName);\n\n        set = function (t) {\n          for (var i = 0, k = 0, j, v; i < n; ++i) {\n            v = index.get(keys[i](t));\n            if (v == null) for (j = 0; j < m; ++j, ++k) t[as[k]] = defaultValue;else for (j = 0; j < m; ++j, ++k) t[as[k]] = values[j](v);\n          }\n        };\n      } else {\n        if (!as) {\n          vegaUtil.error('Missing output field names.');\n        }\n\n        set = function (t) {\n          for (var i = 0, v; i < n; ++i) {\n            v = index.get(keys[i](t));\n            t[as[i]] = v == null ? defaultValue : v;\n          }\n        };\n      }\n\n      if (reset) {\n        out = pulse.reflow(true);\n      } else {\n        mods = keys.some(k => pulse.modified(k.fields));\n        flag |= mods ? pulse.MOD : 0;\n      }\n\n      pulse.visit(flag, set);\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Computes global min/max extents over a collection of extents.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<number>>} params.extents - The input extents.\n   */\n\n  function MultiExtent(params) {\n    vegaDataflow.Operator.call(this, null, update$1, params);\n  }\n  vegaUtil.inherits(MultiExtent, vegaDataflow.Operator);\n\n  function update$1(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    const ext = _.extents,\n          n = ext.length;\n    let min = +Infinity,\n        max = -Infinity,\n        i,\n        e;\n\n    for (i = 0; i < n; ++i) {\n      e = ext[i];\n      if (e[0] < min) min = e[0];\n      if (e[1] > max) max = e[1];\n    }\n\n    return [min, max];\n  }\n\n  /**\n   * Merge a collection of value arrays.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<*>>} params.values - The input value arrrays.\n   */\n\n  function MultiValues(params) {\n    vegaDataflow.Operator.call(this, null, update, params);\n  }\n  vegaUtil.inherits(MultiValues, vegaDataflow.Operator);\n\n  function update(_) {\n    return this.value && !_.modified() ? this.value : _.values.reduce((data, _) => data.concat(_), []);\n  }\n\n  /**\n   * Operator whose value is simply its parameter hash. This operator is\n   * useful for enabling reactive updates to values of nested objects.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function Params(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Params, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.modified(_.modified());\n      this.value = _;\n      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n    }\n\n  });\n\n  /**\n   * Aggregate and pivot selected field values to become new fields.\n   * This operator is useful to construction cross-tabulations.\n   * @constructor\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n   * @param {function(object): *} params.field - The field to pivot on. The unique\n   *  values of this field become new field names in the output stream.\n   * @param {function(object): *} params.value - The field to populate pivoted fields.\n   *  The aggregate values of this field become the values of the new pivoted fields.\n   * @param {string} [params.op] - The aggregation operation for the value field,\n   *  applied per cell in the output stream. The default is \"sum\".\n   * @param {number} [params.limit] - An optional parameter indicating the maximum\n   *  number of pivoted fields to generate. The pivoted field names are sorted in\n   *  ascending order prior to enforcing the limit.\n   */\n\n  function Pivot(params) {\n    Aggregate.call(this, params);\n  }\n  Pivot.Definition = {\n    'type': 'Pivot',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'value',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'op',\n      'type': 'enum',\n      'values': ValidAggregateOps,\n      'default': 'sum'\n    }, {\n      'name': 'limit',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(Pivot, Aggregate, {\n    _transform: Aggregate.prototype.transform,\n\n    transform(_, pulse) {\n      return this._transform(aggregateParams(_, pulse), pulse);\n    }\n\n  }); // Shoehorn a pivot transform into an aggregate transform!\n  // First collect all unique pivot field values.\n  // Then generate aggregate fields for each output pivot field.\n\n  function aggregateParams(_, pulse) {\n    const key = _.field,\n          value = _.value,\n          op = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n          fields = vegaUtil.accessorFields(key).concat(vegaUtil.accessorFields(value)),\n          keys = pivotKeys(key, _.limit || 0, pulse); // if data stream content changes, pivot fields may change\n    // flag parameter modification to ensure re-initialization\n\n    if (pulse.changed()) _.set('__pivot__', null, null, true);\n    return {\n      key: _.key,\n      groupby: _.groupby,\n      ops: keys.map(() => op),\n      fields: keys.map(k => get(k, key, value, fields)),\n      as: keys.map(k => k + ''),\n      modified: _.modified.bind(_)\n    };\n  } // Generate aggregate field accessor.\n  // Output NaN for non-existent values; aggregator will ignore!\n\n\n  function get(k, key, value, fields) {\n    return vegaUtil.accessor(d => key(d) === k ? value(d) : NaN, fields, k + '');\n  } // Collect (and optionally limit) all unique pivot values.\n\n\n  function pivotKeys(key, limit, pulse) {\n    const map = {},\n          list = [];\n    pulse.visit(pulse.SOURCE, t => {\n      const k = key(t);\n\n      if (!map[k]) {\n        map[k] = 1;\n        list.push(k);\n      }\n    });\n    list.sort(vegaUtil.ascending);\n    return limit ? list.slice(0, limit) : list;\n  }\n\n  /**\n   * Partitions pre-faceted data into tuple subflows.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): Array<object>} params.field - The field\n   *   accessor for an array of subflow tuple objects.\n   */\n\n  function PreFacet(params) {\n    Facet.call(this, params);\n  }\n  vegaUtil.inherits(PreFacet, Facet, {\n    transform(_, pulse) {\n      const flow = _.subflow,\n            field = _.field,\n            subflow = t => this.subflow(vegaDataflow.tupleid(t), flow, pulse, t);\n\n      if (_.modified('field') || field && pulse.modified(vegaUtil.accessorFields(field))) {\n        vegaUtil.error('PreFacet does not support field modification.');\n      }\n\n      this.initTargets(); // reset list of active subflows\n\n      if (field) {\n        pulse.visit(pulse.MOD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.mod(_));\n        });\n        pulse.visit(pulse.ADD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.add(vegaDataflow.ingest(_)));\n        });\n        pulse.visit(pulse.REM, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.rem(_));\n        });\n      } else {\n        pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n        pulse.visit(pulse.ADD, t => subflow(t).add(t));\n        pulse.visit(pulse.REM, t => subflow(t).rem(t));\n      }\n\n      if (pulse.clean()) {\n        pulse.runAfter(() => this.clean());\n      }\n\n      return pulse;\n    }\n\n  });\n\n  /**\n   * Performs a relational projection, copying selected fields from source\n   * tuples to a new set of derived tuples.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *} params.fields - The fields to project,\n   *   as an array of field accessors. If unspecified, all fields will be\n   *   copied with names unchanged.\n   * @param {Array<string>} [params.as] - Output field names for each projected\n   *   field. Any unspecified fields will use the field name provided by\n   *   the field accessor.\n   */\n\n  function Project(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Project.Definition = {\n    'type': 'Project',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }]\n  };\n  vegaUtil.inherits(Project, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            as = fieldNames(_.fields, _.as || []),\n            derive = fields ? (s, t) => project(s, t, fields, as) : vegaDataflow.rederive;\n      let lut;\n\n      if (this.value) {\n        lut = this.value;\n      } else {\n        pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n      pulse.visit(pulse.ADD, t => {\n        const dt = derive(t, vegaDataflow.ingest({}));\n        lut[vegaDataflow.tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n      pulse.visit(pulse.MOD, t => {\n        out.mod.push(derive(t, lut[vegaDataflow.tupleid(t)]));\n      });\n      return out;\n    }\n\n  });\n\n  function project(s, t, fields, as) {\n    for (let i = 0, n = fields.length; i < n; ++i) {\n      t[as[i]] = fields[i](s);\n    }\n\n    return t;\n  }\n\n  /**\n   * Proxy the value of another operator as a pure signal value.\n   * Ensures no tuples are propagated.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {*} params.value - The value to proxy, becomes the value of this operator.\n   */\n\n  function Proxy(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Proxy, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.value = _.value;\n      return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n    }\n\n  });\n\n  /**\n   * Generates sample quantile values from an input data stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   over which to calculate quantile values.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {Array<number>} [params.probs] - An array of probabilities in\n   *   the range (0, 1) for which to compute quantile values. If not specified,\n   *   the *step* parameter will be used.\n   * @param {Array<number>} [params.step=0.01] - A probability step size for\n   *   sampling quantile values. All values from one-half the step size up to\n   *   1 (exclusive) will be sampled. This parameter is only used if the\n   *   *quantiles* parameter is not provided.\n   */\n\n  function Quantile(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Quantile.Definition = {\n    'type': 'Quantile',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'probs',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 0.01\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['prob', 'value']\n    }]\n  };\n  const EPSILON = 1e-14;\n  vegaUtil.inherits(Quantile, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n            as = _.as || ['prob', 'value'];\n\n      if (this.value && !_.modified() && !pulse.changed()) {\n        out.source = this.value;\n        return out;\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$1(source, _.groupby, _.field),\n            names = (_.groupby || []).map(vegaUtil.accessorName),\n            values = [],\n            step = _.step || 0.01,\n            p = _.probs || d3Array.range(step / 2, 1 - EPSILON, step),\n            n = p.length;\n      groups.forEach(g => {\n        const q = vegaStatistics.quantiles(g, p);\n\n        for (let i = 0; i < n; ++i) {\n          const t = {};\n\n          for (let i = 0; i < names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n\n          t[as[0]] = p[i];\n          t[as[1]] = q[i];\n          values.push(vegaDataflow.ingest(t));\n        }\n      });\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n      return out;\n    }\n\n  });\n\n  /**\n   * Relays a data stream between data processing pipelines.\n   * If the derive parameter is set, this transform will create derived\n   * copies of observed tuples. This provides derived data streams in which\n   * modifications to the tuples do not pollute an upstream data source.\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.derive=false] - Boolean flag indicating if\n   *   the transform should make derived copies of incoming tuples.\n   * @constructor\n   */\n\n  function Relay(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Relay, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      let out, lut;\n\n      if (this.value) {\n        lut = this.value;\n      } else {\n        out = pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n\n      if (_.derive) {\n        out = pulse.fork(pulse.NO_SOURCE);\n        pulse.visit(pulse.REM, t => {\n          const id = vegaDataflow.tupleid(t);\n          out.rem.push(lut[id]);\n          lut[id] = null;\n        });\n        pulse.visit(pulse.ADD, t => {\n          const dt = vegaDataflow.derive(t);\n          lut[vegaDataflow.tupleid(t)] = dt;\n          out.add.push(dt);\n        });\n        pulse.visit(pulse.MOD, t => {\n          const dt = lut[vegaDataflow.tupleid(t)];\n\n          for (const k in t) {\n            dt[k] = t[k]; // down stream writes may overwrite re-derived tuples\n            // conservatively mark all source fields as modified\n\n            out.modifies(k);\n          }\n\n          out.mod.push(dt);\n        });\n      }\n\n      return out;\n    }\n\n  });\n\n  /**\n   * Samples tuples passing through this operator.\n   * Uses reservoir sampling to maintain a representative sample.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.size=1000] - The maximum number of samples.\n   */\n\n  function Sample(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this.count = 0;\n  }\n  Sample.Definition = {\n    'type': 'Sample',\n    'metadata': {},\n    'params': [{\n      'name': 'size',\n      'type': 'number',\n      'default': 1000\n    }]\n  };\n  vegaUtil.inherits(Sample, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            mod = _.modified('size'),\n            num = _.size,\n            map = this.value.reduce((m, t) => (m[vegaDataflow.tupleid(t)] = 1, m), {});\n\n      let res = this.value,\n          cnt = this.count,\n          cap = 0; // sample reservoir update function\n\n      function update(t) {\n        let p, idx;\n\n        if (res.length < num) {\n          res.push(t);\n        } else {\n          idx = ~~((cnt + 1) * vegaStatistics.random());\n\n          if (idx < res.length && idx >= cap) {\n            p = res[idx];\n            if (map[vegaDataflow.tupleid(p)]) out.rem.push(p); // eviction\n\n            res[idx] = t;\n          }\n        }\n\n        ++cnt;\n      }\n\n      if (pulse.rem.length) {\n        // find all tuples that should be removed, add to output\n        pulse.visit(pulse.REM, t => {\n          const id = vegaDataflow.tupleid(t);\n\n          if (map[id]) {\n            map[id] = -1;\n            out.rem.push(t);\n          }\n\n          --cnt;\n        }); // filter removed tuples out of the sample reservoir\n\n        res = res.filter(t => map[vegaDataflow.tupleid(t)] !== -1);\n      }\n\n      if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n        // replenish sample if backing data source is available\n        cap = cnt = res.length;\n        pulse.visit(pulse.SOURCE, t => {\n          // update, but skip previously sampled tuples\n          if (!map[vegaDataflow.tupleid(t)]) update(t);\n        });\n        cap = -1;\n      }\n\n      if (mod && res.length > num) {\n        const n = res.length - num;\n\n        for (let i = 0; i < n; ++i) {\n          map[vegaDataflow.tupleid(res[i])] = -1;\n          out.rem.push(res[i]);\n        }\n\n        res = res.slice(n);\n      }\n\n      if (pulse.mod.length) {\n        // propagate modified tuples in the sample reservoir\n        pulse.visit(pulse.MOD, t => {\n          if (map[vegaDataflow.tupleid(t)]) out.mod.push(t);\n        });\n      }\n\n      if (pulse.add.length) {\n        // update sample reservoir\n        pulse.visit(pulse.ADD, update);\n      }\n\n      if (pulse.add.length || cap < 0) {\n        // output newly added tuples\n        out.add = res.filter(t => !map[vegaDataflow.tupleid(t)]);\n      }\n\n      this.count = cnt;\n      this.value = out.source = res;\n      return out;\n    }\n\n  });\n\n  /**\n   * Generates data tuples for a specified sequence range of numbers.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} params.start - The first number in the sequence.\n   * @param {number} params.stop - The last number (exclusive) in the sequence.\n   * @param {number} [params.step=1] - The step size between numbers in the sequence.\n   */\n\n  function Sequence(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Sequence.Definition = {\n    'type': 'Sequence',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'start',\n      'type': 'number',\n      'required': true\n    }, {\n      'name': 'stop',\n      'type': 'number',\n      'required': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'data'\n    }]\n  };\n  vegaUtil.inherits(Sequence, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (this.value && !_.modified()) return;\n      const out = pulse.materialize().fork(pulse.MOD),\n            as = _.as || 'data';\n      out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n      this.value = d3Array.range(_.start, _.stop, _.step || 1).map(v => {\n        const t = {};\n        t[as] = v;\n        return vegaDataflow.ingest(t);\n      });\n      out.add = pulse.add.concat(this.value);\n      return out;\n    }\n\n  });\n\n  /**\n   * Propagates a new pulse without any tuples so long as the input\n   * pulse contains some added, removed or modified tuples.\n   * @param {object} params - The parameters for this operator.\n   * @constructor\n   */\n\n  function Sieve(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n  vegaUtil.inherits(Sieve, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.value = pulse.source;\n      return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n    }\n\n  });\n\n  /**\n   * Discretize dates to specific time units.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The data field containing date/time values.\n   */\n\n  function TimeUnit(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  const OUTPUT = ['unit0', 'unit1'];\n  TimeUnit.Definition = {\n    'type': 'TimeUnit',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'interval',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'units',\n      'type': 'enum',\n      'values': vegaTime.TIME_UNITS,\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'maxbins',\n      'type': 'number',\n      'default': 40\n    }, {\n      'name': 'extent',\n      'type': 'date',\n      'array': true\n    }, {\n      'name': 'timezone',\n      'type': 'enum',\n      'default': 'local',\n      'values': ['local', 'utc']\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': OUTPUT\n    }]\n  };\n  vegaUtil.inherits(TimeUnit, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const field = _.field,\n            band = _.interval !== false,\n            utc = _.timezone === 'utc',\n            floor = this._floor(_, pulse),\n            offset = (utc ? vegaTime.utcInterval : vegaTime.timeInterval)(floor.unit).offset,\n            as = _.as || OUTPUT,\n            u0 = as[0],\n            u1 = as[1],\n            step = floor.step;\n\n      let min = floor.start || Infinity,\n          max = floor.stop || -Infinity,\n          flag = pulse.ADD;\n\n      if (_.modified() || pulse.modified(vegaUtil.accessorFields(field))) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n        min = Infinity;\n        max = -Infinity;\n      }\n\n      pulse.visit(flag, t => {\n        const v = field(t);\n        let a, b;\n\n        if (v == null) {\n          t[u0] = null;\n          if (band) t[u1] = null;\n        } else {\n          t[u0] = a = b = floor(v);\n          if (band) t[u1] = b = offset(a, step);\n          if (a < min) min = a;\n          if (b > max) max = b;\n        }\n      });\n      floor.start = min;\n      floor.stop = max;\n      return pulse.modifies(band ? as : u0);\n    },\n\n    _floor(_, pulse) {\n      const utc = _.timezone === 'utc'; // get parameters\n\n      const {\n        units,\n        step\n      } = _.units ? {\n        units: _.units,\n        step: _.step || 1\n      } : vegaTime.timeBin({\n        extent: _.extent || vegaUtil.extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      }); // check / standardize time units\n\n      const tunits = vegaTime.timeUnits(units),\n            prev = this.value || {},\n            floor = (utc ? vegaTime.utcFloor : vegaTime.timeFloor)(tunits, step);\n      floor.unit = vegaUtil.peek(tunits);\n      floor.units = tunits;\n      floor.step = step;\n      floor.start = prev.start;\n      floor.stop = prev.stop;\n      return this.value = floor;\n    }\n\n  });\n\n  /**\n   * An index that maps from unique, string-coerced, field values to tuples.\n   * Assumes that the field serves as a unique key with no duplicate values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field accessor to index.\n   */\n\n  function TupleIndex(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n  vegaUtil.inherits(TupleIndex, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            field = _.field,\n            index = this.value,\n            set = t => index.set(field(t), t);\n\n      let mod = true;\n\n      if (_.modified('field') || pulse.modified(field.fields)) {\n        index.clear();\n        pulse.visit(pulse.SOURCE, set);\n      } else if (pulse.changed()) {\n        pulse.visit(pulse.REM, t => index.delete(field(t)));\n        pulse.visit(pulse.ADD, set);\n      } else {\n        mod = false;\n      }\n\n      this.modified(mod);\n      if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n      return pulse.fork();\n    }\n\n  });\n\n  /**\n   * Extracts an array of values. Assumes the source data has already been\n   * reduced as needed (e.g., by an upstream Aggregate transform).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The domain field to extract.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for sorting the values. The comparator will be\n   *   applied to backing tuples prior to value extraction.\n   */\n\n  function Values(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Values, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);\n\n      if (run) {\n        this.value = (_.sort ? pulse.source.slice().sort(vegaDataflow.stableCompare(_.sort)) : pulse.source).map(_.field);\n      }\n    }\n\n  });\n\n  function WindowOp(op, field, param, as) {\n    const fn = WindowOps[op](field, param);\n    return {\n      init: fn.init || vegaUtil.zero,\n      update: function (w, t) {\n        t[as] = fn.next(w);\n      }\n    };\n  }\n  const WindowOps = {\n    row_number: function () {\n      return {\n        next: w => w.index + 1\n      };\n    },\n    rank: function () {\n      let rank;\n      return {\n        init: () => rank = 1,\n        next: w => {\n          const i = w.index,\n                data = w.data;\n          return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;\n        }\n      };\n    },\n    dense_rank: function () {\n      let drank;\n      return {\n        init: () => drank = 1,\n        next: w => {\n          const i = w.index,\n                d = w.data;\n          return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;\n        }\n      };\n    },\n    percent_rank: function () {\n      const rank = WindowOps.rank(),\n            next = rank.next;\n      return {\n        init: rank.init,\n        next: w => (next(w) - 1) / (w.data.length - 1)\n      };\n    },\n    cume_dist: function () {\n      let cume;\n      return {\n        init: () => cume = 0,\n        next: w => {\n          const d = w.data,\n                c = w.compare;\n          let i = w.index;\n\n          if (cume < i) {\n            while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n\n            cume = i;\n          }\n\n          return (1 + cume) / d.length;\n        }\n      };\n    },\n    ntile: function (field, num) {\n      num = +num;\n      if (!(num > 0)) vegaUtil.error('ntile num must be greater than zero.');\n      const cume = WindowOps.cume_dist(),\n            next = cume.next;\n      return {\n        init: cume.init,\n        next: w => Math.ceil(num * next(w))\n      };\n    },\n    lag: function (field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index - offset;\n          return i >= 0 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    lead: function (field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index + offset,\n                d = w.data;\n          return i < d.length ? field(d[i]) : null;\n        }\n      };\n    },\n    first_value: function (field) {\n      return {\n        next: w => field(w.data[w.i0])\n      };\n    },\n    last_value: function (field) {\n      return {\n        next: w => field(w.data[w.i1 - 1])\n      };\n    },\n    nth_value: function (field, nth) {\n      nth = +nth;\n      if (!(nth > 0)) vegaUtil.error('nth_value nth must be greater than zero.');\n      return {\n        next: w => {\n          const i = w.i0 + (nth - 1);\n          return i < w.i1 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    prev_value: function (field) {\n      let prev;\n      return {\n        init: () => prev = null,\n        next: w => {\n          const v = field(w.data[w.index]);\n          return v != null ? prev = v : prev;\n        }\n      };\n    },\n    next_value: function (field) {\n      let v, i;\n      return {\n        init: () => (v = null, i = -1),\n        next: w => {\n          const d = w.data;\n          return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);\n        }\n      };\n    }\n  };\n\n  function find(field, data, index) {\n    for (let n = data.length; index < n; ++index) {\n      const v = field(data[index]);\n      if (v != null) return index;\n    }\n\n    return -1;\n  }\n\n  const ValidWindowOps = Object.keys(WindowOps);\n\n  function WindowState(_) {\n    const ops = vegaUtil.array(_.ops),\n          fields = vegaUtil.array(_.fields),\n          params = vegaUtil.array(_.params),\n          as = vegaUtil.array(_.as),\n          outputs = this.outputs = [],\n          windows = this.windows = [],\n          inputs = {},\n          map = {},\n          counts = [],\n          measures = [];\n    let countOnly = true;\n\n    function visitInputs(f) {\n      vegaUtil.array(vegaUtil.accessorFields(f)).forEach(_ => inputs[_] = 1);\n    }\n\n    visitInputs(_.sort);\n    ops.forEach((op, i) => {\n      const field = fields[i],\n            mname = vegaUtil.accessorName(field),\n            name = measureName(op, mname, as[i]);\n      visitInputs(field);\n      outputs.push(name); // Window operation\n\n      if (vegaUtil.hasOwnProperty(WindowOps, op)) {\n        windows.push(WindowOp(op, fields[i], params[i], name));\n      } // Aggregate operation\n      else {\n          if (field == null && op !== 'count') {\n            vegaUtil.error('Null aggregate field specified.');\n          }\n\n          if (op === 'count') {\n            counts.push(name);\n            return;\n          }\n\n          countOnly = false;\n          let m = map[mname];\n\n          if (!m) {\n            m = map[mname] = [];\n            m.field = field;\n            measures.push(m);\n          }\n\n          m.push(createMeasure(op, name));\n        }\n    });\n\n    if (counts.length || measures.length) {\n      this.cell = cell(measures, counts, countOnly);\n    }\n\n    this.inputs = Object.keys(inputs);\n  }\n  const prototype = WindowState.prototype;\n\n  prototype.init = function () {\n    this.windows.forEach(_ => _.init());\n    if (this.cell) this.cell.init();\n  };\n\n  prototype.update = function (w, t) {\n    const cell = this.cell,\n          wind = this.windows,\n          data = w.data,\n          m = wind && wind.length;\n    let j;\n\n    if (cell) {\n      for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n\n      for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n\n      cell.set(t);\n    }\n\n    for (j = 0; j < m; ++j) wind[j].update(w, t);\n  };\n\n  function cell(measures, counts, countOnly) {\n    measures = measures.map(m => compileMeasures(m, m.field));\n    const cell = {\n      num: 0,\n      agg: null,\n      store: false,\n      count: counts\n    };\n\n    if (!countOnly) {\n      var n = measures.length,\n          a = cell.agg = Array(n),\n          i = 0;\n\n      for (; i < n; ++i) a[i] = new measures[i](cell);\n    }\n\n    if (cell.store) {\n      var store = cell.data = new TupleStore();\n    }\n\n    cell.add = function (t) {\n      cell.num += 1;\n      if (countOnly) return;\n      if (store) store.add(t);\n\n      for (let i = 0; i < n; ++i) {\n        a[i].add(a[i].get(t), t);\n      }\n    };\n\n    cell.rem = function (t) {\n      cell.num -= 1;\n      if (countOnly) return;\n      if (store) store.rem(t);\n\n      for (let i = 0; i < n; ++i) {\n        a[i].rem(a[i].get(t), t);\n      }\n    };\n\n    cell.set = function (t) {\n      let i, n; // consolidate stored values\n\n      if (store) store.values(); // update tuple properties\n\n      for (i = 0, n = counts.length; i < n; ++i) t[counts[i]] = cell.num;\n\n      if (!countOnly) for (i = 0, n = a.length; i < n; ++i) a[i].set(t);\n    };\n\n    cell.init = function () {\n      cell.num = 0;\n      if (store) store.reset();\n\n      for (let i = 0; i < n; ++i) a[i].init();\n    };\n\n    return cell;\n  }\n\n  /**\n   * Perform window calculations and write results to the input stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n   * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors\n   *   for data fields to use as inputs to window operations.\n   * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n   * @param {Array<string>} [params.as] - An array of output field names for window operations.\n   * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n   * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n   *   number alone, ignoring peers with identical sort values. If false (default),\n   *   the window boundaries will be adjusted to include peer values.\n   */\n\n  function Window(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._mlen = 0;\n    this._mods = [];\n  }\n  Window.Definition = {\n    'type': 'Window',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidWindowOps.concat(ValidAggregateOps)\n    }, {\n      'name': 'params',\n      'type': 'number',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'frame',\n      'type': 'number',\n      'null': true,\n      'array': true,\n      'length': 2,\n      'default': [null, 0]\n    }, {\n      'name': 'ignorePeers',\n      'type': 'boolean',\n      'default': false\n    }]\n  };\n  vegaUtil.inherits(Window, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.stamp = pulse.stamp;\n\n      const mod = _.modified(),\n            cmp = vegaDataflow.stableCompare(_.sort),\n            key = groupkey(_.groupby),\n            group = t => this.group(key(t)); // initialize window state\n\n\n      let state = this.state;\n\n      if (!state || mod) {\n        state = this.state = new WindowState(_);\n      } // partition input tuples\n\n\n      if (mod || pulse.modified(state.inputs)) {\n        this.value = {};\n        pulse.visit(pulse.SOURCE, t => group(t).add(t));\n      } else {\n        pulse.visit(pulse.REM, t => group(t).remove(t));\n        pulse.visit(pulse.ADD, t => group(t).add(t));\n      } // perform window calculations for each modified partition\n\n\n      for (let i = 0, n = this._mlen; i < n; ++i) {\n        processPartition(this._mods[i], state, cmp, _);\n      }\n\n      this._mlen = 0;\n      this._mods = []; // TODO don't reflow everything?\n\n      return pulse.reflow(mod).modifies(state.outputs);\n    },\n\n    group(key) {\n      let group = this.value[key];\n\n      if (!group) {\n        group = this.value[key] = SortedList(vegaDataflow.tupleid);\n        group.stamp = -1;\n      }\n\n      if (group.stamp < this.stamp) {\n        group.stamp = this.stamp;\n        this._mods[this._mlen++] = group;\n      }\n\n      return group;\n    }\n\n  });\n\n  function processPartition(list, state, cmp, _) {\n    const sort = _.sort,\n          range = sort && !_.ignorePeers,\n          frame = _.frame || [null, 0],\n          data = list.data(cmp),\n          // use cmp for stable sort\n    n = data.length,\n          b = range ? d3Array.bisector(sort) : null,\n          w = {\n      i0: 0,\n      i1: 0,\n      p0: 0,\n      p1: 0,\n      index: 0,\n      data: data,\n      compare: sort || vegaUtil.constant(-1)\n    };\n    state.init();\n\n    for (let i = 0; i < n; ++i) {\n      setWindow(w, frame, i, n);\n      if (range) adjustRange(w, b);\n      state.update(w, data[i]);\n    }\n  }\n\n  function setWindow(w, f, i, n) {\n    w.p0 = w.i0;\n    w.p1 = w.i1;\n    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n    w.index = i;\n  } // if frame type is 'range', adjust window for peer values\n\n\n  function adjustRange(w, bisect) {\n    const r0 = w.i0,\n          r1 = w.i1 - 1,\n          c = w.compare,\n          d = w.data,\n          n = d.length - 1;\n    if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);\n    if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);\n  }\n\n  exports.aggregate = Aggregate;\n  exports.bin = Bin;\n  exports.collect = Collect;\n  exports.compare = Compare;\n  exports.countpattern = CountPattern;\n  exports.cross = Cross;\n  exports.density = Density;\n  exports.dotbin = DotBin;\n  exports.expression = Expression;\n  exports.extent = Extent;\n  exports.facet = Facet;\n  exports.field = Field;\n  exports.filter = Filter;\n  exports.flatten = Flatten;\n  exports.fold = Fold;\n  exports.formula = Formula;\n  exports.generate = Generate;\n  exports.impute = Impute;\n  exports.joinaggregate = JoinAggregate;\n  exports.kde = KDE;\n  exports.key = Key;\n  exports.load = Load;\n  exports.lookup = Lookup;\n  exports.multiextent = MultiExtent;\n  exports.multivalues = MultiValues;\n  exports.params = Params;\n  exports.pivot = Pivot;\n  exports.prefacet = PreFacet;\n  exports.project = Project;\n  exports.proxy = Proxy;\n  exports.quantile = Quantile;\n  exports.relay = Relay;\n  exports.sample = Sample;\n  exports.sequence = Sequence;\n  exports.sieve = Sieve;\n  exports.subflow = Subflow;\n  exports.timeunit = TimeUnit;\n  exports.tupleindex = TupleIndex;\n  exports.values = Values;\n  exports.window = Window;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","d3","vegaUtil","vegaDataflow","vegaStatistics","d3Array","vegaTime","multikey","f","x","n","length","i","k","String","groupkey","fields","measure","key","value","out","extend","name","base_op","compareIndex","a","b","idx","resolve","agg","map","forEach","getreqs","req","AggregateOps","Object","values","sort","init","missing","valid","_ops","op","add","v","t","rem","set","_out","compileMeasures","field","ctr","cell","ops","get","identity","slice","prototype","TupleStore","_key","tupleid","reset","Aggregate","params","Transform","call","_adds","_mods","_mlen","_alen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_outputs","_inputs","_prev","_counts","Bin","SortedList","idFunc","source","input","data","cnt","push","remove","size","compare","resort","filter","merge","concat","Collect","Compare","Operator","update$5","_","modified","orders","CountPattern","Cross","parse","def","func","FUNCTION","hasOwnProperty","Distributions","error","d","FIELD","from","DISTRIBUTIONS","Density","pulse","fieldNames","as","accessorName","partition$1","groupby","groups","g","dims","DotBin","Expression","update$4","expr","accessor","datum","accessorFields","Extent","undefined","Subflow","parent","count","Facet","_keys","fastmap","_targets","active","a.forEach","Field","update$3","isArray","array","Filter","Flatten","Fold","Formula","Generate","Impute","getValue","m","method","Methods","getField","NaN","partition","keyvals","domain","kMap","gMap","group","j","gKey","gVals","Empty","JoinAggregate","KDE","Key","update$2","flat","Load","_pending","stop","output","ingest","fork","NO_FIELDS","NO_SOURCE","clean","Lookup","MultiExtent","update$1","ext","extents","min","Infinity","max","e","MultiValues","update","reduce","Params","Pivot","aggregateParams","keys","pivotKeys","limit","changed","bind","list","visit","SOURCE","ascending","PreFacet","Project","Proxy","Quantile","Relay","Sample","Sequence","Sieve","TimeUnit","TupleIndex","Values","WindowOp","param","fn","WindowOps","zero","w","next","WindowState","visitInputs","inputs","outputs","windows","counts","measures","countOnly","mname","num","store","Array","cell.add","cell.rem","cell.set","cell.init","Window","processPartition","state","cmp","range","ignorePeers","frame","bisector","i0","i1","p0","p1","index","constant","Math","abs","r0","r1","c","left","right","noop","__count__","sum","product","mean","mean_d","average","variance","dev","variancep","stdev","sqrt","stdevp","stderr","distinct","ci0","ci1","median","q2","q1","q3","Number","isNaN","argmin","argmax","ValidAggregateOps","prototype$1","prototype$1.reset","_add","_rem","_q","_get","_ext","prototype$1.add","prototype$1.rem","prototype$1.values","r","prototype$1.distinct","s","extent","prototype$1.extent","extentIndex","prototype$1.argmin","prototype$1.argmax","prototype$1.min","prototype$1.max","quartile","prototype$1.quartile","quartiles","prototype$1.q1","prototype$1.q2","prototype$1.q3","ci","prototype$1.ci","_ci","bootstrapCI","prototype$1.ci0","prototype$1.ci1","Definition","inherits","transform","aggr","mod","stamp","REM","ADD","modifies","drop","cross","runAfter","changes","collect","cells","tuple","vals","generate","base","curr","inputVisit","inputMap","dname","cellkey","outname","newcell","newtuple","p","names","replace","celltuple","adds","mods","prev","band","interval","bins","_bins","start","step","b0","b1","reflow","flag","ADD_MOD","bin","ceil","anchor","floor","toNumber","EPSILON$1","ALL","materialize","stableCompare","root","process","case","text","toUpperCase","toLowerCase","tokens","match","test","_parameterCheck","_match","_stop","_finish","RegExp","stopwords","pattern","tuples","_tuples","ADD_REM","truthy","kde","randomKDE","mixture","randomMixture","normal","randomNormal","lognormal","randomLogNormal","uniform","randomUniform","distributions","dist","distribution","minsteps","steps","maxsteps","sampleCurve","Output","smooth","span","dotbin","isFinite","dataflow","warn","connect","target","detachSubflow","targets","evaluate","activate","flow","subflow","flows","sf","_group","df","detached","detach","initTargets","act","cache","rekey","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","revisit","isMod","has","arrays","maxlen","l","derive","fnames","initonly","gen","generator","impute","fName","kName","gNames","kVal","_impute","bandwidth","cumulative","density","scale","local","StopPropagation","format","async","request","url","then","res","touch","defaultValue","default","some","_transform","rederive","lut","addAll","dt","probs","EPSILON","q","quantiles","random","cap","OUTPUT","TIME_UNITS","utc","timezone","_floor","offset","utcInterval","timeInterval","unit","u0","u1","units","timeBin","maxbins","tunits","timeUnits","utcFloor","timeFloor","peek","clear","row_number","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","lag","lead","first_value","last_value","nth_value","nth","prev_value","next_value","ValidWindowOps","prototype.init","prototype.update","wind","aggregate","countpattern","expression","facet","flatten","fold","formula","joinaggregate","load","lookup","multiextent","multivalues","pivot","prefacet","project","proxy","quantile","relay","sample","sequence","sieve","timeunit","tupleindex","window","defineProperty"]
}
