{
"version":3,
"file":"goog.uri.uri.js",
"lineCount":620,
"mappings":"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",
"sources":["goog/uri/uri.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Class for parsing and formatting URIs.\n *\n * Use goog.Uri(string) to parse a URI string.  Use goog.Uri.create(...) to\n * create a new instance of the goog.Uri object from Uri parts.\n *\n * e.g: <code>var myUri = new goog.Uri(window.location);</code>\n *\n * Implements RFC 3986 for parsing/formatting URIs.\n * http://www.ietf.org/rfc/rfc3986.txt\n *\n * Some changes have been made to the interface (more like .NETs), though the\n * internal representation is now of un-encoded parts, this will change the\n * behavior slightly.\n *\n * @author msamuel@google.com (Mike Samuel)\n */\n\ngoog.provide('goog.Uri');\ngoog.provide('goog.Uri.QueryData');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.string');\ngoog.require('goog.structs');\ngoog.require('goog.structs.Map');\ngoog.require('goog.uri.utils');\ngoog.require('goog.uri.utils.ComponentIndex');\ngoog.require('goog.uri.utils.StandardQueryParam');\n\n\n\n/**\n * This class contains setters and getters for the parts of the URI.\n * The <code>getXyz</code>/<code>setXyz</code> methods return the decoded part\n * -- so<code>goog.Uri.parse('/foo%20bar').getPath()</code> will return the\n * decoded path, <code>/foo bar</code>.\n *\n * Reserved characters (see RFC 3986 section 2.2) can be present in\n * their percent-encoded form in scheme, domain, and path URI components and\n * will not be auto-decoded. For example:\n * <code>goog.Uri.parse('rel%61tive/path%2fto/resource').getPath()</code> will\n * return <code>relative/path%2fto/resource</code>.\n *\n * The constructor accepts an optional unparsed, raw URI string.  The parser\n * is relaxed, so special characters that aren't escaped but don't cause\n * ambiguities will not cause parse failures.\n *\n * All setters return <code>this</code> and so may be chained, a la\n * <code>goog.Uri.parse('/foo').setFragment('part').toString()</code>.\n *\n * @param {*=} opt_uri Optional string URI to parse\n *        (use goog.Uri.create() to create a URI from parts), or if\n *        a goog.Uri is passed, a clone is created.\n * @param {boolean=} opt_ignoreCase If true, #getParameterValue will ignore\n * the case of the parameter name.\n *\n * @throws URIError If opt_uri is provided and URI is malformed (that is,\n *     if decodeURIComponent fails on any of the URI components).\n * @constructor\n * @struct\n */\ngoog.Uri = function(opt_uri, opt_ignoreCase) {\n  /**\n   * Scheme such as \"http\".\n   * @private {string}\n   */\n  this.scheme_ = '';\n\n  /**\n   * User credentials in the form \"username:password\".\n   * @private {string}\n   */\n  this.userInfo_ = '';\n\n  /**\n   * Domain part, e.g. \"www.google.com\".\n   * @private {string}\n   */\n  this.domain_ = '';\n\n  /**\n   * Port, e.g. 8080.\n   * @private {?number}\n   */\n  this.port_ = null;\n\n  /**\n   * Path, e.g. \"/tests/img.png\".\n   * @private {string}\n   */\n  this.path_ = '';\n\n  /**\n   * The fragment without the #.\n   * @private {string}\n   */\n  this.fragment_ = '';\n\n  /**\n   * Whether or not this Uri should be treated as Read Only.\n   * @private {boolean}\n   */\n  this.isReadOnly_ = false;\n\n  /**\n   * Whether or not to ignore case when comparing query params.\n   * @private {boolean}\n   */\n  this.ignoreCase_ = false;\n\n  /**\n   * Object representing query data.\n   * @private {!goog.Uri.QueryData}\n   */\n  this.queryData_;\n\n  // Parse in the uri string\n  var m;\n  if (opt_uri instanceof goog.Uri) {\n    this.ignoreCase_ = (opt_ignoreCase !== undefined) ? opt_ignoreCase :\n                                                        opt_uri.getIgnoreCase();\n    this.setScheme(opt_uri.getScheme());\n    this.setUserInfo(opt_uri.getUserInfo());\n    this.setDomain(opt_uri.getDomain());\n    this.setPort(opt_uri.getPort());\n    this.setPath(opt_uri.getPath());\n    this.setQueryData(opt_uri.getQueryData().clone());\n    this.setFragment(opt_uri.getFragment());\n  } else if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {\n    this.ignoreCase_ = !!opt_ignoreCase;\n\n    // Set the parts -- decoding as we do so.\n    // COMPATIBILITY NOTE - In IE, unmatched fields may be empty strings,\n    // whereas in other browsers they will be undefined.\n    this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || '', true);\n    this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || '', true);\n    this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || '', true);\n    this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);\n    this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || '', true);\n    this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || '', true);\n    this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || '', true);\n\n  } else {\n    this.ignoreCase_ = !!opt_ignoreCase;\n    this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);\n  }\n};\n\n\n/**\n * Parameter name added to stop caching.\n * @type {string}\n */\ngoog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;\n\n\n/**\n * @return {string} The string form of the url.\n * @override\n */\ngoog.Uri.prototype.toString = function() {\n  var out = [];\n\n  var scheme = this.getScheme();\n  if (scheme) {\n    out.push(\n        goog.Uri.encodeSpecialChars_(\n            scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, true),\n        ':');\n  }\n\n  var domain = this.getDomain();\n  if (domain || scheme == 'file') {\n    out.push('//');\n\n    var userInfo = this.getUserInfo();\n    if (userInfo) {\n      out.push(\n          goog.Uri.encodeSpecialChars_(\n              userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_, true),\n          '@');\n    }\n\n    out.push(goog.Uri.removeDoubleEncoding_(goog.string.urlEncode(domain)));\n\n    var port = this.getPort();\n    if (port != null) {\n      out.push(':', String(port));\n    }\n  }\n\n  var path = this.getPath();\n  if (path) {\n    if (this.hasDomain() && path.charAt(0) != '/') {\n      out.push('/');\n    }\n    out.push(\n        goog.Uri.encodeSpecialChars_(\n            path, path.charAt(0) == '/' ? goog.Uri.reDisallowedInAbsolutePath_ :\n                                          goog.Uri.reDisallowedInRelativePath_,\n            true));\n  }\n\n  var query = this.getEncodedQuery();\n  if (query) {\n    out.push('?', query);\n  }\n\n  var fragment = this.getFragment();\n  if (fragment) {\n    out.push(\n        '#', goog.Uri.encodeSpecialChars_(\n                 fragment, goog.Uri.reDisallowedInFragment_));\n  }\n  return out.join('');\n};\n\n\n/**\n * Resolves the given relative URI (a goog.Uri object), using the URI\n * represented by this instance as the base URI.\n *\n * There are several kinds of relative URIs:<br>\n * 1. foo - replaces the last part of the path, the whole query and fragment<br>\n * 2. /foo - replaces the path, the query and fragment<br>\n * 3. //foo - replaces everything from the domain on.  foo is a domain name<br>\n * 4. ?foo - replace the query and fragment<br>\n * 5. #foo - replace the fragment only\n *\n * Additionally, if relative URI has a non-empty path, all \"..\" and \".\"\n * segments will be resolved, as described in RFC 3986.\n *\n * @param {!goog.Uri} relativeUri The relative URI to resolve.\n * @return {!goog.Uri} The resolved URI.\n */\ngoog.Uri.prototype.resolve = function(relativeUri) {\n\n  var absoluteUri = this.clone();\n\n  // we satisfy these conditions by looking for the first part of relativeUri\n  // that is not blank and applying defaults to the rest\n\n  var overridden = relativeUri.hasScheme();\n\n  if (overridden) {\n    absoluteUri.setScheme(relativeUri.getScheme());\n  } else {\n    overridden = relativeUri.hasUserInfo();\n  }\n\n  if (overridden) {\n    absoluteUri.setUserInfo(relativeUri.getUserInfo());\n  } else {\n    overridden = relativeUri.hasDomain();\n  }\n\n  if (overridden) {\n    absoluteUri.setDomain(relativeUri.getDomain());\n  } else {\n    overridden = relativeUri.hasPort();\n  }\n\n  var path = relativeUri.getPath();\n  if (overridden) {\n    absoluteUri.setPort(relativeUri.getPort());\n  } else {\n    overridden = relativeUri.hasPath();\n    if (overridden) {\n      // resolve path properly\n      if (path.charAt(0) != '/') {\n        // path is relative\n        if (this.hasDomain() && !this.hasPath()) {\n          // RFC 3986, section 5.2.3, case 1\n          path = '/' + path;\n        } else {\n          // RFC 3986, section 5.2.3, case 2\n          var lastSlashIndex = absoluteUri.getPath().lastIndexOf('/');\n          if (lastSlashIndex != -1) {\n            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;\n          }\n        }\n      }\n      path = goog.Uri.removeDotSegments(path);\n    }\n  }\n\n  if (overridden) {\n    absoluteUri.setPath(path);\n  } else {\n    overridden = relativeUri.hasQuery();\n  }\n\n  if (overridden) {\n    absoluteUri.setQueryData(relativeUri.getQueryData().clone());\n  } else {\n    overridden = relativeUri.hasFragment();\n  }\n\n  if (overridden) {\n    absoluteUri.setFragment(relativeUri.getFragment());\n  }\n\n  return absoluteUri;\n};\n\n\n/**\n * Clones the URI instance.\n * @return {!goog.Uri} New instance of the URI object.\n */\ngoog.Uri.prototype.clone = function() {\n  return new goog.Uri(this);\n};\n\n\n/**\n * @return {string} The encoded scheme/protocol for the URI.\n */\ngoog.Uri.prototype.getScheme = function() {\n  return this.scheme_;\n};\n\n\n/**\n * Sets the scheme/protocol.\n * @throws URIError If opt_decode is true and newScheme is malformed (that is,\n *     if decodeURIComponent fails).\n * @param {string} newScheme New scheme value.\n * @param {boolean=} opt_decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setScheme = function(newScheme, opt_decode) {\n  this.enforceReadOnly();\n  this.scheme_ =\n      opt_decode ? goog.Uri.decodeOrEmpty_(newScheme, true) : newScheme;\n\n  // remove an : at the end of the scheme so somebody can pass in\n  // window.location.protocol\n  if (this.scheme_) {\n    this.scheme_ = this.scheme_.replace(/:$/, '');\n  }\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the scheme has been set.\n */\ngoog.Uri.prototype.hasScheme = function() {\n  return !!this.scheme_;\n};\n\n\n/**\n * @return {string} The decoded user info.\n */\ngoog.Uri.prototype.getUserInfo = function() {\n  return this.userInfo_;\n};\n\n\n/**\n * Sets the userInfo.\n * @throws URIError If opt_decode is true and newUserInfo is malformed (that is,\n *     if decodeURIComponent fails).\n * @param {string} newUserInfo New userInfo value.\n * @param {boolean=} opt_decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {\n  this.enforceReadOnly();\n  this.userInfo_ =\n      opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the user info has been set.\n */\ngoog.Uri.prototype.hasUserInfo = function() {\n  return !!this.userInfo_;\n};\n\n\n/**\n * @return {string} The decoded domain.\n */\ngoog.Uri.prototype.getDomain = function() {\n  return this.domain_;\n};\n\n\n/**\n * Sets the domain.\n * @throws URIError If opt_decode is true and newDomain is malformed (that is,\n *     if decodeURIComponent fails).\n * @param {string} newDomain New domain value.\n * @param {boolean=} opt_decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setDomain = function(newDomain, opt_decode) {\n  this.enforceReadOnly();\n  this.domain_ =\n      opt_decode ? goog.Uri.decodeOrEmpty_(newDomain, true) : newDomain;\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the domain has been set.\n */\ngoog.Uri.prototype.hasDomain = function() {\n  return !!this.domain_;\n};\n\n\n/**\n * @return {?number} The port number.\n */\ngoog.Uri.prototype.getPort = function() {\n  return this.port_;\n};\n\n\n/**\n * Sets the port number.\n * @param {*} newPort Port number. Will be explicitly casted to a number.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setPort = function(newPort) {\n  this.enforceReadOnly();\n\n  if (newPort) {\n    newPort = Number(newPort);\n    if (isNaN(newPort) || newPort < 0) {\n      throw new Error('Bad port number ' + newPort);\n    }\n    this.port_ = newPort;\n  } else {\n    this.port_ = null;\n  }\n\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the port has been set.\n */\ngoog.Uri.prototype.hasPort = function() {\n  return this.port_ != null;\n};\n\n\n/**\n  * @return {string} The decoded path.\n */\ngoog.Uri.prototype.getPath = function() {\n  return this.path_;\n};\n\n\n/**\n * Sets the path.\n * @throws URIError If opt_decode is true and newPath is malformed (that is,\n *     if decodeURIComponent fails).\n * @param {string} newPath New path value.\n * @param {boolean=} opt_decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setPath = function(newPath, opt_decode) {\n  this.enforceReadOnly();\n  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath, true) : newPath;\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the path has been set.\n */\ngoog.Uri.prototype.hasPath = function() {\n  return !!this.path_;\n};\n\n\n/**\n * @return {boolean} Whether the query string has been set.\n */\ngoog.Uri.prototype.hasQuery = function() {\n  return this.queryData_.toString() !== '';\n};\n\n\n/**\n * Sets the query data.\n * @param {goog.Uri.QueryData|string|undefined} queryData QueryData object.\n * @param {boolean=} opt_decode Optional param for whether to decode new value.\n *     Applies only if queryData is a string.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setQueryData = function(queryData, opt_decode) {\n  this.enforceReadOnly();\n\n  if (queryData instanceof goog.Uri.QueryData) {\n    this.queryData_ = queryData;\n    this.queryData_.setIgnoreCase(this.ignoreCase_);\n  } else {\n    if (!opt_decode) {\n      // QueryData accepts encoded query string, so encode it if\n      // opt_decode flag is not true.\n      queryData = goog.Uri.encodeSpecialChars_(\n          queryData, goog.Uri.reDisallowedInQuery_);\n    }\n    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);\n  }\n\n  return this;\n};\n\n\n/**\n * Sets the URI query.\n * @param {string} newQuery New query value.\n * @param {boolean=} opt_decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setQuery = function(newQuery, opt_decode) {\n  return this.setQueryData(newQuery, opt_decode);\n};\n\n\n/**\n * @return {string} The encoded URI query, not including the ?.\n */\ngoog.Uri.prototype.getEncodedQuery = function() {\n  return this.queryData_.toString();\n};\n\n\n/**\n * @return {string} The decoded URI query, not including the ?.\n */\ngoog.Uri.prototype.getDecodedQuery = function() {\n  return this.queryData_.toDecodedString();\n};\n\n\n/**\n * Returns the query data.\n * @return {!goog.Uri.QueryData} QueryData object.\n */\ngoog.Uri.prototype.getQueryData = function() {\n  return this.queryData_;\n};\n\n\n/**\n * @return {string} The encoded URI query, not including the ?.\n *\n * Warning: This method, unlike other getter methods, returns encoded\n * value, instead of decoded one.\n */\ngoog.Uri.prototype.getQuery = function() {\n  return this.getEncodedQuery();\n};\n\n\n/**\n * Sets the value of the named query parameters, clearing previous values for\n * that key.\n *\n * @param {string} key The parameter to set.\n * @param {*} value The new value. Value does not need to be encoded.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setParameterValue = function(key, value) {\n  this.enforceReadOnly();\n  this.queryData_.set(key, value);\n  return this;\n};\n\n\n/**\n * Sets the values of the named query parameters, clearing previous values for\n * that key.  Not new values will currently be moved to the end of the query\n * string.\n *\n * So, <code>goog.Uri.parse('foo?a=b&c=d&e=f').setParameterValues('c', ['new'])\n * </code> yields <tt>foo?a=b&e=f&c=new</tt>.</p>\n *\n * @param {string} key The parameter to set.\n * @param {*} values The new values. If values is a single\n *     string then it will be treated as the sole value. Values do not need to\n *     be encoded.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setParameterValues = function(key, values) {\n  this.enforceReadOnly();\n\n  if (!goog.isArray(values)) {\n    values = [String(values)];\n  }\n\n  this.queryData_.setValues(key, values);\n\n  return this;\n};\n\n\n/**\n * Returns the value<b>s</b> for a given cgi parameter as a list of decoded\n * query parameter values.\n * @param {string} name The parameter to get values for.\n * @return {!Array<?>} The values for a given cgi parameter as a list of\n *     decoded query parameter values.\n */\ngoog.Uri.prototype.getParameterValues = function(name) {\n  return this.queryData_.getValues(name);\n};\n\n\n/**\n * Returns the first value for a given cgi parameter or undefined if the given\n * parameter name does not appear in the query string.\n * @param {string} paramName Unescaped parameter name.\n * @return {string|undefined} The first value for a given cgi parameter or\n *     undefined if the given parameter name does not appear in the query\n *     string.\n */\ngoog.Uri.prototype.getParameterValue = function(paramName) {\n  return /** @type {string|undefined} */ (this.queryData_.get(paramName));\n};\n\n\n/**\n * @return {string} The URI fragment, not including the #.\n */\ngoog.Uri.prototype.getFragment = function() {\n  return this.fragment_;\n};\n\n\n/**\n * Sets the URI fragment.\n * @throws URIError If opt_decode is true and newFragment is malformed (that is,\n *     if decodeURIComponent fails).\n * @param {string} newFragment New fragment value.\n * @param {boolean=} opt_decode Optional param for whether to decode new value.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.setFragment = function(newFragment, opt_decode) {\n  this.enforceReadOnly();\n  this.fragment_ =\n      opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the URI has a fragment set.\n */\ngoog.Uri.prototype.hasFragment = function() {\n  return !!this.fragment_;\n};\n\n\n/**\n * Returns true if this has the same domain as that of uri2.\n * @param {!goog.Uri} uri2 The URI object to compare to.\n * @return {boolean} true if same domain; false otherwise.\n */\ngoog.Uri.prototype.hasSameDomainAs = function(uri2) {\n  return ((!this.hasDomain() && !uri2.hasDomain()) ||\n          this.getDomain() == uri2.getDomain()) &&\n      ((!this.hasPort() && !uri2.hasPort()) ||\n       this.getPort() == uri2.getPort());\n};\n\n\n/**\n * Adds a random parameter to the Uri.\n * @return {!goog.Uri} Reference to this Uri object.\n */\ngoog.Uri.prototype.makeUnique = function() {\n  this.enforceReadOnly();\n  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());\n\n  return this;\n};\n\n\n/**\n * Removes the named query parameter.\n *\n * @param {string} key The parameter to remove.\n * @return {!goog.Uri} Reference to this URI object.\n */\ngoog.Uri.prototype.removeParameter = function(key) {\n  this.enforceReadOnly();\n  this.queryData_.remove(key);\n  return this;\n};\n\n\n/**\n * Sets whether Uri is read only. If this goog.Uri is read-only,\n * enforceReadOnly_ will be called at the start of any function that may modify\n * this Uri.\n * @param {boolean} isReadOnly whether this goog.Uri should be read only.\n * @return {!goog.Uri} Reference to this Uri object.\n */\ngoog.Uri.prototype.setReadOnly = function(isReadOnly) {\n  this.isReadOnly_ = isReadOnly;\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether the URI is read only.\n */\ngoog.Uri.prototype.isReadOnly = function() {\n  return this.isReadOnly_;\n};\n\n\n/**\n * Checks if this Uri has been marked as read only, and if so, throws an error.\n * This should be called whenever any modifying function is called.\n */\ngoog.Uri.prototype.enforceReadOnly = function() {\n  if (this.isReadOnly_) {\n    throw new Error('Tried to modify a read-only Uri');\n  }\n};\n\n\n/**\n * Sets whether to ignore case.\n * NOTE: If there are already key/value pairs in the QueryData, and\n * ignoreCase_ is set to false, the keys will all be lower-cased.\n * @param {boolean} ignoreCase whether this goog.Uri should ignore case.\n * @return {!goog.Uri} Reference to this Uri object.\n */\ngoog.Uri.prototype.setIgnoreCase = function(ignoreCase) {\n  this.ignoreCase_ = ignoreCase;\n  if (this.queryData_) {\n    this.queryData_.setIgnoreCase(ignoreCase);\n  }\n  return this;\n};\n\n\n/**\n * @return {boolean} Whether to ignore case.\n */\ngoog.Uri.prototype.getIgnoreCase = function() {\n  return this.ignoreCase_;\n};\n\n\n//==============================================================================\n// Static members\n//==============================================================================\n\n\n/**\n * Creates a uri from the string form.  Basically an alias of new goog.Uri().\n * If a Uri object is passed to parse then it will return a clone of the object.\n *\n * @throws URIError If parsing the URI is malformed. The passed URI components\n *     should all be parseable by decodeURIComponent.\n * @param {*} uri Raw URI string or instance of Uri\n *     object.\n * @param {boolean=} opt_ignoreCase Whether to ignore the case of parameter\n * names in #getParameterValue.\n * @return {!goog.Uri} The new URI object.\n */\ngoog.Uri.parse = function(uri, opt_ignoreCase) {\n  return uri instanceof goog.Uri ? uri.clone() :\n                                   new goog.Uri(uri, opt_ignoreCase);\n};\n\n\n/**\n * Creates a new goog.Uri object from unencoded parts.\n *\n * @param {?string=} opt_scheme Scheme/protocol or full URI to parse.\n * @param {?string=} opt_userInfo username:password.\n * @param {?string=} opt_domain www.google.com.\n * @param {?number=} opt_port 9830.\n * @param {?string=} opt_path /some/path/to/a/file.html.\n * @param {string|goog.Uri.QueryData=} opt_query a=1&b=2.\n * @param {?string=} opt_fragment The fragment without the #.\n * @param {boolean=} opt_ignoreCase Whether to ignore parameter name case in\n *     #getParameterValue.\n *\n * @return {!goog.Uri} The new URI object.\n */\ngoog.Uri.create = function(\n    opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query,\n    opt_fragment, opt_ignoreCase) {\n\n  var uri = new goog.Uri(null, opt_ignoreCase);\n\n  // Only set the parts if they are defined and not empty strings.\n  opt_scheme && uri.setScheme(opt_scheme);\n  opt_userInfo && uri.setUserInfo(opt_userInfo);\n  opt_domain && uri.setDomain(opt_domain);\n  opt_port && uri.setPort(opt_port);\n  opt_path && uri.setPath(opt_path);\n  opt_query && uri.setQueryData(opt_query);\n  opt_fragment && uri.setFragment(opt_fragment);\n\n  return uri;\n};\n\n\n/**\n * Resolves a relative Uri against a base Uri, accepting both strings and\n * Uri objects.\n *\n * @param {*} base Base Uri.\n * @param {*} rel Relative Uri.\n * @return {!goog.Uri} Resolved uri.\n */\ngoog.Uri.resolve = function(base, rel) {\n  if (!(base instanceof goog.Uri)) {\n    base = goog.Uri.parse(base);\n  }\n\n  if (!(rel instanceof goog.Uri)) {\n    rel = goog.Uri.parse(rel);\n  }\n\n  return base.resolve(rel);\n};\n\n\n/**\n * Removes dot segments in given path component, as described in\n * RFC 3986, section 5.2.4.\n *\n * @param {string} path A non-empty path component.\n * @return {string} Path component with removed dot segments.\n */\ngoog.Uri.removeDotSegments = function(path) {\n  if (path == '..' || path == '.') {\n    return '';\n\n  } else if (\n      !goog.string.contains(path, './') && !goog.string.contains(path, '/.')) {\n    // This optimization detects uris which do not contain dot-segments,\n    // and as a consequence do not require any processing.\n    return path;\n\n  } else {\n    var leadingSlash = goog.string.startsWith(path, '/');\n    var segments = path.split('/');\n    var out = [];\n\n    for (var pos = 0; pos < segments.length;) {\n      var segment = segments[pos++];\n\n      if (segment == '.') {\n        if (leadingSlash && pos == segments.length) {\n          out.push('');\n        }\n      } else if (segment == '..') {\n        if (out.length > 1 || out.length == 1 && out[0] != '') {\n          out.pop();\n        }\n        if (leadingSlash && pos == segments.length) {\n          out.push('');\n        }\n      } else {\n        out.push(segment);\n        leadingSlash = true;\n      }\n    }\n\n    return out.join('/');\n  }\n};\n\n\n/**\n * Decodes a value or returns the empty string if it isn't defined or empty.\n * @throws URIError If decodeURIComponent fails to decode val.\n * @param {string|undefined} val Value to decode.\n * @param {boolean=} opt_preserveReserved If true, restricted characters will\n *     not be decoded.\n * @return {string} Decoded value.\n * @private\n */\ngoog.Uri.decodeOrEmpty_ = function(val, opt_preserveReserved) {\n  // Don't use UrlDecode() here because val is not a query parameter.\n  if (!val) {\n    return '';\n  }\n\n  // decodeURI has the same output for '%2f' and '%252f'. We double encode %25\n  // so that we can distinguish between the 2 inputs. This is later undone by\n  // removeDoubleEncoding_.\n  return opt_preserveReserved ? decodeURI(val.replace(/%25/g, '%2525')) :\n                                decodeURIComponent(val);\n};\n\n\n/**\n * If unescapedPart is non null, then escapes any characters in it that aren't\n * valid characters in a url and also escapes any special characters that\n * appear in extra.\n *\n * @param {*} unescapedPart The string to encode.\n * @param {RegExp} extra A character set of characters in [\\01-\\177].\n * @param {boolean=} opt_removeDoubleEncoding If true, remove double percent\n *     encoding.\n * @return {?string} null iff unescapedPart == null.\n * @private\n */\ngoog.Uri.encodeSpecialChars_ = function(\n    unescapedPart, extra, opt_removeDoubleEncoding) {\n  if (typeof unescapedPart === 'string') {\n    var encoded = encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);\n    if (opt_removeDoubleEncoding) {\n      // encodeURI double-escapes %XX sequences used to represent restricted\n      // characters in some URI components, remove the double escaping here.\n      encoded = goog.Uri.removeDoubleEncoding_(encoded);\n    }\n    return encoded;\n  }\n  return null;\n};\n\n\n/**\n * Converts a character in [\\01-\\177] to its unicode character equivalent.\n * @param {string} ch One character string.\n * @return {string} Encoded string.\n * @private\n */\ngoog.Uri.encodeChar_ = function(ch) {\n  var n = ch.charCodeAt(0);\n  return '%' + ((n >> 4) & 0xf).toString(16) + (n & 0xf).toString(16);\n};\n\n\n/**\n * Removes double percent-encoding from a string.\n * @param  {string} doubleEncodedString String\n * @return {string} String with double encoding removed.\n * @private\n */\ngoog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {\n  return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, '%$1');\n};\n\n\n/**\n * Regular expression for characters that are disallowed in the scheme or\n * userInfo part of the URI.\n * @type {RegExp}\n * @private\n */\ngoog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\\/\\?@]/g;\n\n\n/**\n * Regular expression for characters that are disallowed in a relative path.\n * Colon is included due to RFC 3986 3.3.\n * @type {RegExp}\n * @private\n */\ngoog.Uri.reDisallowedInRelativePath_ = /[\\#\\?:]/g;\n\n\n/**\n * Regular expression for characters that are disallowed in an absolute path.\n * @type {RegExp}\n * @private\n */\ngoog.Uri.reDisallowedInAbsolutePath_ = /[\\#\\?]/g;\n\n\n/**\n * Regular expression for characters that are disallowed in the query.\n * @type {RegExp}\n * @private\n */\ngoog.Uri.reDisallowedInQuery_ = /[\\#\\?@]/g;\n\n\n/**\n * Regular expression for characters that are disallowed in the fragment.\n * @type {RegExp}\n * @private\n */\ngoog.Uri.reDisallowedInFragment_ = /#/g;\n\n\n/**\n * Checks whether two URIs have the same domain.\n * @param {string} uri1String First URI string.\n * @param {string} uri2String Second URI string.\n * @return {boolean} true if the two URIs have the same domain; false otherwise.\n */\ngoog.Uri.haveSameDomain = function(uri1String, uri2String) {\n  // Differs from goog.uri.utils.haveSameDomain, since this ignores scheme.\n  // TODO(gboyer): Have this just call goog.uri.util.haveSameDomain.\n  var pieces1 = goog.uri.utils.split(uri1String);\n  var pieces2 = goog.uri.utils.split(uri2String);\n  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] ==\n      pieces2[goog.uri.utils.ComponentIndex.DOMAIN] &&\n      pieces1[goog.uri.utils.ComponentIndex.PORT] ==\n      pieces2[goog.uri.utils.ComponentIndex.PORT];\n};\n\n\n\n/**\n * Class used to represent URI query parameters.  It is essentially a hash of\n * name-value pairs, though a name can be present more than once.\n *\n * Has the same interface as the collections in goog.structs.\n *\n * @param {?string=} opt_query Optional encoded query string to parse into\n *     the object.\n * @param {goog.Uri=} opt_uri Optional uri object that should have its\n *     cache invalidated when this object updates. Deprecated -- this\n *     is no longer required.\n * @param {boolean=} opt_ignoreCase If true, ignore the case of the parameter\n *     name in #get.\n * @constructor\n * @struct\n * @final\n */\ngoog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {\n  /**\n   * The map containing name/value or name/array-of-values pairs.\n   * May be null if it requires parsing from the query string.\n   *\n   * We need to use a Map because we cannot guarantee that the key names will\n   * not be problematic for IE.\n   *\n   * @private {?goog.structs.Map<string, !Array<*>>}\n   */\n  this.keyMap_ = null;\n\n  /**\n   * The number of params, or null if it requires computing.\n   * @private {?number}\n   */\n  this.count_ = null;\n\n  /**\n   * Encoded query string, or null if it requires computing from the key map.\n   * @private {?string}\n   */\n  this.encodedQuery_ = opt_query || null;\n\n  /**\n   * If true, ignore the case of the parameter name in #get.\n   * @private {boolean}\n   */\n  this.ignoreCase_ = !!opt_ignoreCase;\n};\n\n\n/**\n * If the underlying key map is not yet initialized, it parses the\n * query string and fills the map with parsed data.\n * @private\n */\ngoog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {\n  if (!this.keyMap_) {\n    this.keyMap_ = new goog.structs.Map();\n    this.count_ = 0;\n    if (this.encodedQuery_) {\n      var self = this;\n      goog.uri.utils.parseQueryData(this.encodedQuery_, function(name, value) {\n        self.add(goog.string.urlDecode(name), value);\n      });\n    }\n  }\n};\n\n\n/**\n * Creates a new query data instance from a map of names and values.\n *\n * @param {!goog.structs.Map<string, ?>|!Object} map Map of string parameter\n *     names to parameter value. If parameter value is an array, it is\n *     treated as if the key maps to each individual value in the\n *     array.\n * @param {goog.Uri=} opt_uri URI object that should have its cache\n *     invalidated when this object updates.\n * @param {boolean=} opt_ignoreCase If true, ignore the case of the parameter\n *     name in #get.\n * @return {!goog.Uri.QueryData} The populated query data instance.\n */\ngoog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {\n  var keys = goog.structs.getKeys(map);\n  if (typeof keys == 'undefined') {\n    throw new Error('Keys are undefined');\n  }\n\n  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);\n  var values = goog.structs.getValues(map);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = values[i];\n    if (!goog.isArray(value)) {\n      queryData.add(key, value);\n    } else {\n      queryData.setValues(key, value);\n    }\n  }\n  return queryData;\n};\n\n\n/**\n * Creates a new query data instance from parallel arrays of parameter names\n * and values. Allows for duplicate parameter names. Throws an error if the\n * lengths of the arrays differ.\n *\n * @param {!Array<string>} keys Parameter names.\n * @param {!Array<?>} values Parameter values.\n * @param {goog.Uri=} opt_uri URI object that should have its cache\n *     invalidated when this object updates.\n * @param {boolean=} opt_ignoreCase If true, ignore the case of the parameter\n *     name in #get.\n * @return {!goog.Uri.QueryData} The populated query data instance.\n */\ngoog.Uri.QueryData.createFromKeysValues = function(\n    keys, values, opt_uri, opt_ignoreCase) {\n  if (keys.length != values.length) {\n    throw new Error('Mismatched lengths for keys/values');\n  }\n  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);\n  for (var i = 0; i < keys.length; i++) {\n    queryData.add(keys[i], values[i]);\n  }\n  return queryData;\n};\n\n\n/**\n * @return {?number} The number of parameters.\n */\ngoog.Uri.QueryData.prototype.getCount = function() {\n  this.ensureKeyMapInitialized_();\n  return this.count_;\n};\n\n\n/**\n * Adds a key value pair.\n * @param {string} key Name.\n * @param {*} value Value.\n * @return {!goog.Uri.QueryData} Instance of this object.\n */\ngoog.Uri.QueryData.prototype.add = function(key, value) {\n  this.ensureKeyMapInitialized_();\n  this.invalidateCache_();\n\n  key = this.getKeyName_(key);\n  var values = this.keyMap_.get(key);\n  if (!values) {\n    this.keyMap_.set(key, (values = []));\n  }\n  values.push(value);\n  this.count_ = goog.asserts.assertNumber(this.count_) + 1;\n  return this;\n};\n\n\n/**\n * Removes all the params with the given key.\n * @param {string} key Name.\n * @return {boolean} Whether any parameter was removed.\n */\ngoog.Uri.QueryData.prototype.remove = function(key) {\n  this.ensureKeyMapInitialized_();\n\n  key = this.getKeyName_(key);\n  if (this.keyMap_.containsKey(key)) {\n    this.invalidateCache_();\n\n    // Decrement parameter count.\n    this.count_ =\n        goog.asserts.assertNumber(this.count_) - this.keyMap_.get(key).length;\n    return this.keyMap_.remove(key);\n  }\n  return false;\n};\n\n\n/**\n * Clears the parameters.\n */\ngoog.Uri.QueryData.prototype.clear = function() {\n  this.invalidateCache_();\n  this.keyMap_ = null;\n  this.count_ = 0;\n};\n\n\n/**\n * @return {boolean} Whether we have any parameters.\n */\ngoog.Uri.QueryData.prototype.isEmpty = function() {\n  this.ensureKeyMapInitialized_();\n  return this.count_ == 0;\n};\n\n\n/**\n * Whether there is a parameter with the given name\n * @param {string} key The parameter name to check for.\n * @return {boolean} Whether there is a parameter with the given name.\n */\ngoog.Uri.QueryData.prototype.containsKey = function(key) {\n  this.ensureKeyMapInitialized_();\n  key = this.getKeyName_(key);\n  return this.keyMap_.containsKey(key);\n};\n\n\n/**\n * Whether there is a parameter with the given value.\n * @param {*} value The value to check for.\n * @return {boolean} Whether there is a parameter with the given value.\n */\ngoog.Uri.QueryData.prototype.containsValue = function(value) {\n  // NOTE(arv): This solution goes through all the params even if it was the\n  // first param. We can get around this by not reusing code or by switching to\n  // iterators.\n  var vals = this.getValues();\n  return goog.array.contains(vals, value);\n};\n\n\n/**\n * Runs a callback on every key-value pair in the map, including duplicate keys.\n * This won't maintain original order when duplicate keys are interspersed (like\n * getKeys() / getValues()).\n * @param {function(this:SCOPE, ?, string, !goog.Uri.QueryData)} f\n * @param {SCOPE=} opt_scope The value of \"this\" inside f.\n * @template SCOPE\n */\ngoog.Uri.QueryData.prototype.forEach = function(f, opt_scope) {\n  this.ensureKeyMapInitialized_();\n  this.keyMap_.forEach(function(values, key) {\n    goog.array.forEach(values, function(value) {\n      f.call(opt_scope, value, key, this);\n    }, this);\n  }, this);\n};\n\n\n/**\n * Returns all the keys of the parameters. If a key is used multiple times\n * it will be included multiple times in the returned array\n * @return {!Array<string>} All the keys of the parameters.\n */\ngoog.Uri.QueryData.prototype.getKeys = function() {\n  this.ensureKeyMapInitialized_();\n  // We need to get the values to know how many keys to add.\n  var vals = this.keyMap_.getValues();\n  var keys = this.keyMap_.getKeys();\n  var rv = [];\n  for (var i = 0; i < keys.length; i++) {\n    var val = vals[i];\n    for (var j = 0; j < val.length; j++) {\n      rv.push(keys[i]);\n    }\n  }\n  return rv;\n};\n\n\n/**\n * Returns all the values of the parameters with the given name. If the query\n * data has no such key this will return an empty array. If no key is given\n * all values wil be returned.\n * @param {string=} opt_key The name of the parameter to get the values for.\n * @return {!Array<?>} All the values of the parameters with the given name.\n */\ngoog.Uri.QueryData.prototype.getValues = function(opt_key) {\n  this.ensureKeyMapInitialized_();\n  var rv = [];\n  if (typeof opt_key === 'string') {\n    if (this.containsKey(opt_key)) {\n      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));\n    }\n  } else {\n    // Return all values.\n    var values = this.keyMap_.getValues();\n    for (var i = 0; i < values.length; i++) {\n      rv = goog.array.concat(rv, values[i]);\n    }\n  }\n  return rv;\n};\n\n\n/**\n * Sets a key value pair and removes all other keys with the same value.\n *\n * @param {string} key Name.\n * @param {*} value Value.\n * @return {!goog.Uri.QueryData} Instance of this object.\n */\ngoog.Uri.QueryData.prototype.set = function(key, value) {\n  this.ensureKeyMapInitialized_();\n  this.invalidateCache_();\n\n  // TODO(chrishenry): This could be better written as\n  // this.remove(key), this.add(key, value), but that would reorder\n  // the key (since the key is first removed and then added at the\n  // end) and we would have to fix unit tests that depend on key\n  // ordering.\n  key = this.getKeyName_(key);\n  if (this.containsKey(key)) {\n    this.count_ =\n        goog.asserts.assertNumber(this.count_) - this.keyMap_.get(key).length;\n  }\n  this.keyMap_.set(key, [value]);\n  this.count_ = goog.asserts.assertNumber(this.count_) + 1;\n  return this;\n};\n\n\n/**\n * Returns the first value associated with the key. If the query data has no\n * such key this will return undefined or the optional default.\n * @param {string} key The name of the parameter to get the value for.\n * @param {*=} opt_default The default value to return if the query data\n *     has no such key.\n * @return {*} The first string value associated with the key, or opt_default\n *     if there's no value.\n */\ngoog.Uri.QueryData.prototype.get = function(key, opt_default) {\n  if (!key) {\n    return opt_default;\n  }\n  var values = this.getValues(key);\n  return values.length > 0 ? String(values[0]) : opt_default;\n};\n\n\n/**\n * Sets the values for a key. If the key already exists, this will\n * override all of the existing values that correspond to the key.\n * @param {string} key The key to set values for.\n * @param {!Array<?>} values The values to set.\n */\ngoog.Uri.QueryData.prototype.setValues = function(key, values) {\n  this.remove(key);\n\n  if (values.length > 0) {\n    this.invalidateCache_();\n    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));\n    this.count_ = goog.asserts.assertNumber(this.count_) + values.length;\n  }\n};\n\n\n/**\n * @return {string} Encoded query string.\n * @override\n */\ngoog.Uri.QueryData.prototype.toString = function() {\n  if (this.encodedQuery_) {\n    return this.encodedQuery_;\n  }\n\n  if (!this.keyMap_) {\n    return '';\n  }\n\n  var sb = [];\n\n  // In the past, we use this.getKeys() and this.getVals(), but that\n  // generates a lot of allocations as compared to simply iterating\n  // over the keys.\n  var keys = this.keyMap_.getKeys();\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var encodedKey = goog.string.urlEncode(key);\n    var val = this.getValues(key);\n    for (var j = 0; j < val.length; j++) {\n      var param = encodedKey;\n      // Ensure that null and undefined are encoded into the url as\n      // literal strings.\n      if (val[j] !== '') {\n        param += '=' + goog.string.urlEncode(val[j]);\n      }\n      sb.push(param);\n    }\n  }\n\n  return this.encodedQuery_ = sb.join('&');\n};\n\n\n/**\n * @throws URIError If URI is malformed (that is, if decodeURIComponent fails on\n *     any of the URI components).\n * @return {string} Decoded query string.\n */\ngoog.Uri.QueryData.prototype.toDecodedString = function() {\n  return goog.Uri.decodeOrEmpty_(this.toString());\n};\n\n\n/**\n * Invalidate the cache.\n * @private\n */\ngoog.Uri.QueryData.prototype.invalidateCache_ = function() {\n  this.encodedQuery_ = null;\n};\n\n\n/**\n * Removes all keys that are not in the provided list. (Modifies this object.)\n * @param {Array<string>} keys The desired keys.\n * @return {!goog.Uri.QueryData} a reference to this object.\n */\ngoog.Uri.QueryData.prototype.filterKeys = function(keys) {\n  this.ensureKeyMapInitialized_();\n  this.keyMap_.forEach(function(value, key) {\n    if (!goog.array.contains(keys, key)) {\n      this.remove(key);\n    }\n  }, this);\n  return this;\n};\n\n\n/**\n * Clone the query data instance.\n * @return {!goog.Uri.QueryData} New instance of the QueryData object.\n */\ngoog.Uri.QueryData.prototype.clone = function() {\n  var rv = new goog.Uri.QueryData();\n  rv.encodedQuery_ = this.encodedQuery_;\n  if (this.keyMap_) {\n    rv.keyMap_ = this.keyMap_.clone();\n    rv.count_ = this.count_;\n  }\n  return rv;\n};\n\n\n/**\n * Helper function to get the key name from a JavaScript object. Converts\n * the object to a string, and to lower case if necessary.\n * @private\n * @param {*} arg The object to get a key name from.\n * @return {string} valid key name which can be looked up in #keyMap_.\n */\ngoog.Uri.QueryData.prototype.getKeyName_ = function(arg) {\n  var keyName = String(arg);\n  if (this.ignoreCase_) {\n    keyName = keyName.toLowerCase();\n  }\n  return keyName;\n};\n\n\n/**\n * Ignore case in parameter names.\n * NOTE: If there are already key/value pairs in the QueryData, and\n * ignoreCase_ is set to false, the keys will all be lower-cased.\n * @param {boolean} ignoreCase whether this goog.Uri should ignore case.\n */\ngoog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {\n  var resetKeys = ignoreCase && !this.ignoreCase_;\n  if (resetKeys) {\n    this.ensureKeyMapInitialized_();\n    this.invalidateCache_();\n    this.keyMap_.forEach(function(value, key) {\n      var lowerCase = key.toLowerCase();\n      if (key != lowerCase) {\n        this.remove(key);\n        this.setValues(lowerCase, value);\n      }\n    }, this);\n  }\n  this.ignoreCase_ = ignoreCase;\n};\n\n\n/**\n * Extends a query data object with another query data or map like object. This\n * operates 'in-place', it does not create a new QueryData object.\n *\n * @param {...(?goog.Uri.QueryData|?goog.structs.Map<?, ?>|?Object)} var_args\n *     The object from which key value pairs will be copied. Note: does not\n *     accept null.\n * @suppress {deprecated} Use deprecated goog.structs.forEach to allow different\n * types of parameters.\n */\ngoog.Uri.QueryData.prototype.extend = function(var_args) {\n  for (var i = 0; i < arguments.length; i++) {\n    var data = arguments[i];\n    goog.structs.forEach(\n        data, function(value, key) { this.add(key, value); }, this);\n  }\n};\n"],
"names":["goog","provide","require","Uri","goog.Uri","opt_uri","opt_ignoreCase","scheme_","userInfo_","domain_","port_","path_","fragment_","isReadOnly_","ignoreCase_","queryData_","m","undefined","getIgnoreCase","setScheme","getScheme","setUserInfo","getUserInfo","setDomain","getDomain","setPort","getPort","setPath","getPath","setQueryData","getQueryData","clone","setFragment","getFragment","uri","utils","split","String","ComponentIndex","SCHEME","USER_INFO","DOMAIN","PORT","PATH","QUERY_DATA","FRAGMENT","QueryData","RANDOM_PARAM","StandardQueryParam","RANDOM","prototype","toString","goog.Uri.prototype.toString","out","scheme","push","encodeSpecialChars_","reDisallowedInSchemeOrUserInfo_","domain","userInfo","removeDoubleEncoding_","string","urlEncode","port","path","hasDomain","charAt","reDisallowedInAbsolutePath_","reDisallowedInRelativePath_","query","getEncodedQuery","fragment","reDisallowedInFragment_","join","resolve","goog.Uri.prototype.resolve","relativeUri","absoluteUri","overridden","hasScheme","hasUserInfo","hasPort","hasPath","lastSlashIndex","lastIndexOf","substr","removeDotSegments","hasQuery","hasFragment","goog.Uri.prototype.clone","goog.Uri.prototype.getScheme","goog.Uri.prototype.setScheme","newScheme","opt_decode","enforceReadOnly","decodeOrEmpty_","replace","goog.Uri.prototype.hasScheme","goog.Uri.prototype.getUserInfo","goog.Uri.prototype.setUserInfo","newUserInfo","goog.Uri.prototype.hasUserInfo","goog.Uri.prototype.getDomain","goog.Uri.prototype.setDomain","newDomain","goog.Uri.prototype.hasDomain","goog.Uri.prototype.getPort","goog.Uri.prototype.setPort","newPort","Number","isNaN","Error","goog.Uri.prototype.hasPort","goog.Uri.prototype.getPath","goog.Uri.prototype.setPath","newPath","goog.Uri.prototype.hasPath","goog.Uri.prototype.hasQuery","goog.Uri.prototype.setQueryData","queryData","setIgnoreCase","reDisallowedInQuery_","setQuery","goog.Uri.prototype.setQuery","newQuery","goog.Uri.prototype.getEncodedQuery","getDecodedQuery","goog.Uri.prototype.getDecodedQuery","toDecodedString","goog.Uri.prototype.getQueryData","getQuery","goog.Uri.prototype.getQuery","setParameterValue","goog.Uri.prototype.setParameterValue","key","value","set","setParameterValues","goog.Uri.prototype.setParameterValues","values","isArray","setValues","getParameterValues","goog.Uri.prototype.getParameterValues","name","getValues","getParameterValue","goog.Uri.prototype.getParameterValue","paramName","get","goog.Uri.prototype.getFragment","goog.Uri.prototype.setFragment","newFragment","goog.Uri.prototype.hasFragment","hasSameDomainAs","goog.Uri.prototype.hasSameDomainAs","uri2","makeUnique","goog.Uri.prototype.makeUnique","getRandomString","removeParameter","goog.Uri.prototype.removeParameter","remove","setReadOnly","goog.Uri.prototype.setReadOnly","isReadOnly","goog.Uri.prototype.isReadOnly","goog.Uri.prototype.enforceReadOnly","goog.Uri.prototype.setIgnoreCase","ignoreCase","goog.Uri.prototype.getIgnoreCase","parse","goog.Uri.parse","create","goog.Uri.create","opt_scheme","opt_userInfo","opt_domain","opt_port","opt_path","opt_query","opt_fragment","goog.Uri.resolve","base","rel","goog.Uri.removeDotSegments","contains","leadingSlash","startsWith","segments","pos","length","segment","pop","goog.Uri.decodeOrEmpty_","val","opt_preserveReserved","decodeURI","decodeURIComponent","goog.Uri.encodeSpecialChars_","unescapedPart","extra","opt_removeDoubleEncoding","encoded","encodeURI","encodeChar_","goog.Uri.encodeChar_","ch","n","charCodeAt","goog.Uri.removeDoubleEncoding_","doubleEncodedString","haveSameDomain","goog.Uri.haveSameDomain","uri1String","uri2String","pieces1","pieces2","goog.Uri.QueryData","keyMap_","count_","encodedQuery_","ensureKeyMapInitialized_","goog.Uri.QueryData.prototype.ensureKeyMapInitialized_","structs","Map","self","parseQueryData","add","urlDecode","createFromMap","goog.Uri.QueryData.createFromMap","map","keys","getKeys","i","createFromKeysValues","goog.Uri.QueryData.createFromKeysValues","getCount","goog.Uri.QueryData.prototype.getCount","goog.Uri.QueryData.prototype.add","invalidateCache_","getKeyName_","asserts","assertNumber","goog.Uri.QueryData.prototype.remove","containsKey","clear","goog.Uri.QueryData.prototype.clear","isEmpty","goog.Uri.QueryData.prototype.isEmpty","goog.Uri.QueryData.prototype.containsKey","containsValue","goog.Uri.QueryData.prototype.containsValue","vals","array","forEach","goog.Uri.QueryData.prototype.forEach","f","opt_scope","call","goog.Uri.QueryData.prototype.getKeys","rv","j","goog.Uri.QueryData.prototype.getValues","opt_key","concat","goog.Uri.QueryData.prototype.set","goog.Uri.QueryData.prototype.get","opt_default","goog.Uri.QueryData.prototype.setValues","goog.Uri.QueryData.prototype.toString","sb","encodedKey","param","goog.Uri.QueryData.prototype.toDecodedString","goog.Uri.QueryData.prototype.invalidateCache_","filterKeys","goog.Uri.QueryData.prototype.filterKeys","goog.Uri.QueryData.prototype.clone","goog.Uri.QueryData.prototype.getKeyName_","arg","keyName","toLowerCase","goog.Uri.QueryData.prototype.setIgnoreCase","resetKeys","lowerCase","extend","goog.Uri.QueryData.prototype.extend","var_args","arguments","data"]
}
