{"version":3,"sources":["zprint/focus.cljc"],"mappings":";AAQA;;;AAAA,AAAMA,AAEHC;AAFH,AAGE,AAAA,AAAA,AAACC,AAAID;;AAEP;;;;AAAA,AAAME,AAGHC,AAAIC;AAHP,AAKE,AAAOC,AAAMD;;AAAb,AAEE,AAAI,AAAIC,AAAM,AAACC,AAAMH;AACnB,AAAA,AAAKE;;AACL,AAAI,AAAK,AAAI,AAAA,AAACE,AAAE,AAACR,AAAS,AAACE,AAAIE,AAAIE,AACtB,AAAA,AAACE,AAAE,AAACR,AAAS,AAACE,AAAIE,AAAIE;AACjCA;;AACA,AAAO,AAAA,AAAKA;;;;;;;;AAEpB;;;AAAA,AAAMG,AAEHL,AAAIC;AAFP,AAGE,AAAMK,AAAS,AAACP,AAAoBC,AAAIC;AAAxC,AACE,AAAM,AAAA,AAACG,AAAE,AAACR,AAAS,AAACE,AAAIE,AAAIM;AAA5B,AAA8C,AAAA,AAAKA;;AAAnD;;;AAEJ;;;;;AAAA,AAAMC,AAIHP,AAAIC;AAJP,AAME,AAAOC,AAAMD;AAAb,AACOO;AADP,AAEOC;;AAFP,AAIE,AAAI,AAAIP,AAAM,AAACC,AAAMH;AAArB;;AAEE,AAAMU,AAAW,AAACd,AAAS,AAACE,AAAIE,AAAIE;AAC9BS,AAAgB,AAAK,AAAI,AAACC,AAAIJ,AAAgB,AAAA,AAACJ,AAAEM,AAC5B,AAAA,AAACG,AAAKH,AACN,AAAA,AAACG,AAAKH,AACN,AAAA,AAACG,AAAKH;AAJjC,AAUE,AAAID;AACFP;;AACA,AAAO,AAAI,AAAA,AAAK,AAAA,AAACE,AAAEM,AAAkBF,AAC5B,AAACD,AAAAA,AAAAA,AAASP,AAAAA,AAAIE,AAAAA,AACd,AAAA,AAAKA;AACP,AAAAY,AAAK,AAAAC,AAAI,AAAA,AAACX,AAAEM;AAAP,AAAA,AAAAK;AAAAA;;AAAyBP;;;AAA9B,AAAA,AAAAM;AACK,AAAA,AAACD,AAAKH;;AADXI;;;AAEAH;;;;;;;;;;AAEjB;;;AAAA,AAAMK,AAEHC,AAAGjB,AAAIC;AAFV,AAIE,AAAOC,AAAMD;AACNiB,AAAMD;;AADb,AAGE,AAAMf;AAAN,AACE,AAAI,AAAA,AAAOgB;AACT,AAAMhB;AAAN,AAAY,AAACH,AAAoBC,AAAIE;;AAArC;;;AACA,AAAO,AAACK,AAASP,AAAIE;AAAO,AAAA,AAAKgB;;;;;;AAHrC;;;;;AAKJ;;;;AAAA,AAAMC,AAGHC,AAAOpB;AAHV,AAIE,AAAA,AAAOqB;AACAC,AAAIF;;AADX,AAEE,AAAMC;AAAN,AACE,AAAI,AAACE,AAAOD;AACVD;;AACA,AAAO,AAACL,AAAU,AAACQ,AAAMF,AAAKtB,AAAI,AAACK,AAASL,AAAIqB;AAAM,AAACI,AAAKH;;;;;;AAHhE;;;;;AAKJ;;;;;;AAAA,AAAMI,AAKH1B,AAAIoB;AALP,AAQE,AAAMO,AAAM,AAACR,AAASC,AAAOpB;AAEvB2B,AAAM,AAAC5B,AAAoBC,AAAI2B;AAC/BC,AAAS,AAACrB,AAASP,AAAI2B;AACvBE,AAAI,AAAI,AAAAf,AAAKc;AAAL,AAAA,AAAAd;AAAc,AAAA,AAACD,AAAKc;;AAApBb;;AACF,AAAC,AAAA,AAACgB,AAAKC,AAAOH,AACd,AAAA,AAAK,AAACzB,AAAMH;AANxB,AAAA,AAQG2B,AAAME","names":["zprint.focus/type-ssv","ssv-element","cljs.core.nth","zprint.focus/skip-whitespace-ssv","ssv","n","index","cljs.core/count","cljs.core._EQ_","zprint.focus/down-ssv","non-ws-n","zprint.focus/next-ssv","skip-to-right?","next-nonws?","index-type","new-next-nonws?","cljs.core/not","cljs.core.not_EQ_","and__4115__auto__","or__4126__auto__","zprint.focus/right-ssv","nr","moves","zprint.focus/path-ssv","nwpath","idx","nwp","cljs.core/empty?","cljs.core/first","cljs.core/next","zprint.focus/range-ssv","start","ssv-next","end","cljs.core.fnil","cljs.core/dec"],"sourcesContent":["(ns ^:no-doc zprint.focus\n  (:require [clojure.string :as s]\n            [zprint.ansi :refer [color-str]]))\n\n;;\n;; # Find focus in a style-vec\n;;\n\n(defn type-ssv\n  \"What is this element in a str-style-vec?\"\n  [ssv-element]\n  (nth ssv-element 2 :whitespace))\n\n(defn skip-whitespace-ssv\n  \"Skip any whitespace in this ssv starting at n. Whitespace is :whitespace\n  and :indent\"\n  [ssv n]\n  #_(println \"skip-whitespace: n:\" n)\n  (loop [index n]\n    #_(println \"skip-whitespace: loop index:\" index)\n    (if (>= index (count ssv))\n      (dec index)\n      (if (not (or (= (type-ssv (nth ssv index)) :whitespace)\n                   (= (type-ssv (nth ssv index)) :indent)))\n        index\n        (recur (inc index))))))\n\n(defn down-ssv\n  \"Given a str-style-vec, move into a collection at element n.\"\n  [ssv n]\n  (let [non-ws-n (skip-whitespace-ssv ssv n)]\n    (when (= (type-ssv (nth ssv non-ws-n)) :left) (inc non-ws-n))))\n\n(defn next-ssv\n  \"Given a str-style-vec, move to the next element beyond this\n  one.  This will skip over entire collections, if there are any.\n  It will also ignore :whitespace elements.\"\n  [ssv n]\n  #_(println \"next-ssv: n:\" n \"count ssv:\" (count ssv))\n  (loop [index n\n         skip-to-right? nil\n         next-nonws? nil]\n    #_(println \"next-ssv: loop index:\" index)\n    (if (>= index (count ssv))\n      nil\n      (let [index-type (type-ssv (nth ssv index))\n            new-next-nonws? (and (or (not skip-to-right?) (= index-type :right))\n                                 (not= index-type :left)\n                                 (not= index-type :whitespace)\n                                 (not= index-type :indent))]\n        #_(println \"next-ssv: index:\" index\n                   \"skip-to-right?\" skip-to-right?\n                   \"next-nonws?\" next-nonws?\n                   \"index-type:\" index-type\n                   \"new-next-nonws?\" new-next-nonws?)\n        (if next-nonws?\n          index\n          (recur (if (and (= index-type :left) skip-to-right?)\n                   (next-ssv ssv index)\n                   (inc index))\n                 (and (or (= index-type :left) skip-to-right?)\n                      (not= index-type :right))\n                 new-next-nonws?))))))\n\n(defn right-ssv\n  \"Given a str-style-vec, move right nr elements.\"\n  [nr ssv n]\n  #_(println \"right-ssv: nr:\" nr \"n:\" n)\n  (loop [index n\n         moves nr]\n    #_(println \"right-ssv: loop index:\" index \"moves:\" moves)\n    (when index\n      (if (zero? moves)\n        (when index (skip-whitespace-ssv ssv index))\n        (recur (next-ssv ssv index) (dec moves))))))\n\n(defn path-ssv\n  \"Given a non-whitespace path from a zipper, find that same\n  collection or element in a str-style-vec.\"\n  [nwpath ssv]\n  (loop [idx 0\n         nwp nwpath]\n    (when idx\n      (if (empty? nwp)\n        idx\n        (recur (right-ssv (first nwp) ssv (down-ssv ssv idx)) (next nwp))))))\n\n(defn range-ssv\n  \"Use a non-whitespace path from a zipper, and find that\n  same collection or element in a str-style-vec, and return\n  a vector of the start and end of that collection or element.\n  Depends on next-ssv returning one past the end of its input.\"\n  [ssv nwpath]\n  #_(def rssv ssv)\n  #_(prn \"range-ssv: nwpath:\" nwpath \"ssv:\\n\" ssv)\n  (let [start (path-ssv nwpath ssv)\n        #_(println \"range-ssv: start:\" start \"nwpath:\" nwpath)\n        start (skip-whitespace-ssv ssv start)\n        ssv-next (next-ssv ssv start)\n        end (if (and ssv-next (not= start 0))\n              ((fnil dec 1) ssv-next)\n              (dec (count ssv)))]\n    #_(println \"range-ssv:\" [start end])\n    [start end]))"]}