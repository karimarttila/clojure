{"version":3,"sources":["vega/frontend/data/cars.cljs"],"mappings":";AAUA,AAAA,AAACA,AAEC,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASG;AAAT,AAAAF,AAAAD,AAAA,AAAA,AAAWI;AAAX,AACE,AAAA,AAACC;;AACGH,AAEA,AAAA,AAAA,AAAA,AAAA,AAACI,AAAiC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA8BH,AAAsBI,AACvF,AAAA,AAAA,AAAA,AAAA,AAACF,AAA6B,AAAA,AAAOF;;AAE7C,AAAA,AAACN,AAEC,AAAAW,AAAKP;AAAL,AAAA,AAAAQ,AAAAD;AAAA,AAAAR,AAAAS,AAAA,AAAA,AAASP;AAAT,AAAAF,AAAAS,AAAA,AAAA,AAAWN;AAAX,AACE,AAAA,AAACC,AAAkCH;;AACnC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACI,AAASJ,AAEM,AAAA,AAAA,AAAA,AAACS,AAAOP;;AAE5B,AAAA,AAACQ,AAEC,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAab;AAAbkB,AAAAN;AAAA,AAAAb,AAAAmB,AAAA,AAAA,AAAmBjB;AAAnB,AACE,AAAA,AAACE;;AACD,AAAA,AAAA,AAAA,AAACgB,AAAgBnB,AAAG;;AAExB,AAAA,AAACoB,AAEC,AAAKpB;AAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAIA;;AAKR,AAAA,AAAAqB,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAR,AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAAP,AAAAC,AAAAM,AAAAA;AAAA,AAAAL,AAAAK,AAAA,AAA8BE;AAA9B,AAAAP,AAAAK,AAAA,AAAmCG;AAAnC,AAAAR,AAAAK,AAAA,AAAyCI;AAAzC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEkBF,AACRC,AACCC;;AAQX,AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAd,AAAA,AAAAc,AAAA,AAAA,AAAA,AAAA,AAAAb,AAAAC,AAAAY,AAAAA;AAAA,AAAAX,AAAAW,AAAA,AAAgCJ;AAAhC,AAAAP,AAAAW,AAAA,AAAqCH;AAArkBF,AACRC,AACCC","names":["re_frame.core.reg_event_db","p__80815","vec__80816","cljs.core.nth","db","_","res-body","vega.frontend.util.clog","cljs.core/assoc-in","cljs.core.update_in","cljs.core/dissoc","p__80819","vec__80820","cljs.core.get_in","re_frame.core.reg_event_fx","p__80823","p__80824","map__80825","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__80826","vega.frontend.http/http-get","re_frame.core.reg_sub","p__80830","map__80831","vega.frontend.data.cars/simple-scatter","data","width","height","p__80835","map__80836","vega.frontend.data.cars/complex-scatter1"],"sourcesContent":["(ns vega.frontend.data.cars\n  (:require\n    [re-frame.core :as re-frame]\n    [re-frame.db]\n    [vega.frontend.util :as v-util]\n    [vega.frontend.http :as v-http]\n    [day8.re-frame.http-fx] ; Needed to register :http-xhrio to re-frame.\n    [hashp.core :include-macros true]\n    ))\n\n(re-frame/reg-event-db\n  ::ret-ok-data-cars\n  (fn [db [_ res-body]]\n    (v-util/clog \"reg-event-db ok\")\n    (-> db\n        ; Dissoc config not being in two places.\n        (assoc-in [:data :cars :response] (update-in {:ret :ok :res-body res-body} [:res-body] dissoc :data))\n        (assoc-in [:data :cars :data] (:data res-body)))))\n\n(re-frame/reg-event-db\n  ::ret-failed-data-cars\n  (fn [db [_ res-body]]\n    (v-util/clog \"reg-event-db failed\" db)\n    (assoc-in db [:data :cars :response]\n              {:ret :failed\n               :msg (get-in res-body [:response :msg])})))\n\n(re-frame/reg-event-fx\n  ::get-data-cars\n  (fn [{:keys [db]} [_]]\n    (v-util/clog \"get-data-cars\")\n    (v-http/http-get db (str \"/vega/api/data/cars/\") nil ::ret-ok-data-cars ::ret-failed-data-cars)))\n\n(re-frame/reg-sub\n  ::data-cars\n  (fn [db]\n    (-> db\n        :data\n        :cars\n        :data)))\n\n(defn simple-scatter [{:keys [data width height]}]\n  {:mark {:type \"circle\" :tooltip {:content \"data\"}},\n   :data {:values data}\n   :width width,\n   :height height,\n   :encoding {:x {:field \"Horsepower\", :type \"quantitative\"},\n              :y {:field \"Miles_per_Gallon\", :type \"quantitative\", :sort \"ascending\"}\n              :color {:field \"Origin\"}\n              }\n   })\n\n;; From: https://vega.github.io/vega/examples/scatter-plot/ (+ tooltip added)\n(defn complex-scatter1 [{:keys [data width height]}]\n  {:data {:name \"source\"\n          :values data},\n   :width width\n   :height height\n   :scales [{:name \"x\",\n             :type \"linear\",\n             :round true,\n             :nice true,\n             :zero true,\n             :domain {:data \"source\", :field \"Horsepower\"},\n             :range \"width\"}\n            {:name \"y\",\n             :type \"linear\",\n             :round true,\n             :nice true,\n             :zero true,\n             :domain {:data \"source\", :field \"Miles_per_Gallon\"},\n             :range \"height\"}\n            {:name \"size\",\n             :type \"linear\",\n             :round true,\n             :nice false,\n             :zero true,\n             :domain {:data \"source\", :field \"Acceleration\"},\n             :range [4 361]}],\n   :axes [{:scale \"x\", :grid true, :domain false, :orient \"bottom\", :tickCount 5, :title \"Horsepower\"}\n          {:scale \"y\", :grid true, :domain false, :orient \"left\", :titlePadding 5, :title \"Miles_per_Gallon\"}],\n   :legends [{:size \"size\",\n              :title \"Acceleration\",\n              :format \"s\",\n              :symbolStrokeColor \"#4682b4\",\n              :symbolStrokeWidth 2,\n              :symbolOpacity 0.5,\n              :symbolType \"circle\"}],\n   :marks [{:name \"marks\",\n            :type \"symbol\",\n            :from {:data \"source\"},\n            :encode {:enter {:tooltip {:signal  \"datum.Name\"}},\n                     :update {:x {:scale \"x\", :field \"Horsepower\"},\n                              :y {:scale \"y\", :field \"Miles_per_Gallon\"},\n                              :size {:scale \"size\", :field \"Acceleration\"},\n                              :shape {:value \"circle\"},\n                              :strokeWidth {:value 2},\n                              :opacity {:value 0.5},\n                              :stroke {:value \"#4682b4\"},\n                              :fill {:value \"transparent\"}}}}]})\n"]}