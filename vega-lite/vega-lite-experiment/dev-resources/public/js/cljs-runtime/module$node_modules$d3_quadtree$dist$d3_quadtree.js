shadow$provide.module$node_modules$d3_quadtree$dist$d3_quadtree=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){"object"===typeof exports$jscomp$0&&"undefined"!==typeof module?factory(exports$jscomp$0):"function"===typeof define&&define.amd?define(["exports"],factory):(global=global||self,factory(global.d3=global.d3||{}))})(this,function(exports){function add(tree,x,y,d){if(isNaN(x)||isNaN(y))return tree;var parent,node=tree._root;d={data:d};var x0=tree._x0,y0=
tree._y0,x1=tree._x1,y1=tree._y1,xm,ym,right,bottom;if(!node)return tree._root=d,tree;for(;node.length;)if((right=x>=(xm=(x0+x1)/2))?x0=xm:x1=xm,(bottom=y>=(ym=(y0+y1)/2))?y0=ym:y1=ym,parent=node,!(node=node[right|=bottom<<1]))return parent[right]=d,tree;var xp=+tree._x.call(null,node.data);var yp=+tree._y.call(null,node.data);if(x===xp&&y===yp)return d.next=node,parent?parent[right]=d:tree._root=d,tree;do parent=parent?parent[right]=Array(4):tree._root=Array(4),(right=x>=(xm=(x0+x1)/2))?x0=xm:x1=
xm,(bottom=y>=(ym=(y0+y1)/2))?y0=ym:y1=ym;while((right|=bottom<<1)===(bottom=(yp>=ym)<<1|xp>=xm));return parent[bottom]=node,parent[right]=d,tree}function Quad(node,x0,y0,x1,y1){this.node=node;this.x0=x0;this.y0=y0;this.x1=x1;this.y1=y1}function defaultX(d){return d[0]}function defaultY(d){return d[1]}function quadtree(nodes,x,y){x=new Quadtree(null==x?defaultX:x,null==y?defaultY:y,NaN,NaN,NaN,NaN);return null==nodes?x:x.addAll(nodes)}function Quadtree(x,y,x0,y0,x1,y1){this._x=x;this._y=y;this._x0=
x0;this._y0=y0;this._x1=x1;this._y1=y1;this._root=void 0}function leaf_copy(leaf){for(var copy={data:leaf.data},next=copy;leaf=leaf.next;)next=next.next={data:leaf.data};return copy}var treeProto=quadtree.prototype=Quadtree.prototype;treeProto.copy=function(){var copy=new Quadtree(this._x,this._y,this._x0,this._y0,this._x1,this._y1),node=this._root,nodes,child;if(!node)return copy;if(!node.length)return copy._root=leaf_copy(node),copy;for(nodes=[{source:node,target:copy._root=Array(4)}];node=nodes.pop();)for(var i=
0;4>i;++i)if(child=node.source[i])child.length?nodes.push({source:child,target:node.target[i]=Array(4)}):node.target[i]=leaf_copy(child);return copy};treeProto.add=function(d){var x=+this._x.call(null,d),y=+this._y.call(null,d);return add(this.cover(x,y),x,y,d)};treeProto.addAll=function(data){var d,i,n=data.length,x,y,xz=Array(n),yz=Array(n),x0=Infinity,y0=Infinity,x1=-Infinity,y1=-Infinity;for(i=0;i<n;++i)isNaN(x=+this._x.call(null,d=data[i]))||isNaN(y=+this._y.call(null,d))||(xz[i]=x,yz[i]=y,x<
x0&&(x0=x),x>x1&&(x1=x),y<y0&&(y0=y),y>y1&&(y1=y));if(x0>x1||y0>y1)return this;this.cover(x0,y0).cover(x1,y1);for(i=0;i<n;++i)add(this,xz[i],yz[i],data[i]);return this};treeProto.cover=function(x,y){if(isNaN(x=+x)||isNaN(y=+y))return this;var x0=this._x0,y0=this._y0,x1=this._x1,y1=this._y1;if(isNaN(x0))x1=(x0=Math.floor(x))+1,y1=(y0=Math.floor(y))+1;else{for(var z=x1-x0||1,node=this._root,parent,i;x0>x||x>=x1||y0>y||y>=y1;)switch(i=(y<y0)<<1|x<x0,parent=Array(4),parent[i]=node,node=parent,z*=2,i){case 0:x1=
x0+z;y1=y0+z;break;case 1:x0=x1-z;y1=y0+z;break;case 2:x1=x0+z;y0=y1-z;break;case 3:x0=x1-z,y0=y1-z}this._root&&this._root.length&&(this._root=node)}this._x0=x0;this._y0=y0;this._x1=x1;this._y1=y1;return this};treeProto.data=function(){var data=[];this.visit(function(node){if(!node.length){do data.push(node.data);while(node=node.next)}});return data};treeProto.extent=function(_){return arguments.length?this.cover(+_[0][0],+_[0][1]).cover(+_[1][0],+_[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],
[this._x1,this._y1]]};treeProto.find=function(x,y,radius){var x0=this._x0,y0=this._y0,x1,y1,x2,y2,x3=this._x1,y3=this._y1,quads=[],node=this._root,q;node&&quads.push(new Quad(node,x0,y0,x3,y3));null==radius?radius=Infinity:(x0=x-radius,y0=y-radius,x3=x+radius,y3=y+radius,radius*=radius);for(;q=quads.pop();)if(!(!(node=q.node)||(x1=q.x0)>x3||(y1=q.y0)>y3||(x2=q.x1)<x0||(y2=q.y1)<y0))if(node.length){q=(x1+x2)/2;var ym=(y1+y2)/2;quads.push(new Quad(node[3],q,ym,x2,y2),new Quad(node[2],x1,ym,q,y2),new Quad(node[1],
q,y1,x2,ym),new Quad(node[0],x1,y1,q,ym));if(node=(y>=ym)<<1|x>=q)q=quads[quads.length-1],quads[quads.length-1]=quads[quads.length-1-node],quads[quads.length-1-node]=q}else if(q=x-+this._x.call(null,node.data),ym=y-+this._y.call(null,node.data),q=q*q+ym*ym,q<radius){var data=Math.sqrt(radius=q);x0=x-data;y0=y-data;x3=x+data;y3=y+data;data=node.data}return data};treeProto.remove=function(d){if(isNaN(x=+this._x.call(null,d))||isNaN(y=+this._y.call(null,d)))return this;var parent,node=this._root,previous,
x0=this._x0,y0=this._y0,x1=this._x1,y1=this._y1,x,y,xm,ym,right,bottom;if(!node)return this;if(node.length)for(;;){(right=x>=(xm=(x0+x1)/2))?x0=xm:x1=xm;(bottom=y>=(ym=(y0+y1)/2))?y0=ym:y1=ym;if(!(parent=node,node=node[right|=bottom<<1]))return this;if(!node.length)break;if(parent[right+1&3]||parent[right+2&3]||parent[right+3&3]){var retainer=parent;var j=right}}for(;node.data!==d;)if(!(previous=node,node=node.next))return this;(d=node.next)&&delete node.next;if(previous)return d?previous.next=d:
delete previous.next,this;if(!parent)return this._root=d,this;d?parent[right]=d:delete parent[right];(node=parent[0]||parent[1]||parent[2]||parent[3])&&node===(parent[3]||parent[2]||parent[1]||parent[0])&&!node.length&&(retainer?retainer[j]=node:this._root=node);return this};treeProto.removeAll=function(data){for(var i=0,n=data.length;i<n;++i)this.remove(data[i]);return this};treeProto.root=function(){return this._root};treeProto.size=function(){var size=0;this.visit(function(node){if(!node.length){do++size;
while(node=node.next)}});return size};treeProto.visit=function(callback){var quads=[],q,node=this._root,child,x0,y0,x1;for(node&&quads.push(new Quad(node,this._x0,this._y0,this._x1,this._y1));q=quads.pop();)if(!callback(node=q.node,x0=q.x0,y0=q.y0,x1=q.x1,q=q.y1)&&node.length){var xm=(x0+x1)/2,ym=(y0+q)/2;(child=node[3])&&quads.push(new Quad(child,xm,ym,x1,q));(child=node[2])&&quads.push(new Quad(child,x0,ym,xm,q));(child=node[1])&&quads.push(new Quad(child,xm,y0,x1,ym));(child=node[0])&&quads.push(new Quad(child,
x0,y0,xm,ym))}return this};treeProto.visitAfter=function(callback){var quads=[],next=[],q;for(this._root&&quads.push(new Quad(this._root,this._x0,this._y0,this._x1,this._y1));q=quads.pop();){var node=q.node;if(node.length){var child,x0=q.x0,y0=q.y0,x1=q.x1,y1=q.y1,xm=(x0+x1)/2,ym=(y0+y1)/2;(child=node[0])&&quads.push(new Quad(child,x0,y0,xm,ym));(child=node[1])&&quads.push(new Quad(child,xm,y0,x1,ym));(child=node[2])&&quads.push(new Quad(child,x0,ym,xm,y1));(child=node[3])&&quads.push(new Quad(child,
xm,ym,x1,y1))}next.push(q)}for(;q=next.pop();)callback(q.node,q.x0,q.y0,q.x1,q.y1);return this};treeProto.x=function(_){return arguments.length?(this._x=_,this):this._x};treeProto.y=function(_){return arguments.length?(this._y=_,this):this._y};exports.quadtree=quadtree;Object.defineProperty(exports,"__esModule",{value:!0})})}
//# sourceMappingURL=module$node_modules$d3_quadtree$dist$d3_quadtree.js.map
