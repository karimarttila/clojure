{"version":3,"sources":["sci/impl/vars.cljc"],"mappings":"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;AAAT,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAD;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;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AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,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","names":["sci$impl$vars$HasName$getName$dyn","x__4428__auto__","m__4429__auto__","sci.impl.vars/getName","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","sci.impl.vars/HasName","_","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","sci.impl.vars/SciNamespace","sci.impl.vars/->SciNamespace","name","meta","sci.impl.vars/namespace?","x","sci.impl.vars/Frame","sci.impl.vars/->Frame","bindings","prev","sci.impl.vars/top-frame","sci.impl.vars/dvals","cljs.core.atom","cljs.core/deref","sci.impl.vars/get-thread-binding-frame","sci.impl.vars/TBox","sci.impl.vars/->TBox","thread","val","this","v","sci.impl.vars/clone-thread-binding-frame","f","sci.impl.vars/reset-thread-binding-frame","frame","cljs.core/reset!","sci.impl.vars/dynamic-var?","and__4115__auto__","sci.impl.vars/var?","cljs.core/meta","sci$impl$vars$IVar$bindRoot$dyn","sci.impl.vars/bindRoot","sci$impl$vars$IVar$getRawRoot$dyn","sci.impl.vars/getRawRoot","sci$impl$vars$IVar$toSymbol$dyn","sci.impl.vars/toSymbol","sci$impl$vars$IVar$isMacro$dyn","sci.impl.vars/isMacro","sci$impl$vars$IVar$hasRoot$dyn","sci.impl.vars/hasRoot","sci$impl$vars$IVar$setThreadBound$dyn","sci.impl.vars/setThreadBound","sci$impl$vars$IVar$unbind$dyn","sci.impl.vars/unbind","sci.impl.vars/IVar","sci.impl.vars/push-thread-bindings","bmap","cljs.core.reduce","p__47932","vec__47933","cljs.core.nth","acc","var*","val*","js/Error","cljs.core.assoc","sci.impl.vars/pop-thread-bindings","temp__5733__auto__","sci.impl.vars/get-thread-bindings","ret","kvs","cljs.core/seq","vec__47959","tbox","cljs.core/first","tbox-val","cljs.core/next","sci.impl.vars/get-thread-binding","sci-var","temp__5735__auto__","sci.impl.vars/binding-conveyor-fn","y","z","args","cljs.core.apply","sci.impl.vars/throw-unbound-call-exception","the-var","unused__11869__auto__","self__","G__47985","args47984","cljs.core/aclone","sci.impl.vars/SciUnbound","sci.impl.vars/->SciUnbound","a","b","c","d","e","g","h","i","j","k","l","m","n","o","p","q","r","s","t","rest","sci.impl.vars/built-in-var?","var-meta","G__48028","args48011","sci.impl.vars/SciVar","sci.impl.vars/->SciVar","root","sym","thread-bound","vm__47785__auto__","or__4126__auto__","sci.impl.unrestrict/*unrestricted*","cljs.core/not","the-var__47786__auto__","ns__47787__auto__","ns-name__47788__auto__","name__47789__auto__","cljs.core.ex_info","sci.impl.types/setVal","sci.impl.types/getVal","writer","opts","cljs.core/pr-writer","fexpr__48052","fexpr__48054","fexpr__48055","fexpr__48065","fexpr__48066","fexpr__48071","fexpr__48072","fexpr__48081","fexpr__48082","fexpr__48084","fexpr__48085","fexpr__48088","fexpr__48094","fexpr__48095","fexpr__48097","fexpr__48099","fexpr__48104","fexpr__48105","fexpr__48106","fexpr__48108","fexpr__48117","sci.impl.vars/var-get","sci.impl.vars/var-set","var_args","G__48126","sci.impl.vars/dynamic-var","sci.impl.vars.dynamic_var","init-val","sci.impl.vars/current-file","sci.impl.vars/user-ns","sci.impl.vars/current-ns","sci.impl.vars/current-ns-name","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.vars/alter-var-root","seq48128","G__48129","G__48130","self__4723__auto__","G__48138","sci.impl.vars/new-var","G__48139","sci.impl.vars.new_var"],"sourcesContent":["(ns sci.impl.vars\n  {:no-doc true}\n  (:refer-clojure :exclude [var? binding\n                            push-thread-bindings\n                            get-thread-bindings\n                            pop-thread-bindings\n                            with-bindings\n                            thread-bound?\n                            alter-var-root\n                            var-get\n                            var-set])\n  (:require [sci.impl.macros :as macros]\n            [sci.impl.types :as t]\n            [sci.impl.unrestrict :refer [*unrestricted*]]\n            [sci.lang])\n  #?(:cljs (:require-macros [sci.impl.vars :refer [with-bindings\n                                                   with-writeable-namespace\n                                                   with-writeable-var]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defprotocol HasName ;; INamed was already taken by CLJS\n  (getName [_]))\n\n(macros/deftime\n  (defmacro with-writeable-namespace\n    [the-ns-object ns-meta & body]\n    `(let [m# ~ns-meta]\n       (if (or *unrestricted* (not (:sci.impl/built-in m#)))\n         (do ~@body)\n         (let [ns-obj# ~the-ns-object\n               name# (getName ns-obj#)]\n           (throw (ex-info (str \"Built-in namespace \" name# \" is read-only.\")\n                           {:ns ns-obj#})))))))\n\n(deftype SciNamespace [name #?(:clj ^:volatile-mutable meta\n                               :cljs ^:mutable meta)]\n  Object\n  (toString [_]\n    (str name))\n  HasName\n  (getName [_] name)\n  #?(:clj clojure.lang.IMeta :cljs IMeta)\n  #?(:clj (clojure.core/meta [_] meta) :cljs (-meta [_] meta))\n  #?(:clj clojure.lang.IReference)\n  #?(:clj (alterMeta [this f args]\n                     (with-writeable-namespace this meta\n                       (locking (set! meta (apply f meta args))))))\n  #?(:clj (resetMeta [this m]\n                     (with-writeable-namespace this meta\n                       (locking (set! meta m))))))\n\n(defn namespace? [x]\n  (instance? sci.impl.vars.SciNamespace x))\n\n(deftype Frame [bindings prev])\n\n(def top-frame (Frame. {} nil))\n\n#?(:clj\n   (def ^ThreadLocal dvals (proxy [ThreadLocal] []\n                             (initialValue [] top-frame)))\n   :cljs\n   (def dvals (atom top-frame)))\n\n(defn get-thread-binding-frame ^Frame []\n  #?(:clj (.get dvals)\n     :cljs @dvals))\n\n(deftype TBox #?(:clj [thread ^:volatile-mutable val]\n                 :cljs [thread ^:mutable val])\n  t/IBox\n  (setVal [this v]\n    (set! val v))\n  (getVal [this] val))\n\n(defn clone-thread-binding-frame ^Frame []\n  (let [^Frame f #?(:clj (.get dvals)\n                    :cljs @dvals)]\n    (Frame. (.-bindings f) nil)))\n\n(defn reset-thread-binding-frame [frame]\n  #?(:clj (.set dvals frame)\n     :cljs (reset! dvals frame)))\n\n(declare var?)\n\n(defn dynamic-var? [v]\n  ;; TODO: make separate field\n  (and (var? v)\n       (:dynamic (meta v))))\n\n(defprotocol IVar\n  (bindRoot [this v])\n  (getRawRoot [this])\n  (toSymbol [this])\n  (isMacro [this])\n  (hasRoot [this])\n  (setThreadBound [this v])\n  (unbind [this]))\n\n(defn push-thread-bindings [bindings]\n  (let [frame (get-thread-binding-frame)\n        bmap (.-bindings frame)\n        bmap (reduce (fn [acc [var* val*]]\n                       (when-not (dynamic-var? var*)\n                         (throw (new #?(:clj IllegalStateException\n                                        :cljs js/Error)\n                                     (str \"Can't dynamically bind non-dynamic var \" var*))))\n                       (setThreadBound var* true)\n                       (assoc acc var* (TBox. #?(:clj (Thread/currentThread)\n                                                 :cljs nil) val*)))\n                     bmap\n                     bindings)]\n    (reset-thread-binding-frame (Frame. bmap frame))))\n\n(defn pop-thread-bindings []\n  (if-let [f (.-prev (get-thread-binding-frame))]\n    (if (identical? top-frame f)\n      #?(:clj (.remove dvals)\n         :cljs (reset! dvals top-frame))\n      (reset-thread-binding-frame f))\n    (throw (new #?(:clj Exception :cljs js/Error) \"No frame to pop.\"))))\n\n(defn get-thread-bindings []\n  (let [f (get-thread-binding-frame)]\n    (loop [ret {}\n           kvs (seq (.-bindings f))]\n      (if kvs\n        (let [[var* ^TBox tbox] (first kvs)\n              tbox-val (t/getVal tbox)]\n          (recur (assoc ret var* tbox-val)\n                 (next kvs)))\n        ret))))\n\n(defn get-thread-binding ^TBox [sci-var]\n  (when-let [^Frame f #?(:clj (.get dvals)\n                         :cljs @dvals)]\n    (.get ^java.util.Map (.-bindings f) sci-var)))\n\n(defn binding-conveyor-fn\n  [f]\n  (let [frame (clone-thread-binding-frame)]\n    (fn\n      ([]\n       (reset-thread-binding-frame frame)\n       (f))\n      ([x]\n       (reset-thread-binding-frame frame)\n       (f x))\n      ([x y]\n       (reset-thread-binding-frame frame)\n       (f x y))\n      ([x y z]\n       (reset-thread-binding-frame frame)\n       (f x y z))\n      ([x y z & args]\n       (reset-thread-binding-frame frame)\n       (apply f x y z args)))))\n\n(defn throw-unbound-call-exception [the-var]\n  (throw (new #?(:clj IllegalStateException\n                 :cljs js/Error) (str \"Attempting to call unbound fn: \" the-var))))\n\n(deftype SciUnbound [the-var]\n  Object\n  (toString [_]\n    (str \"Unbound: \" the-var))\n  #?@(:clj [clojure.lang.IFn] :cljs [IFn])\n  (#?(:clj invoke :cljs -invoke) [_]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k l]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k l m]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k l m n]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k l m n o]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k l m n o p]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k l m n o p q]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k l m n o p q r]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k l m n o p q r s]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k l m n o p q r s t]\n    (throw-unbound-call-exception the-var))\n  (#?(:clj invoke :cljs -invoke) [_ a b c d e f g h i j k l m n o p q r s t rest]\n    (throw-unbound-call-exception the-var))\n  #?(:clj\n     (applyTo [_ args]\n              (throw-unbound-call-exception the-var))))\n\n;; adapted from https://github.com/clojure/clojurescript/blob/df1837048d01b157a04bb3dc7fedc58ee349a24a/src/main/cljs/cljs/core.cljs#L1118\n\n(defn built-in-var? [var-meta]\n  (:sci.impl/built-in var-meta))\n\n(macros/deftime\n  (defmacro with-writeable-var\n    [the-var var-meta & body]\n    `(let [vm# ~var-meta]\n       (if (or *unrestricted* (not (:sci.impl/built-in vm#)))\n         (do ~@body)\n         (let [the-var# ~the-var\n               ns# (:ns vm#)\n               ns-name# (getName ns#)\n               name# (getName the-var#)]\n           (throw (ex-info (str \"Built-in var #'\" ns-name# \"/\" name# \" is read-only.\")\n                           {:var ~the-var})))))))\n\n(deftype SciVar [#?(:clj ^:volatile-mutable root\n                    :cljs ^:mutable root)\n                 sym\n                 #?(:clj ^:volatile-mutable meta\n                    :cljs ^:mutable meta)\n                 #?(:clj ^:volatile-mutable thread-bound\n                    :cljs ^:mutable thread-bound)]\n  #?(:clj\n     ;; marker interface, clj only for now\n     sci.lang.IVar)\n  HasName\n  (getName [this]\n    sym)\n  IVar\n  (bindRoot [this v]\n    (with-writeable-var this meta\n      (set! (.-root this) v)))\n  (getRawRoot [this]\n    root)\n  (toSymbol [this] sym)\n  (isMacro [_]\n    (:sci/macro (clojure.core/meta root)))\n  (setThreadBound [this v]\n    (set! (.-thread-bound this) v))\n  (unbind [this]\n    (with-writeable-var this meta\n      (set! (.-root this) (SciUnbound. this))))\n  (hasRoot [this]\n    (not (instance? SciUnbound root)))\n  t/IBox\n  (setVal [this v]\n    (if-let [b (get-thread-binding this)]\n      #?(:clj\n         (let [t (.-thread b)]\n           (if (not (identical? t (Thread/currentThread)))\n             (throw (new IllegalStateException\n                         (format \"Can't set!: %s from non-binding thread\" sym)))\n             (t/setVal b v)))\n         :cljs (t/setVal b v))\n      (throw (new #?(:clj IllegalStateException :cljs js/Error)\n                  (str \"Can't change/establish root binding of \" this \" with set\")))))\n  (getVal [this] root)\n  #?(:clj clojure.lang.IDeref :cljs IDeref)\n  (#?(:clj deref\n      :cljs -deref) [this]\n    (if thread-bound\n      (if-let [tbox (get-thread-binding this)]\n        (t/getVal tbox)\n        root)\n      root))\n  Object\n  (toString [_]\n    (str \"#'\" sym))\n  #?(:cljs IPrintWithWriter)\n  #?(:cljs (-pr-writer [a writer opts]\n                       (-write writer \"#'\")\n                       (pr-writer sym writer opts)))\n  #?(:clj clojure.lang.IMeta :cljs IMeta)\n  #?(:clj (clojure.core/meta [_] meta) :cljs (-meta [_] meta))\n  ;; #?(:clj Comparable :cljs IEquiv)\n  ;; (-equiv [this other]\n  ;;   (if (instance? Var other)\n  ;;     (= (.-sym this) (.-sym other))\n  ;;     false))\n  ;; #?(:clj clojure.lang.IHashEq :cljs IHash)\n  ;; (-hash [_]\n  ;;   (hash-symbol sym))\n  #?(:clj clojure.lang.IReference)\n  #?(:clj (alterMeta [this f args]\n                     (with-writeable-var this meta\n                       (locking (set! meta (apply f meta args))))))\n  #?(:clj (resetMeta [this m]\n                     (with-writeable-var this meta\n                       (locking (set! meta m)))))\n  #?(:clj clojure.lang.IRef) ;; added for multi-methods\n  #?(:clj clojure.lang.IFn :cljs IFn)\n  (#?(:clj invoke :cljs -invoke) [this]\n    (@this))\n  (#?(:clj invoke :cljs -invoke) [this a]\n    (@this a))\n  (#?(:clj invoke :cljs -invoke) [this a b]\n    (@this a b))\n  (#?(:clj invoke :cljs -invoke) [this a b c]\n    (@this a b c))\n  (#?(:clj invoke :cljs -invoke) [this a b c d]\n    (@this a b c d))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e]\n    (@this a b c d e))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f]\n    (@this a b c d e f))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g]\n    (@this a b c d e f g))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h]\n    (@this a b c d e f g h))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i]\n    (@this a b c d e f g h i))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j]\n    (@this a b c d e f g h i j))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k]\n    (@this a b c d e f g h i j k))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l]\n    (@this a b c d e f g h i j k l))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m]\n    (@this a b c d e f g h i j k l m))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n]\n    (@this a b c d e f g h i j k l m n))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o]\n    (@this a b c d e f g h i j k l m n o))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p]\n    (@this a b c d e f g h i j k l m n o p))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q]\n    (@this a b c d e f g h i j k l m n o p q))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r]\n    (@this a b c d e f g h i j k l m n o p q r))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s]\n    (@this a b c d e f g h i j k l m n o p q r s))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s t]\n    (@this a b c d e f g h i j k l m n o p q r s t))\n  (#?(:clj invoke :cljs -invoke) [this a b c d e f g h i j k l m n o p q r s t rest]\n    (apply @this a b c d e f g h i j k l m n o p q r s t rest))\n  #?(:clj\n     (applyTo [this args]\n              (apply @this args))))\n\n#?(:clj\n   ;; Use public interface for print-method so it can be overriden in bb itself\n   (do (defmethod print-method sci.lang.IVar [o ^java.io.Writer w]\n         (.write w (str \"#'\" (toSymbol ^sci.impl.vars.IVar o))))\n       (prefer-method print-method sci.lang.IVar clojure.lang.IDeref)))\n\n(defn var-get [v]\n  (deref v))\n\n(defn var-set [v val]\n  (t/setVal v val))\n\n(defn var? [x]\n  (instance? sci.impl.vars.SciVar x))\n\n(defn dynamic-var\n  ([name]\n   (dynamic-var name nil (meta name)))\n  ([name init-val]\n   (dynamic-var name init-val (meta name)))\n  ([name init-val meta]\n   (let [meta (assoc meta :dynamic true)]\n     (SciVar. init-val name meta false))))\n\n(def current-file (dynamic-var '*file* nil))\n\n(def user-ns (->SciNamespace 'user nil))\n\n(def current-ns (dynamic-var '*ns* user-ns))\n\n(defn current-ns-name []\n  (getName @current-ns))\n\n(macros/deftime\n  (defmacro with-bindings\n    \"Macro for binding sci vars for internal use.\"\n    [bindings & body]\n    `(do\n       ;; important: outside try\n       (vars/push-thread-bindings ~bindings)\n       (try\n         (do ~@body)\n         (finally\n           (vars/pop-thread-bindings))))))\n\n(defn alter-var-root [v f & args]\n  #?(:clj\n     (locking v (bindRoot v (apply f (getRawRoot v) args)))\n     :cljs (bindRoot v (apply f (getRawRoot v) args))))\n\n(defn new-var\n  \"Returns a new sci var.\"\n  ([name] (doto (new-var name nil nil)\n            (unbind)))\n  ([name init-val] (new-var name init-val (meta name)))\n  ([name init-val meta] (->SciVar init-val name meta false)))\n\n(comment\n  (def v1 (SciVar. (fn [] 0) 'foo nil))\n  @v1 ;; 0\n  (push-thread-bindings {v1 2})\n  (get-thread-binding v1) ;; 2\n  (push-thread-bindings {v1 3})\n  (get-thread-binding v1) ;; 3\n  (pop-thread-bindings)\n  (get-thread-binding v1) ;; 2\n  (pop-thread-bindings)\n  (get-thread-binding v1) ;; nil\n  @v1 ;; 0\n  (pop-thread-bindings) ;; exception\n  )\n"]}