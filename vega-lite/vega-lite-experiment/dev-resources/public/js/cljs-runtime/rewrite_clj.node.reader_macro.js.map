{"version":3,"sources":["rewrite_clj/node/reader_macro.cljs"],"mappings":"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","names":["this__4380__auto__","k__4381__auto__","this__4382__auto__","k46048","else__4383__auto__","G__46058","cljs.core/Keyword","tag","prefix","suffix","sexpr-fn","sexpr-count","children","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__46063","vec__46064","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__46047","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this46049","other46050","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__46094","cljs.core/keyword-identical?","expr__46095","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.reader-macro/ReaderNode","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__46051","extmap__4419__auto__","G__46099","cljs.core/record?","rewrite-clj.node.reader-macro/->ReaderNode","rewrite-clj.node.reader-macro/map->ReaderNode","_","cljs.core/not","G__46091","rewrite-clj.node.protocols/sexprs","js/Error","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","this","children'","rewrite-clj.node.protocols/assert-sexpr-count","k46101","G__46106","p__46107","vec__46108","G__46100","this46102","other46103","pred__46114","expr__46115","rewrite-clj.node.reader-macro/ReaderMacroNode","G__46104","G__46117","rewrite-clj.node.reader-macro/->ReaderMacroNode","rewrite-clj.node.reader-macro/map->ReaderMacroNode","k46119","G__46123","p__46124","vec__46125","G__46118","this46120","other46121","pred__46128","expr__46129","rewrite-clj.node.reader-macro/DerefNode","G__46122","G__46131","rewrite-clj.node.reader-macro/->DerefNode","rewrite-clj.node.reader-macro/map->DerefNode","cljs.core.list_STAR_","rewrite-clj.node.reader-macro/->node","rewrite-clj.node.reader-macro/var-node","cljs.core/sequential?","p1__46135#","rewrite-clj.node.reader-macro/eval-node","p1__46136#","var_args","G__46138","rewrite-clj.node.reader-macro/reader-macro-node","macro-node","form-node","rewrite-clj.node.whitespace/spaces","rewrite-clj.node.reader-macro/deref-node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.reader-macro\n  (:require [rewrite-clj.node.protocols :as node]\n            [rewrite-clj.node.whitespace :as ws]))\n\n;; ## Node\n\n(defrecord ReaderNode [tag prefix suffix\n                       sexpr-fn sexpr-count\n                       children]\n  node/Node\n  (tag [_] tag)\n  (printable-only? [_]\n    (not sexpr-fn))\n  (sexpr [_]\n    (if sexpr-fn\n      (sexpr-fn (node/sexprs children))\n      (throw (js/Error. \"Unsupported operation\"))))\n  (length [_]\n    (-> (node/sum-lengths children)\n        (+ 1 (count prefix) (count suffix))))\n  (string [_]\n    (str \"#\" prefix (node/concat-strings children) suffix))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (when sexpr-count\n      (node/assert-sexpr-count children' sexpr-count))\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(defrecord ReaderMacroNode [children]\n  node/Node\n  (tag [_] :reader-macro)\n  (printable-only?[_] false)\n  (sexpr [this]\n    (list 'read-string (node/string this)))\n  (length [_]\n    (inc (node/sum-lengths children)))\n  (string [_]\n    (str \"#\" (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (node/assert-sexpr-count children' 2)\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(defrecord DerefNode [children]\n  node/Node\n  (tag [_] :deref)\n  (printable-only?[_] false)\n  (sexpr [this]\n    (list* 'deref (node/sexprs children)))\n  (length [_]\n    (inc (node/sum-lengths children)))\n  (string [_]\n    (str \"@\" (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (node/assert-sexpr-count children' 1)\n    (assoc this :children children'))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n;; TODO:\n;; (node/make-printable! ReaderNode)\n;; (node/make-printable! ReaderMacroNode)\n;; (node/make-printable! DerefNode)\n\n;; ## Constructors\n\n(defn- ->node\n  [tag prefix suffix sexpr-fn sexpr-count children]\n  (when sexpr-count\n    (node/assert-sexpr-count children sexpr-count))\n  (->ReaderNode\n    tag prefix suffix\n    sexpr-fn sexpr-count\n    children))\n\n(defn var-node\n  \"Create node representing a var.\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node :var \"'\" \"\" #(list* 'var %) 1 children)\n    (recur [children])))\n\n(defn eval-node\n  \"Create node representing an inline evaluation. (`#=...`)\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :eval \"=\" \"\"\n      #(list 'eval (list* 'quote %))\n      1 children)\n    (recur [children])))\n\n(defn reader-macro-node\n  \"Create node representing a reader macro. (`#... ...`)\"\n  ([children]\n   (->ReaderMacroNode children))\n  ([macro-node form-node]\n   (->ReaderMacroNode [macro-node (ws/spaces 1) form-node])))\n\n(defn deref-node\n  \"Create node representing the dereferencing of a form. (`@...`)\n   Takes either a seq of nodes or a single one.\"\n  [children]\n  (if (sequential? children)\n    (->DerefNode children)\n    (->DerefNode [children])))\n"]}