{"version":3,"sources":["rewrite_clj/zip/editz.cljs"],"mappings":"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","names":["rewrite-clj.zip.editz/replace","zloc","value","clojure.zip/replace","rewrite-clj.node/coerce","rewrite-clj.zip.editz/edit-node","node","f","rewrite-clj.node/sexpr","G__46391","G__46390","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.editz/edit","seq46393","G__46394","cljs.core/first","cljs.core/next","G__46395","self__4723__auto__","args","p1__46392#","clojure.zip.edit","cljs.core.apply","rewrite-clj.zip.editz/splice","clojure.zip/branch?","temp__5733__auto__","children","clojure.zip/children","cljs.core.drop_while","rewrite-clj.node/whitespace?","cljs.core/reverse","cljs.core/seq","loc","cljs.core.reduce","clojure.zip/insert-right","rewrite-clj.zip.utils/remove-and-move-right","or__4126__auto__","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.zip.removez/remove","rewrite-clj.zip.editz/edit-token","str-fn","e","rewrite-clj.zip.base/sexpr","e'","cljs.core/Keyword","cljs.core.keyword","cljs.core/namespace","G__46399","cljs.core/name","cljs.core/Symbol","cljs.core.symbol","G__46400","rewrite-clj.node/token-node","rewrite-clj.zip.editz/edit-multi-line","line-fn","n","clojure.zip/node","cljs.core.update_in","cljs.core.comp","cljs.core/vec","rewrite-clj.zip.editz/prefix","s","G__46403","js/Error","rewrite-clj.zip.base/tag","p1__46401#","lines","cljs.core/empty?","p1__46402#","rewrite-clj.zip.editz/suffix","G__46407","p1__46406#","cljs.core.concat","cljs.core/butlast","cljs.core/last"],"sourcesContent":["(ns rewrite-clj.zip.editz\n  (:refer-clojure :exclude [replace])\n  (:require [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.removez :as r]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [rewrite-clj.node :as n]\n            [clojure.zip :as z]))\n\n;; ## In-Place Modification\n\n(defn replace\n  \"Replace the node at the given location with one representing\n   the given value. (The value will be coerced to a node if\n   possible.)\"\n  [zloc value]\n  (z/replace zloc (n/coerce value)))\n\n(defn- edit-node\n  \"Create s-expression from node, apply the function and create\n   node from the result.\"\n  [node f]\n  (-> (n/sexpr node)\n      (f)\n      (n/coerce)))\n\n(defn edit\n  \"Apply the given function to the s-expression at the given\n   location, using its result to replace the node there. (The\n   result will be coerced to a node if possible.)\"\n  [zloc f & args]\n  (z/edit zloc edit-node #(apply f % args)))\n\n;; ## Splice\n\n\n\n(defn splice\n  \"Splice the given node, i.e. merge its children into the current one\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\n   \"\n  [zloc]\n  (if (z/branch? zloc)\n    (if-let [children (->> (z/children zloc)\n                           (drop-while n/whitespace?)\n                           (reverse)\n                           (drop-while n/whitespace?)\n                           (seq))]\n      (let [loc (->> (reduce z/insert-right zloc children)\n                     (u/remove-and-move-right))]\n        (or (ws/skip-whitespace loc) loc))\n      (r/remove zloc))\n    zloc))\n\n;; ## Prefix/Suffix\n\n(defn- edit-token\n  [zloc str-fn]\n  (let [e (base/sexpr zloc)\n        e' (cond (string? e) (str-fn e)\n                 (keyword? e) (keyword (namespace e) (str-fn (name e)))\n                 (symbol? e) (symbol (namespace e) (str-fn (name e))))]\n    (z/replace zloc (n/token-node e'))))\n\n(defn- edit-multi-line\n  [zloc line-fn]\n  (let [n (-> (z/node zloc)\n              (update-in [:lines] (comp line-fn vec)))]\n    (z/replace zloc n)))\n\n(defn prefix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str s %))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (update-in lines [0] #(str s %))))\n                     (edit-multi-line zloc ))))\n\n(defn suffix\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str % s))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (concat (butlast lines) (str (last lines) s))))\n                     (edit-multi-line zloc))))\n"]}