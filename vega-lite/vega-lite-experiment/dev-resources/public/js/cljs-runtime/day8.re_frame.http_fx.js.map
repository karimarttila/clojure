{"version":3,"sources":["day8/re_frame/http_fx.cljs"],"mappings":";AAwBA;;;AAAA,AAAAA,AAAMG,AAEHC,AAAWC,AAAWC;AAFzB,AAAA,AAAAL,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAEgCM;AAFhC,AAAAL,AAAAD,AAAA,AAAA,AAEyCO;AAFzC,AAIE,AAAID;AACF,AAACH,AAAAA,AAAAA,AAAWI,AAAAA;;AACZ,AAAMC,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACmB,AAAaJ,AACb,AAAeA,AACf,AAAeA,AACf,AAAmBA,AACfA,AAAwB,AAAA,AAACK,AAC/CH;AANhB,AAOE,AAACH,AAAAA,AAAAA,AAAWI,AAAAA;;;AAGlB,AAAA,AAAAG,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AACUM;AADV,AAAAF,AAAAJ,AAAA,AAAA,AAAA,AAEWT;AAFX,AAAAa,AAAAJ,AAAA,AAAA,AAAA,AAEsBR;AAFtB,AAME,AAAMe,AAAI,AAAKC;AAAf,AACMF,AACA,AAAA,AAAA,AAACG,AACUF,AACA,AAAA,AAAAG,AAACE,AAAQtB,AAIpB,AAACyB;AAJU,AACU,AAACF,AAAS,AAAAH,AAACI,AAAKvB;AAD1B,AAAAoB;AAAA,AAEU,AAACE,AAAS,AAAAF,AAACG,AAAKtB;AACjBe,AACpB,AAAA,AAAA;;AAER,AAAA,AAAMS,AAAqBV,AAAQb;AAAnC,AACE,AAAAwB,AAAoB,AAAA,AAAaX;AAAjC,AAAA,AAAAW;AAAA,AAAAA,AAASC;AAAT,AACE,AAACL,AAAS,AAACC,AAAKI,AAAWzB;;AAD7B;;;AA4BF,AAAA,AAAM0B,AACHb;AADH,AAIE,AAEMc,AAAiB,AAAA,AAAI,AAACC,AAAYf,AAASA,AAASA;AAF1D,AAGE,AAAAgB,AAAA,AAAAC,AAAgBH;AAAhBI,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQpB;AAAR,AAAA,AACE,AAAMb,AAAM,AAAA0C,AAAA,AAAI7B,AAAQD;AAAZ,AAAA,AAAA8B,AAAAA,AAAmCE,AAAAA,AAAAA;;AAA/C,AACE,AAACrB,AAAoBV,AAAQb;;AAFjC;AAAA,AAAA6B;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAX,AAAQhB;AAAR,AAAA,AACE,AAAMb,AAAM,AAAA2C,AAAA,AAAI9B,AAAQD;AAAZ,AAAA,AAAA+B,AAAAA,AAAmCC,AAAAA,AAAAA;;AAA/C,AACE,AAACrB,AAAoBV,AAAQb;;AAFjC;AAAA,AAAA,AAAAyC,AAAAZ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAIJ,AAAA,AAACgB,AAAmBnB","names":["p__76066","vec__76067","cljs.core.nth","day8.re-frame.http-fx/ajax-xhrio-handler","on-success","on-failure","xhrio","success?","response","details","cljs.core.merge","goog.net.ErrorCode/getDebugMessage","p__76074","map__76076","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","day8.re-frame.http-fx/request->xhrio-options","request","api","js/goog.net.XhrIo","cljs.core.assoc","p1__76071#","p1__76072#","cljs.core.partial","re-frame.core/dispatch","cljs.core.conj","cljs.core.dissoc","day8.re-frame.http-fx/dispatch-on-request","temp__5733__auto__","on-request","day8.re-frame.http-fx/http-effect","seq-request-maps","cljs.core/sequential?","seq__76080","cljs.core/seq","chunk__76081","count__76082","i__76083","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","G__76086","G__76087","ajax.core/ajax-request","re-frame.core/reg-fx"],"sourcesContent":["(ns day8.re-frame.http-fx\n  (:require\n    [goog.net.ErrorCode :as errors]\n    [re-frame.core :refer [reg-fx dispatch console]]\n    [ajax.core :as ajax]\n    #_[cljs.spec :as s])\n  (:import (goog.net XhrIo)))\n\n;; I provide the :http-xhrio effect handler leveraging cljs-ajax lib\n;; see API docs https://github.com/JulianBirch/cljs-ajax\n;; Note we use the ajax-request.\n;;\n;; Deviation from cljs-ajax options in request\n;; :handler       - not supported, see :on-success and :on-failure\n;; :on-success    - event vector dispatched with result\n;; :on-failure    - event vector dispatched with result\n;; :on-request    - event vector dispatched with raw xhrio object\n;;\n;; NOTE: if you need tokens or other values for your handlers,\n;;       provide them in the on-success, on-failure & on-request events e.g.\n;;       [:success-event \"my-token\"] your handler will get event-v\n;;       [:success-event \"my-token\" result]\n\n\n(defn ajax-xhrio-handler\n  \"ajax-request only provides a single handler for success and errors\"\n  [on-success on-failure xhrio [success? response]]\n  ; see http://docs.closure-library.googlecode.com/git/class_goog_net_XhrIo.html\n  (if success?\n    (on-success response)\n    (let [details (merge\n                    {:uri             (.getLastUri xhrio)\n                     :last-method     (.-lastMethod_ xhrio)\n                     :last-error      (.getLastError xhrio)\n                     :last-error-code (.getLastErrorCode xhrio)\n                     :debug-message   (-> xhrio .getLastErrorCode (errors/getDebugMessage))}\n                    response)]\n      (on-failure details))))\n\n\n(defn request->xhrio-options\n  [{:as   request\n    :keys [on-success on-failure]\n    :or   {on-success      [:http-no-on-success]\n           on-failure      [:http-no-on-failure]}}]\n  ; wrap events in cljs-ajax callback\n  (let [api (new goog.net.XhrIo)]\n    (-> request\n        (assoc\n          :api     api\n          :handler (partial ajax-xhrio-handler\n                            #(dispatch (conj on-success %))\n                            #(dispatch (conj on-failure %))\n                            api))\n        (dissoc :on-success :on-failure :on-request))))\n\n(defn dispatch-on-request [request xhrio]\n  (if-let [on-request (:on-request request)]\n    (dispatch (conj on-request xhrio))))\n\n;; Specs commented out until ClojureScript has a stable release of spec.\n;\n;(s/def ::method keyword?)\n;(s/def ::uri string?)\n;(s/def ::response-format (s/keys :req-un [::description ::read ::content-type]))\n;(s/def ::format (s/keys :req-un [::write ::content-type]))\n;(s/def ::timeout nat-int?)\n;(s/def ::params any?)\n;(s/def ::headers map?)\n;(s/def ::with-credentials boolean?)\n;\n;(s/def ::on-success vector?)\n;(s/def ::on-failure vector?)\n;(s/def ::on-request vector?)\n;\n;(s/def ::request-map (s/and (s/keys :req-un [::method ::uri ::response-format ::on-success ::on-failure ::on-request]\n;                                    :opt-un [::format ::timeout ::params ::headers ::with-credentials])\n;                            (fn [m] (if (contains? m :params)\n;                                      (contains? m :format)\n;                                      true))))\n;\n;(s/def ::sequential-or-map (s/or :request-map ::request-map :seq-request-maps (s/coll-of ::request-map\n;                                                                                         :kind sequential?\n;                                                                                         :into [])))\n\n(defn http-effect\n  [request]\n  #_(when-not (s/valid? ::sequential-or-map request)\n      (throw (ex-info \"http-xhrio fx: spec error\" (s/explain-data ::sequential-or-map request))))\n  (let [#_ #_ [conform-val v] (s/conform ::sequential-or-map request)\n        #_ #_ seq-request-maps (if (= :seq-request-maps conform-val) v [v])\n        seq-request-maps (if (sequential? request) request [request])]\n    (doseq [request seq-request-maps]\n      (let [xhrio (-> request request->xhrio-options ajax/ajax-request)]\n        (dispatch-on-request request xhrio)))))\n\n(reg-fx :http-xhrio http-effect)\n"]}