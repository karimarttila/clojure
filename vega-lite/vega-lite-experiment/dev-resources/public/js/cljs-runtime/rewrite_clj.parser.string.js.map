{"version":3,"sources":["rewrite_clj/parser/string.cljs"],"mappings":";AAMA;;;AAAA,AAAOA,AAEJC,AAAMC;AAFT,AAGE,AAAMC,AAAE,AAAWD;AAAnB,AACE,AAAA,AAAMA;;AACN,AAACE,AAAKH,AAAME;;AAEhB,AAAA,AAAOE,AACQC;AADf,AAEE,AAACC,AAASD;;AACV,AAAMJ,AAAI,AAAAM;AAAV,AACE,AAAA,AAAOC;AAAP,AACOR;;AADP,AAEE,AAAAS,AAAW,AAACE,AAAAA,AAAAA,AAAYN,AAAAA;AAAxB,AAAA,AAAAI;AAAA,AAAAA,AAASC;AAAT,AACE,AAAM,AAAK,AAACE,AAAIJ,AAAS,AAAA,AAAYE;AAC/B,AAACX,AAAWC,AAAMC;;AADxB,AAGM,AAAA,AAAYS;AACZ,AAAOF;AAAQ,AAACT,AAAWC,AAAMC;;;;;AAJvC,AAOM,AACE,AAASA,AAAIS;;AACb,AAAO,AAAK,AAACE,AAAIJ,AAAS,AAAA,AAAYE;AAAOV;;;;;;;;AACrD,AAAA,AAACa,AAAeR;;;;;AAExB,AAAA,AAAMS,AACST;AADf,AAEE,AAAAU,AAAkB,AAACX,AAAiBC;AAApC,AAAA,AAAAU,AAAAA,AAACC,AAAAA,AAAAA;;AAEH,AAAA,AAAMC,AACSZ;AADf,AAEE,AAAML,AAAM,AAACI,AAAiBC;AACxBa,AAAM,AAAA,AAACC,AAAiBnB;AAD9B,AAEE,AAAAoB,AAAiB,AAACG,AAAWL;AAA7BG,AAAoC,AAAA,AAAA,AAAWH;AAA/C,AAAA,AAAAE,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA","names":["rewrite-clj.parser.string/flush-into","lines","buf","s","cljs.core.conj","rewrite-clj.parser.string/read-string-data","reader","rewrite-clj.reader/ignore","goog.string/StringBuffer","escape?","temp__5733__auto__","c","rewrite-clj.reader/read-char","cljs.core/not","rewrite-clj.reader/throw-reader","rewrite-clj.parser.string/parse-string","G__46171","rewrite-clj.node/string-node","rewrite-clj.parser.string/parse-regex","regex","clojure.string.join","G__46172","G__46173","rewrite-clj.node/token-node","cljs.core/re-pattern"],"sourcesContent":["(ns rewrite-clj.parser.string\n  (:require [rewrite-clj.node :as node]\n            [rewrite-clj.reader :as r]\n            [goog.string :as gstring]\n            [clojure.string :as string]))\n\n(defn- flush-into\n  \"Flush buffer and add string to the given vector.\"\n  [lines buf]\n  (let [s (.toString buf)]\n    (.set buf \"\")\n    (conj lines s)))\n\n(defn- read-string-data\n  [^not-native reader]\n  (r/ignore reader)\n  (let [buf (gstring/StringBuffer.)]\n    (loop [escape? false\n           lines []]\n      (if-let [c (r/read-char reader)]\n        (cond (and (not escape?) (identical? c \\\"))\n              (flush-into lines buf)\n\n              (identical? c \\newline)\n              (recur escape? (flush-into lines buf))\n\n              :else\n              (do\n                (.append buf c)\n                (recur (and (not escape?) (identical? c \\\\)) lines)))\n        (r/throw-reader reader \"Unexpected EOF while reading string.\")))))\n\n(defn parse-string\n  [^not-native reader]\n  (node/string-node (read-string-data reader)))\n\n(defn parse-regex\n  [^not-native reader]\n  (let [lines (read-string-data reader)\n        regex (string/join \"\\n\" lines)]\n    (node/token-node (re-pattern regex) (str \"#\\\"\" regex \"\\\"\"))))\n"]}