{
"version":3,
"file":"module$node_modules$vega_dataflow$build$vega_dataflow.js",
"lineCount":51,
"mappings":"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",
"sources":["node_modules/vega-dataflow/build/vega-dataflow.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_dataflow$build$vega_dataflow\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-loader'), require('vega-format')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-loader', 'vega-format'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega));\n}(this, (function (exports, vegaUtil, vegaLoader, vegaFormat) { 'use strict';\n\n  function UniqueList(idFunc) {\n    const $ = idFunc || vegaUtil.identity,\n          list = [],\n          ids = {};\n\n    list.add = _ => {\n      const id = $(_);\n\n      if (!ids[id]) {\n        ids[id] = 1;\n        list.push(_);\n      }\n\n      return list;\n    };\n\n    list.remove = _ => {\n      const id = $(_);\n\n      if (ids[id]) {\n        ids[id] = 0;\n        const idx = list.indexOf(_);\n        if (idx >= 0) list.splice(idx, 1);\n      }\n\n      return list;\n    };\n\n    return list;\n  }\n\n  /**\n   * Invoke and await a potentially async callback function. If\n   * an error occurs, trap it and route to Dataflow.error.\n   * @param {Dataflow} df - The dataflow instance\n   * @param {function} callback - A callback function to invoke\n   *   and then await. The dataflow will be passed as the single\n   *   argument to the function.\n   */\n  async function asyncCallback (df, callback) {\n    try {\n      await callback(df);\n    } catch (err) {\n      df.error(err);\n    }\n  }\n\n  const TUPLE_ID_KEY = Symbol('vega_id');\n  let TUPLE_ID = 1;\n  /**\n   * Checks if an input value is a registered tuple.\n   * @param {*} t - The value to check.\n   * @return {boolean} True if the input is a tuple, false otherwise.\n   */\n\n  function isTuple(t) {\n    return !!(t && tupleid(t));\n  }\n  /**\n   * Returns the id of a tuple.\n   * @param {object} t - The input tuple.\n   * @return {*} the tuple id.\n   */\n\n  function tupleid(t) {\n    return t[TUPLE_ID_KEY];\n  }\n  /**\n   * Sets the id of a tuple.\n   * @param {object} t - The input tuple.\n   * @param {*} id - The id value to set.\n   * @return {object} the input tuple.\n   */\n\n  function setid(t, id) {\n    t[TUPLE_ID_KEY] = id;\n    return t;\n  }\n  /**\n   * Ingest an object or value as a data tuple.\n   * If the input value is an object, an id field will be added to it. For\n   * efficiency, the input object is modified directly. A copy is not made.\n   * If the input value is a literal, it will be wrapped in a new object\n   * instance, with the value accessible as the 'data' property.\n   * @param datum - The value to ingest.\n   * @return {object} The ingested data tuple.\n   */\n\n\n  function ingest$1(datum) {\n    const t = datum === Object(datum) ? datum : {\n      data: datum\n    };\n    return tupleid(t) ? t : setid(t, TUPLE_ID++);\n  }\n  /**\n   * Given a source tuple, return a derived copy.\n   * @param {object} t - The source tuple.\n   * @return {object} The derived tuple.\n   */\n\n  function derive(t) {\n    return rederive(t, ingest$1({}));\n  }\n  /**\n   * Rederive a derived tuple by copying values from the source tuple.\n   * @param {object} t - The source tuple.\n   * @param {object} d - The derived tuple.\n   * @return {object} The derived tuple.\n   */\n\n  function rederive(t, d) {\n    for (const k in t) d[k] = t[k];\n\n    return d;\n  }\n  /**\n   * Replace an existing tuple with a new tuple.\n   * @param {object} t - The existing data tuple.\n   * @param {object} d - The new tuple that replaces the old.\n   * @return {object} The new tuple.\n   */\n\n  function replace(t, d) {\n    return setid(d, tupleid(t));\n  }\n  /**\n   * Generate an augmented comparator function that provides stable\n   * sorting by tuple id when the given comparator produces ties.\n   * @param {function} cmp - The comparator to augment.\n   * @param {function} [f] - Optional tuple accessor function.\n   * @return {function} An augmented comparator function.\n   */\n\n  function stableCompare(cmp, f) {\n    return !cmp ? null : f ? (a, b) => cmp(a, b) || tupleid(f(a)) - tupleid(f(b)) : (a, b) => cmp(a, b) || tupleid(a) - tupleid(b);\n  }\n\n  function isChangeSet(v) {\n    return v && v.constructor === changeset;\n  }\n  function changeset() {\n    const add = [],\n          // insert tuples\n    rem = [],\n          // remove tuples\n    mod = [],\n          // modify tuples\n    remp = [],\n          // remove by predicate\n    modp = []; // modify by predicate\n\n    let clean = null,\n        reflow = false;\n    return {\n      constructor: changeset,\n\n      insert(t) {\n        const d = vegaUtil.array(t),\n              n = d.length;\n\n        for (let i = 0; i < n; ++i) add.push(d[i]);\n\n        return this;\n      },\n\n      remove(t) {\n        const a = vegaUtil.isFunction(t) ? remp : rem,\n              d = vegaUtil.array(t),\n              n = d.length;\n\n        for (let i = 0; i < n; ++i) a.push(d[i]);\n\n        return this;\n      },\n\n      modify(t, field, value) {\n        const m = {\n          field: field,\n          value: vegaUtil.constant(value)\n        };\n\n        if (vegaUtil.isFunction(t)) {\n          m.filter = t;\n          modp.push(m);\n        } else {\n          m.tuple = t;\n          mod.push(m);\n        }\n\n        return this;\n      },\n\n      encode(t, set) {\n        if (vegaUtil.isFunction(t)) modp.push({\n          filter: t,\n          field: set\n        });else mod.push({\n          tuple: t,\n          field: set\n        });\n        return this;\n      },\n\n      clean(value) {\n        clean = value;\n        return this;\n      },\n\n      reflow() {\n        reflow = true;\n        return this;\n      },\n\n      pulse(pulse, tuples) {\n        const cur = {},\n              out = {};\n        let i, n, m, f, t, id; // build lookup table of current tuples\n\n        for (i = 0, n = tuples.length; i < n; ++i) {\n          cur[tupleid(tuples[i])] = 1;\n        } // process individual tuples to remove\n\n\n        for (i = 0, n = rem.length; i < n; ++i) {\n          t = rem[i];\n          cur[tupleid(t)] = -1;\n        } // process predicate-based removals\n\n\n        for (i = 0, n = remp.length; i < n; ++i) {\n          f = remp[i];\n          tuples.forEach(t => {\n            if (f(t)) cur[tupleid(t)] = -1;\n          });\n        } // process all add tuples\n\n\n        for (i = 0, n = add.length; i < n; ++i) {\n          t = add[i];\n          id = tupleid(t);\n\n          if (cur[id]) {\n            // tuple already resides in dataset\n            // if flagged for both add and remove, cancel\n            cur[id] = 1;\n          } else {\n            // tuple does not reside in dataset, add\n            pulse.add.push(ingest$1(add[i]));\n          }\n        } // populate pulse rem list\n\n\n        for (i = 0, n = tuples.length; i < n; ++i) {\n          t = tuples[i];\n          if (cur[tupleid(t)] < 0) pulse.rem.push(t);\n        } // modify helper method\n\n\n        function modify(t, f, v) {\n          if (v) {\n            t[f] = v(t);\n          } else {\n            pulse.encode = f;\n          }\n\n          if (!reflow) out[tupleid(t)] = t;\n        } // process individual tuples to modify\n\n\n        for (i = 0, n = mod.length; i < n; ++i) {\n          m = mod[i];\n          t = m.tuple;\n          f = m.field;\n          id = cur[tupleid(t)];\n\n          if (id > 0) {\n            modify(t, f, m.value);\n            pulse.modifies(f);\n          }\n        } // process predicate-based modifications\n\n\n        for (i = 0, n = modp.length; i < n; ++i) {\n          m = modp[i];\n          f = m.filter;\n          tuples.forEach(t => {\n            if (f(t) && cur[tupleid(t)] > 0) {\n              modify(t, m.field, m.value);\n            }\n          });\n          pulse.modifies(m.field);\n        } // upon reflow request, populate mod with all non-removed tuples\n        // otherwise, populate mod with modified tuples only\n\n\n        if (reflow) {\n          pulse.mod = rem.length || remp.length ? tuples.filter(t => cur[tupleid(t)] > 0) : tuples.slice();\n        } else {\n          for (id in out) pulse.mod.push(out[id]);\n        } // set pulse garbage collection request\n\n\n        if (clean || clean == null && (rem.length || remp.length)) {\n          pulse.clean(true);\n        }\n\n        return pulse;\n      }\n\n    };\n  }\n\n  const CACHE = '_:mod:_';\n  /**\n   * Hash that tracks modifications to assigned values.\n   * Callers *must* use the set method to update values.\n   */\n\n  function Parameters() {\n    Object.defineProperty(this, CACHE, {\n      writable: true,\n      value: {}\n    });\n  }\n  Parameters.prototype = {\n    /**\n     * Set a parameter value. If the parameter value changes, the parameter\n     * will be recorded as modified.\n     * @param {string} name - The parameter name.\n     * @param {number} index - The index into an array-value parameter. Ignored if\n     *   the argument is undefined, null or less than zero.\n     * @param {*} value - The parameter value to set.\n     * @param {boolean} [force=false] - If true, records the parameter as modified\n     *   even if the value is unchanged.\n     * @return {Parameters} - This parameter object.\n     */\n    set(name, index, value, force) {\n      const o = this,\n            v = o[name],\n            mod = o[CACHE];\n\n      if (index != null && index >= 0) {\n        if (v[index] !== value || force) {\n          v[index] = value;\n          mod[index + ':' + name] = -1;\n          mod[name] = -1;\n        }\n      } else if (v !== value || force) {\n        o[name] = value;\n        mod[name] = vegaUtil.isArray(value) ? 1 + value.length : -1;\n      }\n\n      return o;\n    },\n\n    /**\n     * Tests if one or more parameters has been modified. If invoked with no\n     * arguments, returns true if any parameter value has changed. If the first\n     * argument is array, returns trues if any parameter name in the array has\n     * changed. Otherwise, tests if the given name and optional array index has\n     * changed.\n     * @param {string} name - The parameter name to test.\n     * @param {number} [index=undefined] - The parameter array index to test.\n     * @return {boolean} - Returns true if a queried parameter was modified.\n     */\n    modified(name, index) {\n      const mod = this[CACHE];\n\n      if (!arguments.length) {\n        for (const k in mod) {\n          if (mod[k]) return true;\n        }\n\n        return false;\n      } else if (vegaUtil.isArray(name)) {\n        for (let k = 0; k < name.length; ++k) {\n          if (mod[name[k]]) return true;\n        }\n\n        return false;\n      }\n\n      return index != null && index >= 0 ? index + 1 < mod[name] || !!mod[index + ':' + name] : !!mod[name];\n    },\n\n    /**\n     * Clears the modification records. After calling this method,\n     * all parameters are considered unmodified.\n     */\n    clear() {\n      this[CACHE] = {};\n      return this;\n    }\n\n  };\n\n  let OP_ID = 0;\n  const PULSE = 'pulse',\n        NO_PARAMS = new Parameters(); // Boolean Flags\n\n  const SKIP$1 = 1,\n        MODIFIED = 2;\n  /**\n   * An Operator is a processing node in a dataflow graph.\n   * Each operator stores a value and an optional value update function.\n   * Operators can accept a hash of named parameters. Parameter values can\n   * either be direct (JavaScript literals, arrays, objects) or indirect\n   * (other operators whose values will be pulled dynamically). Operators\n   * included as parameters will have this operator added as a dependency.\n   * @constructor\n   * @param {*} [init] - The initial value for this operator.\n   * @param {function(object, Pulse)} [update] - An update function. Upon\n   *   evaluation of this operator, the update function will be invoked and the\n   *   return value will be used as the new value of this operator.\n   * @param {object} [params] - The parameters for this operator.\n   * @param {boolean} [react=true] - Flag indicating if this operator should\n   *   listen for changes to upstream operators included as parameters.\n   * @see parameters\n   */\n\n  function Operator(init, update, params, react) {\n    this.id = ++OP_ID;\n    this.value = init;\n    this.stamp = -1;\n    this.rank = -1;\n    this.qrank = -1;\n    this.flags = 0;\n\n    if (update) {\n      this._update = update;\n    }\n\n    if (params) this.parameters(params, react);\n  }\n\n  function flag(bit) {\n    return function (state) {\n      const f = this.flags;\n      if (arguments.length === 0) return !!(f & bit);\n      this.flags = state ? f | bit : f & ~bit;\n      return this;\n    };\n  }\n\n  Operator.prototype = {\n    /**\n     * Returns a list of target operators dependent on this operator.\n     * If this list does not exist, it is created and then returned.\n     * @return {UniqueList}\n     */\n    targets() {\n      return this._targets || (this._targets = UniqueList(vegaUtil.id));\n    },\n\n    /**\n     * Sets the value of this operator.\n     * @param {*} value - the value to set.\n     * @return {Number} Returns 1 if the operator value has changed\n     *   according to strict equality, returns 0 otherwise.\n     */\n    set(value) {\n      if (this.value !== value) {\n        this.value = value;\n        return 1;\n      } else {\n        return 0;\n      }\n    },\n\n    /**\n     * Indicates that operator evaluation should be skipped on the next pulse.\n     * This operator will still propagate incoming pulses, but its update function\n     * will not be invoked. The skip flag is reset after every pulse, so calling\n     * this method will affect processing of the next pulse only.\n     */\n    skip: flag(SKIP$1),\n\n    /**\n     * Indicates that this operator's value has been modified on its most recent\n     * pulse. Normally modification is checked via strict equality; however, in\n     * some cases it is more efficient to update the internal state of an object.\n     * In those cases, the modified flag can be used to trigger propagation. Once\n     * set, the modification flag persists across pulses until unset. The flag can\n     * be used with the last timestamp to test if a modification is recent.\n     */\n    modified: flag(MODIFIED),\n\n    /**\n     * Sets the parameters for this operator. The parameter values are analyzed for\n     * operator instances. If found, this operator will be added as a dependency\n     * of the parameterizing operator. Operator values are dynamically marshalled\n     * from each operator parameter prior to evaluation. If a parameter value is\n     * an array, the array will also be searched for Operator instances. However,\n     * the search does not recurse into sub-arrays or object properties.\n     * @param {object} params - A hash of operator parameters.\n     * @param {boolean} [react=true] - A flag indicating if this operator should\n     *   automatically update (react) when parameter values change. In other words,\n     *   this flag determines if the operator registers itself as a listener on\n     *   any upstream operators included in the parameters.\n     * @param {boolean} [initonly=false] - A flag indicating if this operator\n     *   should calculate an update only upon its initiatal evaluation, then\n     *   deregister dependencies and suppress all future update invocations.\n     * @return {Operator[]} - An array of upstream dependencies.\n     */\n    parameters(params, react, initonly) {\n      react = react !== false;\n      const argval = this._argval = this._argval || new Parameters(),\n            argops = this._argops = this._argops || [],\n            deps = [];\n      let name, value, n, i;\n\n      const add = (name, index, value) => {\n        if (value instanceof Operator) {\n          if (value !== this) {\n            if (react) value.targets().add(this);\n            deps.push(value);\n          }\n\n          argops.push({\n            op: value,\n            name: name,\n            index: index\n          });\n        } else {\n          argval.set(name, index, value);\n        }\n      };\n\n      for (name in params) {\n        value = params[name];\n\n        if (name === PULSE) {\n          vegaUtil.array(value).forEach(op => {\n            if (!(op instanceof Operator)) {\n              vegaUtil.error('Pulse parameters must be operator instances.');\n            } else if (op !== this) {\n              op.targets().add(this);\n              deps.push(op);\n            }\n          });\n          this.source = value;\n        } else if (vegaUtil.isArray(value)) {\n          argval.set(name, -1, Array(n = value.length));\n\n          for (i = 0; i < n; ++i) add(name, i, value[i]);\n        } else {\n          add(name, -1, value);\n        }\n      }\n\n      this.marshall().clear(); // initialize values\n\n      if (initonly) argops.initonly = true;\n      return deps;\n    },\n\n    /**\n     * Internal method for marshalling parameter values.\n     * Visits each operator dependency to pull the latest value.\n     * @return {Parameters} A Parameters object to pass to the update function.\n     */\n    marshall(stamp) {\n      const argval = this._argval || NO_PARAMS,\n            argops = this._argops;\n      let item, i, op, mod;\n\n      if (argops) {\n        const n = argops.length;\n\n        for (i = 0; i < n; ++i) {\n          item = argops[i];\n          op = item.op;\n          mod = op.modified() && op.stamp === stamp;\n          argval.set(item.name, item.index, op.value, mod);\n        }\n\n        if (argops.initonly) {\n          for (i = 0; i < n; ++i) {\n            item = argops[i];\n            item.op.targets().remove(this);\n          }\n\n          this._argops = null;\n          this._update = null;\n        }\n      }\n\n      return argval;\n    },\n\n    /**\n     * Detach this operator from the dataflow.\n     * Unregisters listeners on upstream dependencies.\n     */\n    detach() {\n      const argops = this._argops;\n      let i, n, item, op;\n\n      if (argops) {\n        for (i = 0, n = argops.length; i < n; ++i) {\n          item = argops[i];\n          op = item.op;\n\n          if (op._targets) {\n            op._targets.remove(this);\n          }\n        }\n      } // remove references to the source and pulse object,\n      // if present, to prevent memory leaks of old data.\n\n\n      this.pulse = null;\n      this.source = null;\n    },\n\n    /**\n     * Delegate method to perform operator processing.\n     * Subclasses can override this method to perform custom processing.\n     * By default, it marshalls parameters and calls the update function\n     * if that function is defined. If the update function does not\n     * change the operator value then StopPropagation is returned.\n     * If no update function is defined, this method does nothing.\n     * @param {Pulse} pulse - the current dataflow pulse.\n     * @return The output pulse or StopPropagation. A falsy return value\n     *   (including undefined) will let the input pulse pass through.\n     */\n    evaluate(pulse) {\n      const update = this._update;\n\n      if (update) {\n        const params = this.marshall(pulse.stamp),\n              v = update.call(this, params, pulse);\n        params.clear();\n\n        if (v !== this.value) {\n          this.value = v;\n        } else if (!this.modified()) {\n          return pulse.StopPropagation;\n        }\n      }\n    },\n\n    /**\n     * Run this operator for the current pulse. If this operator has already\n     * been run at (or after) the pulse timestamp, returns StopPropagation.\n     * Internally, this method calls {@link evaluate} to perform processing.\n     * If {@link evaluate} returns a falsy value, the input pulse is returned.\n     * This method should NOT be overridden, instead overrride {@link evaluate}.\n     * @param {Pulse} pulse - the current dataflow pulse.\n     * @return the output pulse for this operator (or StopPropagation)\n     */\n    run(pulse) {\n      if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n      let rv;\n\n      if (this.skip()) {\n        this.skip(false);\n        rv = 0;\n      } else {\n        rv = this.evaluate(pulse);\n      }\n\n      return this.pulse = rv || pulse;\n    }\n\n  };\n\n  /**\n   * Add an operator to the dataflow graph. This function accepts a\n   * variety of input argument types. The basic signature supports an\n   * initial value, update function and parameters. If the first parameter\n   * is an Operator instance, it will be added directly. If it is a\n   * constructor for an Operator subclass, a new instance will be instantiated.\n   * Otherwise, if the first parameter is a function instance, it will be used\n   * as the update function and a null initial value is assumed.\n   * @param {*} init - One of: the operator to add, the initial value of\n   *   the operator, an operator class to instantiate, or an update function.\n   * @param {function} [update] - The operator update function.\n   * @param {object} [params] - The operator parameters.\n   * @param {boolean} [react=true] - Flag indicating if this operator should\n   *   listen for changes to upstream operators included as parameters.\n   * @return {Operator} - The added operator.\n   */\n\n  function add (init, update, params, react) {\n    let shift = 1,\n        op;\n\n    if (init instanceof Operator) {\n      op = init;\n    } else if (init && init.prototype instanceof Operator) {\n      op = new init();\n    } else if (vegaUtil.isFunction(init)) {\n      op = new Operator(null, init);\n    } else {\n      shift = 0;\n      op = new Operator(init, update);\n    }\n\n    this.rank(op);\n\n    if (shift) {\n      react = params;\n      params = update;\n    }\n\n    if (params) this.connect(op, op.parameters(params, react));\n    this.touch(op);\n    return op;\n  }\n\n  /**\n   * Connect a target operator as a dependent of source operators.\n   * If necessary, this method will rerank the target operator and its\n   * dependents to ensure propagation proceeds in a topologically sorted order.\n   * @param {Operator} target - The target operator.\n   * @param {Array<Operator>} - The source operators that should propagate\n   *   to the target operator.\n   */\n  function connect (target, sources) {\n    const targetRank = target.rank,\n          n = sources.length;\n\n    for (let i = 0; i < n; ++i) {\n      if (targetRank < sources[i].rank) {\n        this.rerank(target);\n        return;\n      }\n    }\n  }\n\n  let STREAM_ID = 0;\n  /**\n   * Models an event stream.\n   * @constructor\n   * @param {function(Object, number): boolean} [filter] - Filter predicate.\n   *   Events pass through when truthy, events are suppressed when falsy.\n   * @param {function(Object): *} [apply] - Applied to input events to produce\n   *   new event values.\n   * @param {function(Object)} [receive] - Event callback function to invoke\n   *   upon receipt of a new event. Use to override standard event processing.\n   */\n\n  function EventStream(filter, apply, receive) {\n    this.id = ++STREAM_ID;\n    this.value = null;\n    if (receive) this.receive = receive;\n    if (filter) this._filter = filter;\n    if (apply) this._apply = apply;\n  }\n  /**\n   * Creates a new event stream instance with the provided\n   * (optional) filter, apply and receive functions.\n   * @param {function(Object, number): boolean} [filter] - Filter predicate.\n   *   Events pass through when truthy, events are suppressed when falsy.\n   * @param {function(Object): *} [apply] - Applied to input events to produce\n   *   new event values.\n   * @see EventStream\n   */\n\n  function stream(filter, apply, receive) {\n    return new EventStream(filter, apply, receive);\n  }\n  EventStream.prototype = {\n    _filter: vegaUtil.truthy,\n    _apply: vegaUtil.identity,\n\n    targets() {\n      return this._targets || (this._targets = UniqueList(vegaUtil.id));\n    },\n\n    consume(_) {\n      if (!arguments.length) return !!this._consume;\n      this._consume = !!_;\n      return this;\n    },\n\n    receive(evt) {\n      if (this._filter(evt)) {\n        const val = this.value = this._apply(evt),\n              trg = this._targets,\n              n = trg ? trg.length : 0;\n\n        for (let i = 0; i < n; ++i) trg[i].receive(val);\n\n        if (this._consume) {\n          evt.preventDefault();\n          evt.stopPropagation();\n        }\n      }\n    },\n\n    filter(filter) {\n      const s = stream(filter);\n      this.targets().add(s);\n      return s;\n    },\n\n    apply(apply) {\n      const s = stream(null, apply);\n      this.targets().add(s);\n      return s;\n    },\n\n    merge() {\n      const s = stream();\n      this.targets().add(s);\n\n      for (let i = 0, n = arguments.length; i < n; ++i) {\n        arguments[i].targets().add(s);\n      }\n\n      return s;\n    },\n\n    throttle(pause) {\n      let t = -1;\n      return this.filter(() => {\n        const now = Date.now();\n\n        if (now - t > pause) {\n          t = now;\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    },\n\n    debounce(delay) {\n      const s = stream();\n      this.targets().add(stream(null, null, vegaUtil.debounce(delay, e => {\n        const df = e.dataflow;\n        s.receive(e);\n        if (df && df.run) df.run();\n      })));\n      return s;\n    },\n\n    between(a, b) {\n      let active = false;\n      a.targets().add(stream(null, null, () => active = true));\n      b.targets().add(stream(null, null, () => active = false));\n      return this.filter(() => active);\n    },\n\n    detach() {\n      // ensures compatibility with operators (#2753)\n      // remove references to other streams and filter functions that may\n      // be bound to subcontexts that need to be garbage collected.\n      this._filter = vegaUtil.truthy;\n      this._targets = null;\n    }\n\n  };\n\n  /**\n   * Create a new event stream from an event source.\n   * @param {object} source - The event source to monitor. The input must\n   *  support the addEventListener method.\n   * @param {string} type - The event type.\n   * @param {function(object): boolean} [filter] - Event filter function.\n   * @param {function(object): *} [apply] - Event application function.\n   *   If provided, this function will be invoked and the result will be\n   *   used as the downstream event value.\n   * @return {EventStream}\n   */\n\n  function events (source, type, filter, apply) {\n    const df = this,\n          s = stream(filter, apply),\n          send = function (e) {\n      e.dataflow = df;\n\n      try {\n        s.receive(e);\n      } catch (error) {\n        df.error(error);\n      } finally {\n        df.run();\n      }\n    };\n\n    let sources;\n\n    if (typeof source === 'string' && typeof document !== 'undefined') {\n      sources = document.querySelectorAll(source);\n    } else {\n      sources = vegaUtil.array(source);\n    }\n\n    const n = sources.length;\n\n    for (let i = 0; i < n; ++i) {\n      sources[i].addEventListener(type, send);\n    }\n\n    return s;\n  }\n\n  function parse(data, format) {\n    const locale = this.locale();\n    return vegaLoader.read(data, format, locale.timeParse, locale.utcParse);\n  }\n  /**\n   * Ingests new data into the dataflow. First parses the data using the\n   * vega-loader read method, then pulses a changeset to the target operator.\n   * @param {Operator} target - The Operator to target with ingested data,\n   *   typically a Collect transform instance.\n   * @param {*} data - The input data, prior to parsing. For JSON this may\n   *   be a string or an object. For CSV, TSV, etc should be a string.\n   * @param {object} format - The data format description for parsing\n   *   loaded data. This object is passed to the vega-loader read method.\n   * @returns {Dataflow}\n   */\n\n  function ingest(target, data, format) {\n    data = this.parse(data, format);\n    return this.pulse(target, this.changeset().insert(data));\n  }\n  /**\n   * Request data from an external source, parse it, and return a Promise.\n   * @param {string} url - The URL from which to load the data. This string\n   *   is passed to the vega-loader load method.\n   * @param {object} [format] - The data format description for parsing\n   *   loaded data. This object is passed to the vega-loader read method.\n   * @return {Promise} A Promise that resolves upon completion of the request.\n   *   The resolved object contains the following properties:\n   *   - data: an array of parsed data (or null upon error)\n   *   - status: a code for success (0), load fail (-1), or parse fail (-2)\n   */\n\n  async function request(url, format) {\n    const df = this;\n    let status = 0,\n        data;\n\n    try {\n      data = await df.loader().load(url, {\n        context: 'dataflow',\n        response: vegaLoader.responseType(format && format.type)\n      });\n\n      try {\n        data = df.parse(data, format);\n      } catch (err) {\n        status = -2;\n        df.warn('Data ingestion failed', url, err);\n      }\n    } catch (err) {\n      status = -1;\n      df.warn('Loading failed', url, err);\n    }\n\n    return {\n      data,\n      status\n    };\n  }\n  async function preload(target, url, format) {\n    const df = this,\n          pending = df._pending || loadPending(df);\n    pending.requests += 1;\n    const res = await df.request(url, format);\n    df.pulse(target, df.changeset().remove(vegaUtil.truthy).insert(res.data || []));\n    pending.done();\n    return res;\n  }\n\n  function loadPending(df) {\n    let accept;\n    const pending = new Promise(a => accept = a);\n    pending.requests = 0;\n\n    pending.done = () => {\n      if (--pending.requests === 0) {\n        df._pending = null;\n        accept(df);\n      }\n    };\n\n    return df._pending = pending;\n  }\n\n  const SKIP = {\n    skip: true\n  };\n  /**\n   * Perform operator updates in response to events. Applies an\n   * update function to compute a new operator value. If the update function\n   * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n   * changes. Otherwise, the operator value will be updated to the return value.\n   * @param {EventStream|Operator} source - The event source to react to.\n   *   This argument can be either an EventStream or an Operator.\n   * @param {Operator|function(object):Operator} target - The operator to update.\n   *   This argument can either be an Operator instance or (if the source\n   *   argument is an EventStream), a function that accepts an event object as\n   *   input and returns an Operator to target.\n   * @param {function(Parameters,Event): *} [update] - Optional update function\n   *   to compute the new operator value, or a literal value to set. Update\n   *   functions expect to receive a parameter object and event as arguments.\n   *   This function can either return a new operator value or (if the source\n   *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n   *   the target operator with tuple changes.\n   * @param {object} [params] - The update function parameters.\n   * @param {object} [options] - Additional options hash. If not overridden,\n   *   updated operators will be skipped by default.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *  be skipped: it will not be evaluated, but its dependents will be.\n   * @param {boolean} [options.force] - If true, the operator will\n   *   be re-evaluated even if its value has not changed.\n   * @return {Dataflow}\n   */\n\n  function on (source, target, update, params, options) {\n    const fn = source instanceof Operator ? onOperator : onStream;\n    fn(this, source, target, update, params, options);\n    return this;\n  }\n\n  function onStream(df, stream, target, update, params, options) {\n    const opt = vegaUtil.extend({}, options, SKIP);\n    let func, op;\n    if (!vegaUtil.isFunction(target)) target = vegaUtil.constant(target);\n\n    if (update === undefined) {\n      func = e => df.touch(target(e));\n    } else if (vegaUtil.isFunction(update)) {\n      op = new Operator(null, update, params, false);\n\n      func = e => {\n        op.evaluate(e);\n        const t = target(e),\n              v = op.value;\n        isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);\n      };\n    } else {\n      func = e => df.update(target(e), update, opt);\n    }\n\n    stream.apply(func);\n  }\n\n  function onOperator(df, source, target, update, params, options) {\n    if (update === undefined) {\n      source.targets().add(target);\n    } else {\n      const opt = options || {},\n            op = new Operator(null, updater(target, update), params, false);\n      op.modified(opt.force);\n      op.rank = source.rank; // immediately follow source\n\n      source.targets().add(op); // add dependency\n\n      if (target) {\n        op.skip(true); // skip first invocation\n\n        op.value = target.value; // initialize value\n\n        op.targets().add(target); // chain dependencies\n\n        df.connect(target, [op]); // rerank as needed, #1672\n      }\n    }\n  }\n\n  function updater(target, update) {\n    update = vegaUtil.isFunction(update) ? update : vegaUtil.constant(update);\n    return target ? function (_, pulse) {\n      const value = update(_, pulse);\n\n      if (!target.skip()) {\n        target.skip(value !== this.value).value = value;\n      }\n\n      return value;\n    } : update;\n  }\n\n  /**\n   * Assigns a rank to an operator. Ranks are assigned in increasing order\n   * by incrementing an internal rank counter.\n   * @param {Operator} op - The operator to assign a rank.\n   */\n\n  function rank(op) {\n    op.rank = ++this._rank;\n  }\n  /**\n   * Re-ranks an operator and all downstream target dependencies. This\n   * is necessary when upstream dependencies of higher rank are added to\n   * a target operator.\n   * @param {Operator} op - The operator to re-rank.\n   */\n\n  function rerank(op) {\n    const queue = [op];\n    let cur, list, i;\n\n    while (queue.length) {\n      this.rank(cur = queue.pop());\n\n      if (list = cur._targets) {\n        for (i = list.length; --i >= 0;) {\n          queue.push(cur = list[i]);\n          if (cur === op) vegaUtil.error('Cycle detected in dataflow graph.');\n        }\n      }\n    }\n  }\n\n  /**\n   * Sentinel value indicating pulse propagation should stop.\n   */\n\n  const StopPropagation = {}; // Pulse visit type flags\n\n  const ADD = 1 << 0,\n        REM = 1 << 1,\n        MOD = 1 << 2,\n        ADD_REM = ADD | REM,\n        ADD_MOD = ADD | MOD,\n        ALL = ADD | REM | MOD,\n        REFLOW = 1 << 3,\n        SOURCE = 1 << 4,\n        NO_SOURCE = 1 << 5,\n        NO_FIELDS = 1 << 6;\n  /**\n   * A Pulse enables inter-operator communication during a run of the\n   * dataflow graph. In addition to the current timestamp, a pulse may also\n   * contain a change-set of added, removed or modified data tuples, as well as\n   * a pointer to a full backing data source. Tuple change sets may not\n   * be fully materialized; for example, to prevent needless array creation\n   * a change set may include larger arrays and corresponding filter functions.\n   * The pulse provides a {@link visit} method to enable proper and efficient\n   * iteration over requested data tuples.\n   *\n   * In addition, each pulse can track modification flags for data tuple fields.\n   * Responsible transform operators should call the {@link modifies} method to\n   * indicate changes to data fields. The {@link modified} method enables\n   * querying of this modification state.\n   *\n   * @constructor\n   * @param {Dataflow} dataflow - The backing dataflow instance.\n   * @param {number} stamp - The current propagation timestamp.\n   * @param {string} [encode] - An optional encoding set name, which is then\n   *   accessible as Pulse.encode. Operators can respond to (or ignore) this\n   *   setting as appropriate. This parameter can be used in conjunction with\n   *   the Encode transform in the vega-encode module.\n   */\n\n  function Pulse(dataflow, stamp, encode) {\n    this.dataflow = dataflow;\n    this.stamp = stamp == null ? -1 : stamp;\n    this.add = [];\n    this.rem = [];\n    this.mod = [];\n    this.fields = null;\n    this.encode = encode || null;\n  }\n\n  function materialize(data, filter) {\n    const out = [];\n    vegaUtil.visitArray(data, filter, _ => out.push(_));\n    return out;\n  }\n\n  function filter(pulse, flags) {\n    const map = {};\n    pulse.visit(flags, t => {\n      map[tupleid(t)] = 1;\n    });\n    return t => map[tupleid(t)] ? null : t;\n  }\n\n  function addFilter(a, b) {\n    return a ? (t, i) => a(t, i) && b(t, i) : b;\n  }\n\n  Pulse.prototype = {\n    /**\n     * Sentinel value indicating pulse propagation should stop.\n     */\n    StopPropagation,\n\n    /**\n     * Boolean flag indicating ADD (added) tuples.\n     */\n    ADD,\n\n    /**\n     * Boolean flag indicating REM (removed) tuples.\n     */\n    REM,\n\n    /**\n     * Boolean flag indicating MOD (modified) tuples.\n     */\n    MOD,\n\n    /**\n     * Boolean flag indicating ADD (added) and REM (removed) tuples.\n     */\n    ADD_REM,\n\n    /**\n     * Boolean flag indicating ADD (added) and MOD (modified) tuples.\n     */\n    ADD_MOD,\n\n    /**\n     * Boolean flag indicating ADD, REM and MOD tuples.\n     */\n    ALL,\n\n    /**\n     * Boolean flag indicating all tuples in a data source\n     * except for the ADD, REM and MOD tuples.\n     */\n    REFLOW,\n\n    /**\n     * Boolean flag indicating a 'pass-through' to a\n     * backing data source, ignoring ADD, REM and MOD tuples.\n     */\n    SOURCE,\n\n    /**\n     * Boolean flag indicating that source data should be\n     * suppressed when creating a forked pulse.\n     */\n    NO_SOURCE,\n\n    /**\n     * Boolean flag indicating that field modifications should be\n     * suppressed when creating a forked pulse.\n     */\n    NO_FIELDS,\n\n    /**\n     * Creates a new pulse based on the values of this pulse.\n     * The dataflow, time stamp and field modification values are copied over.\n     * By default, new empty ADD, REM and MOD arrays are created.\n     * @param {number} flags - Integer of boolean flags indicating which (if any)\n     *   tuple arrays should be copied to the new pulse. The supported flag values\n     *   are ADD, REM and MOD. Array references are copied directly: new array\n     *   instances are not created.\n     * @return {Pulse} - The forked pulse instance.\n     * @see init\n     */\n    fork(flags) {\n      return new Pulse(this.dataflow).init(this, flags);\n    },\n\n    /**\n     * Creates a copy of this pulse with new materialized array\n     * instances for the ADD, REM, MOD, and SOURCE arrays.\n     * The dataflow, time stamp and field modification values are copied over.\n     * @return {Pulse} - The cloned pulse instance.\n     * @see init\n     */\n    clone() {\n      const p = this.fork(ALL);\n      p.add = p.add.slice();\n      p.rem = p.rem.slice();\n      p.mod = p.mod.slice();\n      if (p.source) p.source = p.source.slice();\n      return p.materialize(ALL | SOURCE);\n    },\n\n    /**\n     * Returns a pulse that adds all tuples from a backing source. This is\n     * useful for cases where operators are added to a dataflow after an\n     * upstream data pipeline has already been processed, ensuring that\n     * new operators can observe all tuples within a stream.\n     * @return {Pulse} - A pulse instance with all source tuples included\n     *   in the add array. If the current pulse already has all source\n     *   tuples in its add array, it is returned directly. If the current\n     *   pulse does not have a backing source, it is returned directly.\n     */\n    addAll() {\n      let p = this;\n      const reuse = !p.source || p.add === p.rem // special case for indexed set (e.g., crossfilter)\n      || !p.rem.length && p.source.length === p.add.length;\n\n      if (reuse) {\n        return p;\n      } else {\n        p = new Pulse(this.dataflow).init(this);\n        p.add = p.source;\n        p.rem = []; // new operators can ignore rem #2769\n\n        return p;\n      }\n    },\n\n    /**\n     * Initialize this pulse based on the values of another pulse. This method\n     * is used internally by {@link fork} to initialize a new forked tuple.\n     * The dataflow, time stamp and field modification values are copied over.\n     * By default, new empty ADD, REM and MOD arrays are created.\n     * @param {Pulse} src - The source pulse to copy from.\n     * @param {number} flags - Integer of boolean flags indicating which (if any)\n     *   tuple arrays should be copied to the new pulse. The supported flag values\n     *   are ADD, REM and MOD. Array references are copied directly: new array\n     *   instances are not created. By default, source data arrays are copied\n     *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.\n     * @return {Pulse} - Returns this Pulse instance.\n     */\n    init(src, flags) {\n      const p = this;\n      p.stamp = src.stamp;\n      p.encode = src.encode;\n\n      if (src.fields && !(flags & NO_FIELDS)) {\n        p.fields = src.fields;\n      }\n\n      if (flags & ADD) {\n        p.addF = src.addF;\n        p.add = src.add;\n      } else {\n        p.addF = null;\n        p.add = [];\n      }\n\n      if (flags & REM) {\n        p.remF = src.remF;\n        p.rem = src.rem;\n      } else {\n        p.remF = null;\n        p.rem = [];\n      }\n\n      if (flags & MOD) {\n        p.modF = src.modF;\n        p.mod = src.mod;\n      } else {\n        p.modF = null;\n        p.mod = [];\n      }\n\n      if (flags & NO_SOURCE) {\n        p.srcF = null;\n        p.source = null;\n      } else {\n        p.srcF = src.srcF;\n        p.source = src.source;\n        if (src.cleans) p.cleans = src.cleans;\n      }\n\n      return p;\n    },\n\n    /**\n     * Schedules a function to run after pulse propagation completes.\n     * @param {function} func - The function to run.\n     */\n    runAfter(func) {\n      this.dataflow.runAfter(func);\n    },\n\n    /**\n     * Indicates if tuples have been added, removed or modified.\n     * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.\n     *   Defaults to ALL, returning true if any tuple type has changed.\n     * @return {boolean} - Returns true if one or more queried tuple types have\n     *   changed, false otherwise.\n     */\n    changed(flags) {\n      const f = flags || ALL;\n      return f & ADD && this.add.length || f & REM && this.rem.length || f & MOD && this.mod.length;\n    },\n\n    /**\n     * Forces a \"reflow\" of tuple values, such that all tuples in the backing\n     * source are added to the MOD set, unless already present in the ADD set.\n     * @param {boolean} [fork=false] - If true, returns a forked copy of this\n     *   pulse, and invokes reflow on that derived pulse.\n     * @return {Pulse} - The reflowed pulse instance.\n     */\n    reflow(fork) {\n      if (fork) return this.fork(ALL).reflow();\n      const len = this.add.length,\n            src = this.source && this.source.length;\n\n      if (src && src !== len) {\n        this.mod = this.source;\n        if (len) this.filter(MOD, filter(this, ADD));\n      }\n\n      return this;\n    },\n\n    /**\n     * Get/set metadata to pulse requesting garbage collection\n     * to reclaim currently unused resources.\n     */\n    clean(value) {\n      if (arguments.length) {\n        this.cleans = !!value;\n        return this;\n      } else {\n        return this.cleans;\n      }\n    },\n\n    /**\n     * Marks one or more data field names as modified to assist dependency\n     * tracking and incremental processing by transform operators.\n     * @param {string|Array<string>} _ - The field(s) to mark as modified.\n     * @return {Pulse} - This pulse instance.\n     */\n    modifies(_) {\n      const hash = this.fields || (this.fields = {});\n\n      if (vegaUtil.isArray(_)) {\n        _.forEach(f => hash[f] = true);\n      } else {\n        hash[_] = true;\n      }\n\n      return this;\n    },\n\n    /**\n     * Checks if one or more data fields have been modified during this pulse\n     * propagation timestamp.\n     * @param {string|Array<string>} _ - The field(s) to check for modified.\n     * @param {boolean} nomod - If true, will check the modified flag even if\n     *   no mod tuples exist. If false (default), mod tuples must be present.\n     * @return {boolean} - Returns true if any of the provided fields has been\n     *   marked as modified, false otherwise.\n     */\n    modified(_, nomod) {\n      const fields = this.fields;\n      return !((nomod || this.mod.length) && fields) ? false : !arguments.length ? !!fields : vegaUtil.isArray(_) ? _.some(f => fields[f]) : fields[_];\n    },\n\n    /**\n     * Adds a filter function to one more tuple sets. Filters are applied to\n     * backing tuple arrays, to determine the actual set of tuples considered\n     * added, removed or modified. They can be used to delay materialization of\n     * a tuple set in order to avoid expensive array copies. In addition, the\n     * filter functions can serve as value transformers: unlike standard predicate\n     * function (which return boolean values), Pulse filters should return the\n     * actual tuple value to process. If a tuple set is already filtered, the\n     * new filter function will be appended into a conjuntive ('and') query.\n     * @param {number} flags - Flags indicating the tuple set(s) to filter.\n     * @param {function(*):object} filter - Filter function that will be applied\n     *   to the tuple set array, and should return a data tuple if the value\n     *   should be included in the tuple set, and falsy (or null) otherwise.\n     * @return {Pulse} - Returns this pulse instance.\n     */\n    filter(flags, filter) {\n      const p = this;\n      if (flags & ADD) p.addF = addFilter(p.addF, filter);\n      if (flags & REM) p.remF = addFilter(p.remF, filter);\n      if (flags & MOD) p.modF = addFilter(p.modF, filter);\n      if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);\n      return p;\n    },\n\n    /**\n     * Materialize one or more tuple sets in this pulse. If the tuple set(s) have\n     * a registered filter function, it will be applied and the tuple set(s) will\n     * be replaced with materialized tuple arrays.\n     * @param {number} flags - Flags indicating the tuple set(s) to materialize.\n     * @return {Pulse} - Returns this pulse instance.\n     */\n    materialize(flags) {\n      flags = flags || ALL;\n      const p = this;\n\n      if (flags & ADD && p.addF) {\n        p.add = materialize(p.add, p.addF);\n        p.addF = null;\n      }\n\n      if (flags & REM && p.remF) {\n        p.rem = materialize(p.rem, p.remF);\n        p.remF = null;\n      }\n\n      if (flags & MOD && p.modF) {\n        p.mod = materialize(p.mod, p.modF);\n        p.modF = null;\n      }\n\n      if (flags & SOURCE && p.srcF) {\n        p.source = p.source.filter(p.srcF);\n        p.srcF = null;\n      }\n\n      return p;\n    },\n\n    /**\n     * Visit one or more tuple sets in this pulse.\n     * @param {number} flags - Flags indicating the tuple set(s) to visit.\n     *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source\n     *   has been set).\n     * @param {function(object):*} - Visitor function invoked per-tuple.\n     * @return {Pulse} - Returns this pulse instance.\n     */\n    visit(flags, visitor) {\n      const p = this,\n            v = visitor;\n\n      if (flags & SOURCE) {\n        vegaUtil.visitArray(p.source, p.srcF, v);\n        return p;\n      }\n\n      if (flags & ADD) vegaUtil.visitArray(p.add, p.addF, v);\n      if (flags & REM) vegaUtil.visitArray(p.rem, p.remF, v);\n      if (flags & MOD) vegaUtil.visitArray(p.mod, p.modF, v);\n      const src = p.source;\n\n      if (flags & REFLOW && src) {\n        const sum = p.add.length + p.mod.length;\n\n        if (sum === src.length) ; else if (sum) {\n          vegaUtil.visitArray(src, filter(p, ADD_MOD), v);\n        } else {\n          // if no add/rem/mod tuples, visit source\n          vegaUtil.visitArray(src, p.srcF, v);\n        }\n      }\n\n      return p;\n    }\n\n  };\n\n  /**\n   * Represents a set of multiple pulses. Used as input for operators\n   * that accept multiple pulses at a time. Contained pulses are\n   * accessible via the public \"pulses\" array property. This pulse doe\n   * not carry added, removed or modified tuples directly. However,\n   * the visit method can be used to traverse all such tuples contained\n   * in sub-pulses with a timestamp matching this parent multi-pulse.\n   * @constructor\n   * @param {Dataflow} dataflow - The backing dataflow instance.\n   * @param {number} stamp - The timestamp.\n   * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n   */\n\n  function MultiPulse(dataflow, stamp, pulses, encode) {\n    const p = this,\n          n = pulses.length;\n    let c = 0;\n    this.dataflow = dataflow;\n    this.stamp = stamp;\n    this.fields = null;\n    this.encode = encode || null;\n    this.pulses = pulses;\n\n    for (let i = 0; i < n; ++i) {\n      const pulse = pulses[i];\n      if (pulse.stamp !== stamp) continue;\n\n      if (pulse.fields) {\n        const hash = p.fields || (p.fields = {});\n\n        for (const f in pulse.fields) {\n          hash[f] = 1;\n        }\n      }\n\n      if (pulse.changed(p.ADD)) c |= p.ADD;\n      if (pulse.changed(p.REM)) c |= p.REM;\n      if (pulse.changed(p.MOD)) c |= p.MOD;\n    }\n\n    this.changes = c;\n  }\n  vegaUtil.inherits(MultiPulse, Pulse, {\n    /**\n     * Creates a new pulse based on the values of this pulse.\n     * The dataflow, time stamp and field modification values are copied over.\n     * @return {Pulse}\n     */\n    fork(flags) {\n      const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n\n      if (flags !== undefined) {\n        if (flags & p.ADD) this.visit(p.ADD, t => p.add.push(t));\n        if (flags & p.REM) this.visit(p.REM, t => p.rem.push(t));\n        if (flags & p.MOD) this.visit(p.MOD, t => p.mod.push(t));\n      }\n\n      return p;\n    },\n\n    changed(flags) {\n      return this.changes & flags;\n    },\n\n    modified(_) {\n      const p = this,\n            fields = p.fields;\n      return !(fields && p.changes & p.MOD) ? 0 : vegaUtil.isArray(_) ? _.some(f => fields[f]) : fields[_];\n    },\n\n    filter() {\n      vegaUtil.error('MultiPulse does not support filtering.');\n    },\n\n    materialize() {\n      vegaUtil.error('MultiPulse does not support materialization.');\n    },\n\n    visit(flags, visitor) {\n      const p = this,\n            pulses = p.pulses,\n            n = pulses.length;\n      let i = 0;\n\n      if (flags & p.SOURCE) {\n        for (; i < n; ++i) {\n          pulses[i].visit(flags, visitor);\n        }\n      } else {\n        for (; i < n; ++i) {\n          if (pulses[i].stamp === p.stamp) {\n            pulses[i].visit(flags, visitor);\n          }\n        }\n      }\n\n      return p;\n    }\n\n  });\n\n  /* eslint-disable require-atomic-updates */\n  /**\n   * Evaluates the dataflow and returns a Promise that resolves when pulse\n   * propagation completes. This method will increment the current timestamp\n   * and process all updated, pulsed and touched operators. When invoked for\n   * the first time, all registered operators will be processed. This method\n   * should not be invoked by third-party clients, use {@link runAsync} or\n   * {@link run} instead.\n   * @param {string} [encode] - The name of an encoding set to invoke during\n   *   propagation. This value is added to generated Pulse instances;\n   *   operators can then respond to (or ignore) this setting as appropriate.\n   *   This parameter can be used in conjunction with the Encode transform in\n   *   the vega-encode package.\n   * @param {function} [prerun] - An optional callback function to invoke\n   *   immediately before dataflow evaluation commences.\n   * @param {function} [postrun] - An optional callback function to invoke\n   *   after dataflow evaluation completes. The callback will be invoked\n   *   after those registered via {@link runAfter}.\n   * @return {Promise} - A promise that resolves to this dataflow after\n   *   evaluation completes.\n   */\n\n  async function evaluate(encode, prerun, postrun) {\n    const df = this,\n          async = []; // if the pulse value is set, this is a re-entrant call\n\n    if (df._pulse) return reentrant(df); // wait for pending datasets to load\n\n    if (df._pending) await df._pending; // invoke prerun function, if provided\n\n    if (prerun) await asyncCallback(df, prerun); // exit early if there are no updates\n\n    if (!df._touched.length) {\n      df.debug('Dataflow invoked, but nothing to do.');\n      return df;\n    } // increment timestamp clock\n\n\n    const stamp = ++df._clock; // set the current pulse\n\n    df._pulse = new Pulse(df, stamp, encode); // initialize priority queue, reset touched operators\n\n    df._touched.forEach(op => df._enqueue(op, true));\n\n    df._touched = UniqueList(vegaUtil.id);\n    let count = 0,\n        op,\n        next,\n        error;\n\n    try {\n      while (df._heap.size() > 0) {\n        // dequeue operator with highest priority\n        op = df._heap.pop(); // re-queue if rank changed\n\n        if (op.rank !== op.qrank) {\n          df._enqueue(op, true);\n\n          continue;\n        } // otherwise, evaluate the operator\n\n\n        next = op.run(df._getPulse(op, encode));\n\n        if (next.then) {\n          // await if operator returns a promise directly\n          next = await next;\n        } else if (next.async) {\n          // queue parallel asynchronous execution\n          async.push(next.async);\n          next = StopPropagation;\n        } // propagate evaluation, enqueue dependent operators\n\n\n        if (next !== StopPropagation) {\n          if (op._targets) op._targets.forEach(op => df._enqueue(op));\n        } // increment visit counter\n\n\n        ++count;\n      }\n    } catch (err) {\n      df._heap.clear();\n\n      error = err;\n    } // reset pulse map\n\n\n    df._input = {};\n    df._pulse = null;\n    df.debug(`Pulse ${stamp}: ${count} operators`);\n\n    if (error) {\n      df._postrun = [];\n      df.error(error);\n    } // invoke callbacks queued via runAfter\n\n\n    if (df._postrun.length) {\n      const pr = df._postrun.sort((a, b) => b.priority - a.priority);\n\n      df._postrun = [];\n\n      for (let i = 0; i < pr.length; ++i) {\n        await asyncCallback(df, pr[i].callback);\n      }\n    } // invoke postrun function, if provided\n\n\n    if (postrun) await asyncCallback(df, postrun); // handle non-blocking asynchronous callbacks\n\n    if (async.length) {\n      Promise.all(async).then(cb => df.runAsync(null, () => {\n        cb.forEach(f => {\n          try {\n            f(df);\n          } catch (err) {\n            df.error(err);\n          }\n        });\n      }));\n    }\n\n    return df;\n  }\n  /**\n   * Queues dataflow evaluation to run once any other queued evaluations have\n   * completed and returns a Promise that resolves when the queued pulse\n   * propagation completes. If provided, a callback function will be invoked\n   * immediately before evaluation commences. This method will ensure a\n   * separate evaluation is invoked for each time it is called.\n   * @param {string} [encode] - The name of an encoding set to invoke during\n   *   propagation. This value is added to generated Pulse instances;\n   *   operators can then respond to (or ignore) this setting as appropriate.\n   *   This parameter can be used in conjunction with the Encode transform in\n   *   the vega-encode package.\n   * @param {function} [prerun] - An optional callback function to invoke\n   *   immediately before dataflow evaluation commences.\n   * @param {function} [postrun] - An optional callback function to invoke\n   *   after dataflow evaluation completes. The callback will be invoked\n   *   after those registered via {@link runAfter}.\n   * @return {Promise} - A promise that resolves to this dataflow after\n   *   evaluation completes.\n   */\n\n  async function runAsync(encode, prerun, postrun) {\n    // await previously queued functions\n    while (this._running) await this._running; // run dataflow, manage running promise\n\n\n    const clear = () => this._running = null;\n\n    (this._running = this.evaluate(encode, prerun, postrun)).then(clear, clear);\n    return this._running;\n  }\n  /**\n   * Requests dataflow evaluation and the immediately returns this dataflow\n   * instance. If there are pending data loading or other asynchronous\n   * operations, the dataflow will evaluate asynchronously after this method\n   * has been invoked. To track when dataflow evaluation completes, use the\n   * {@link runAsync} method instead. This method will raise an error if\n   * invoked while the dataflow is already in the midst of evaluation.\n   * @param {string} [encode] - The name of an encoding set to invoke during\n   *   propagation. This value is added to generated Pulse instances;\n   *   operators can then respond to (or ignore) this setting as appropriate.\n   *   This parameter can be used in conjunction with the Encode transform in\n   *   the vega-encode module.\n   * @param {function} [prerun] - An optional callback function to invoke\n   *   immediately before dataflow evaluation commences.\n   * @param {function} [postrun] - An optional callback function to invoke\n   *   after dataflow evaluation completes. The callback will be invoked\n   *   after those registered via {@link runAfter}.\n   * @return {Dataflow} - This dataflow instance.\n   */\n\n  function run(encode, prerun, postrun) {\n    return this._pulse ? reentrant(this) : (this.evaluate(encode, prerun, postrun), this);\n  }\n  /**\n   * Schedules a callback function to be invoked after the current pulse\n   * propagation completes. If no propagation is currently occurring,\n   * the function is invoked immediately. Callbacks scheduled via runAfter\n   * are invoked immediately upon completion of the current cycle, before\n   * any request queued via runAsync. This method is primarily intended for\n   * internal use. Third-party callers using runAfter to schedule a callback\n   * that invokes {@link run} or {@link runAsync} should not use this method,\n   * but instead use {@link runAsync} with prerun or postrun arguments.\n   * @param {function(Dataflow)} callback - The callback function to run.\n   *   The callback will be invoked with this Dataflow instance as its\n   *   sole argument.\n   * @param {boolean} enqueue - A boolean flag indicating that the\n   *   callback should be queued up to run after the next propagation\n   *   cycle, suppressing immediate invocation when propagation is not\n   *   currently occurring.\n   * @param {number} [priority] - A priority value used to sort registered\n   *   callbacks to determine execution order. This argument is intended\n   *   for internal Vega use only.\n   */\n\n  function runAfter(callback, enqueue, priority) {\n    if (this._pulse || enqueue) {\n      // pulse propagation is currently running, queue to run after\n      this._postrun.push({\n        priority: priority || 0,\n        callback: callback\n      });\n    } else {\n      // pulse propagation already complete, invoke immediately\n      try {\n        callback(this);\n      } catch (err) {\n        this.error(err);\n      }\n    }\n  }\n  /**\n   * Raise an error for re-entrant dataflow evaluation.\n   */\n\n  function reentrant(df) {\n    df.error('Dataflow already running. Use runAsync() to chain invocations.');\n    return df;\n  }\n  /**\n   * Enqueue an operator into the priority queue for evaluation. The operator\n   * will be enqueued if it has no registered pulse for the current cycle, or if\n   * the force argument is true. Upon enqueue, this method also sets the\n   * operator's qrank to the current rank value.\n   * @param {Operator} op - The operator to enqueue.\n   * @param {boolean} [force] - A flag indicating if the operator should be\n   *   forceably added to the queue, even if it has already been previously\n   *   enqueued during the current pulse propagation. This is useful when the\n   *   dataflow graph is dynamically modified and the operator rank changes.\n   */\n\n\n  function enqueue(op, force) {\n    const q = op.stamp < this._clock;\n    if (q) op.stamp = this._clock;\n\n    if (q || force) {\n      op.qrank = op.rank;\n\n      this._heap.push(op);\n    }\n  }\n  /**\n   * Provide a correct pulse for evaluating an operator. If the operator has an\n   * explicit source operator, we will try to pull the pulse(s) from it.\n   * If there is an array of source operators, we build a multi-pulse.\n   * Otherwise, we return a current pulse with correct source data.\n   * If the pulse is the pulse map has an explicit target set, we use that.\n   * Else if the pulse on the upstream source operator is current, we use that.\n   * Else we use the pulse from the pulse map, but copy the source tuple array.\n   * @param {Operator} op - The operator for which to get an input pulse.\n   * @param {string} [encode] - An (optional) encoding set name with which to\n   *   annotate the returned pulse. See {@link run} for more information.\n   */\n\n  function getPulse(op, encode) {\n    const s = op.source,\n          stamp = this._clock;\n    return s && vegaUtil.isArray(s) ? new MultiPulse(this, stamp, s.map(_ => _.pulse), encode) : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);\n  }\n\n  function singlePulse(p, s) {\n    if (s && s.stamp === p.stamp) {\n      return s;\n    }\n\n    p = p.fork();\n\n    if (s && s !== StopPropagation) {\n      p.source = s.source;\n    }\n\n    return p;\n  }\n\n  const NO_OPT = {\n    skip: false,\n    force: false\n  };\n  /**\n   * Touches an operator, scheduling it to be evaluated. If invoked outside of\n   * a pulse propagation, the operator will be evaluated the next time this\n   * dataflow is run. If invoked in the midst of pulse propagation, the operator\n   * will be queued for evaluation if and only if the operator has not yet been\n   * evaluated on the current propagation timestamp.\n   * @param {Operator} op - The operator to touch.\n   * @param {object} [options] - Additional options hash.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *   be skipped: it will not be evaluated, but its dependents will be.\n   * @return {Dataflow}\n   */\n\n  function touch(op, options) {\n    const opt = options || NO_OPT;\n\n    if (this._pulse) {\n      // if in midst of propagation, add to priority queue\n      this._enqueue(op);\n    } else {\n      // otherwise, queue for next propagation\n      this._touched.add(op);\n    }\n\n    if (opt.skip) op.skip(true);\n    return this;\n  }\n  /**\n   * Updates the value of the given operator.\n   * @param {Operator} op - The operator to update.\n   * @param {*} value - The value to set.\n   * @param {object} [options] - Additional options hash.\n   * @param {boolean} [options.force] - If true, the operator will\n   *   be re-evaluated even if its value has not changed.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *   be skipped: it will not be evaluated, but its dependents will be.\n   * @return {Dataflow}\n   */\n\n  function update(op, value, options) {\n    const opt = options || NO_OPT;\n\n    if (op.set(value) || opt.force) {\n      this.touch(op, opt);\n    }\n\n    return this;\n  }\n  /**\n   * Pulses an operator with a changeset of tuples. If invoked outside of\n   * a pulse propagation, the pulse will be applied the next time this\n   * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n   * will be added to the set of active pulses and will be applied if and\n   * only if the target operator has not yet been evaluated on the current\n   * propagation timestamp.\n   * @param {Operator} op - The operator to pulse.\n   * @param {ChangeSet} value - The tuple changeset to apply.\n   * @param {object} [options] - Additional options hash.\n   * @param {boolean} [options.skip] - If true, the operator will\n   *   be skipped: it will not be evaluated, but its dependents will be.\n   * @return {Dataflow}\n   */\n\n  function pulse(op, changeset, options) {\n    this.touch(op, options || NO_OPT);\n    const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n          t = op.pulse && op.pulse.source || [];\n    p.target = op;\n    this._input[op.id] = changeset.pulse(p, t);\n    return this;\n  }\n\n  function Heap(cmp) {\n    let nodes = [];\n    return {\n      clear: () => nodes = [],\n      size: () => nodes.length,\n      peek: () => nodes[0],\n      push: x => {\n        nodes.push(x);\n        return siftdown(nodes, 0, nodes.length - 1, cmp);\n      },\n      pop: () => {\n        const last = nodes.pop();\n        let item;\n\n        if (nodes.length) {\n          item = nodes[0];\n          nodes[0] = last;\n          siftup(nodes, 0, cmp);\n        } else {\n          item = last;\n        }\n\n        return item;\n      }\n    };\n  }\n\n  function siftdown(array, start, idx, cmp) {\n    let parent, pidx;\n    const item = array[idx];\n\n    while (idx > start) {\n      pidx = idx - 1 >> 1;\n      parent = array[pidx];\n\n      if (cmp(item, parent) < 0) {\n        array[idx] = parent;\n        idx = pidx;\n        continue;\n      }\n\n      break;\n    }\n\n    return array[idx] = item;\n  }\n\n  function siftup(array, idx, cmp) {\n    const start = idx,\n          end = array.length,\n          item = array[idx];\n    let cidx = (idx << 1) + 1,\n        ridx;\n\n    while (cidx < end) {\n      ridx = cidx + 1;\n\n      if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n        cidx = ridx;\n      }\n\n      array[idx] = array[cidx];\n      idx = cidx;\n      cidx = (idx << 1) + 1;\n    }\n\n    array[idx] = item;\n    return siftdown(array, start, idx, cmp);\n  }\n\n  /**\n   * A dataflow graph for reactive processing of data streams.\n   * @constructor\n   */\n\n  function Dataflow() {\n    this.logger(vegaUtil.logger());\n    this.logLevel(vegaUtil.Error);\n    this._clock = 0;\n    this._rank = 0;\n    this._locale = vegaFormat.defaultLocale();\n\n    try {\n      this._loader = vegaLoader.loader();\n    } catch (e) {// do nothing if loader module is unavailable\n    }\n\n    this._touched = UniqueList(vegaUtil.id);\n    this._input = {};\n    this._pulse = null;\n    this._heap = Heap((a, b) => a.qrank - b.qrank);\n    this._postrun = [];\n  }\n\n  function logMethod(method) {\n    return function () {\n      return this._log[method].apply(this, arguments);\n    };\n  }\n\n  Dataflow.prototype = {\n    /**\n     * The current timestamp of this dataflow. This value reflects the\n     * timestamp of the previous dataflow run. The dataflow is initialized\n     * with a stamp value of 0. The initial run of the dataflow will have\n     * a timestap of 1, and so on. This value will match the\n     * {@link Pulse.stamp} property.\n     * @return {number} - The current timestamp value.\n     */\n    stamp() {\n      return this._clock;\n    },\n\n    /**\n     * Gets or sets the loader instance to use for data file loading. A\n     * loader object must provide a \"load\" method for loading files and a\n     * \"sanitize\" method for checking URL/filename validity. Both methods\n     * should accept a URI and options hash as arguments, and return a Promise\n     * that resolves to the loaded file contents (load) or a hash containing\n     * sanitized URI data with the sanitized url assigned to the \"href\" property\n     * (sanitize).\n     * @param {object} _ - The loader instance to use.\n     * @return {object|Dataflow} - If no arguments are provided, returns\n     *   the current loader instance. Otherwise returns this Dataflow instance.\n     */\n    loader(_) {\n      if (arguments.length) {\n        this._loader = _;\n        return this;\n      } else {\n        return this._loader;\n      }\n    },\n\n    /**\n     * Gets or sets the locale instance to use for formatting and parsing\n     * string values. The locale object should be provided by the\n     * vega-format library, and include methods such as format, timeFormat,\n     * utcFormat, timeParse, and utcParse.\n     * @param {object} _ - The locale instance to use.\n     * @return {object|Dataflow} - If no arguments are provided, returns\n     *   the current locale instance. Otherwise returns this Dataflow instance.\n     */\n    locale(_) {\n      if (arguments.length) {\n        this._locale = _;\n        return this;\n      } else {\n        return this._locale;\n      }\n    },\n\n    /**\n     * Get or set the logger instance used to log messages. If no arguments are\n     * provided, returns the current logger instance. Otherwise, sets the logger\n     * and return this Dataflow instance. Provided loggers must support the full\n     * API of logger objects generated by the vega-util logger method. Note that\n     * by default the log level of the new logger will be used; use the logLevel\n     * method to adjust the log level as needed.\n     */\n    logger(logger) {\n      if (arguments.length) {\n        this._log = logger;\n        return this;\n      } else {\n        return this._log;\n      }\n    },\n\n    /**\n     * Logs an error message. By default, logged messages are written to console\n     * output. The message will only be logged if the current log level is high\n     * enough to permit error messages.\n     */\n    error: logMethod('error'),\n\n    /**\n     * Logs a warning message. By default, logged messages are written to console\n     * output. The message will only be logged if the current log level is high\n     * enough to permit warning messages.\n     */\n    warn: logMethod('warn'),\n\n    /**\n     * Logs a information message. By default, logged messages are written to\n     * console output. The message will only be logged if the current log level is\n     * high enough to permit information messages.\n     */\n    info: logMethod('info'),\n\n    /**\n     * Logs a debug message. By default, logged messages are written to console\n     * output. The message will only be logged if the current log level is high\n     * enough to permit debug messages.\n     */\n    debug: logMethod('debug'),\n\n    /**\n     * Get or set the current log level. If an argument is provided, it\n     * will be used as the new log level.\n     * @param {number} [level] - Should be one of None, Warn, Info\n     * @return {number} - The current log level.\n     */\n    logLevel: logMethod('level'),\n\n    /**\n     * Empty entry threshold for garbage cleaning. Map data structures will\n     * perform cleaning once the number of empty entries exceeds this value.\n     */\n    cleanThreshold: 1e4,\n    // OPERATOR REGISTRATION\n    add,\n    connect,\n    rank,\n    rerank,\n    // OPERATOR UPDATES\n    pulse,\n    touch,\n    update,\n    changeset,\n    // DATA LOADING\n    ingest,\n    parse,\n    preload,\n    request,\n    // EVENT HANDLING\n    events,\n    on,\n    // PULSE PROPAGATION\n    evaluate,\n    run,\n    runAsync,\n    runAfter,\n    _enqueue: enqueue,\n    _getPulse: getPulse\n  };\n\n  /**\n   * Abstract class for operators that process data tuples.\n   * Subclasses must provide a {@link transform} method for operator processing.\n   * @constructor\n   * @param {*} [init] - The initial value for this operator.\n   * @param {object} [params] - The parameters for this operator.\n   * @param {Operator} [source] - The operator from which to receive pulses.\n   */\n\n  function Transform(init, params) {\n    Operator.call(this, init, null, params);\n  }\n  vegaUtil.inherits(Transform, Operator, {\n    /**\n     * Overrides {@link Operator.evaluate} for transform operators.\n     * Internally, this method calls {@link evaluate} to perform processing.\n     * If {@link evaluate} returns a falsy value, the input pulse is returned.\n     * This method should NOT be overridden, instead overrride {@link evaluate}.\n     * @param {Pulse} pulse - the current dataflow pulse.\n     * @return the output pulse for this operator (or StopPropagation)\n     */\n    run(pulse) {\n      if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n      let rv;\n\n      if (this.skip()) {\n        this.skip(false);\n      } else {\n        rv = this.evaluate(pulse);\n      }\n\n      rv = rv || pulse;\n\n      if (rv.then) {\n        rv = rv.then(_ => this.pulse = _);\n      } else if (rv !== pulse.StopPropagation) {\n        this.pulse = rv;\n      }\n\n      return rv;\n    },\n\n    /**\n     * Overrides {@link Operator.evaluate} for transform operators.\n     * Marshalls parameter values and then invokes {@link transform}.\n     * @param {Pulse} pulse - the current dataflow pulse.\n     * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n         value (including undefined) will let the input pulse pass through.\n    */\n    evaluate(pulse) {\n      const params = this.marshall(pulse.stamp),\n            out = this.transform(params, pulse);\n      params.clear();\n      return out;\n    },\n\n    /**\n     * Process incoming pulses.\n     * Subclasses should override this method to implement transforms.\n     * @param {Parameters} _ - The operator parameter values.\n     * @param {Pulse} pulse - The current dataflow pulse.\n     * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n     *   value (including undefined) will let the input pulse pass through.\n     */\n    transform() {}\n\n  });\n\n  const transforms = {};\n  function definition(type) {\n    const t = transform(type);\n    return t && t.Definition || null;\n  }\n  function transform(type) {\n    type = type && type.toLowerCase();\n    return vegaUtil.hasOwnProperty(transforms, type) ? transforms[type] : null;\n  }\n\n  exports.Dataflow = Dataflow;\n  exports.EventStream = EventStream;\n  exports.MultiPulse = MultiPulse;\n  exports.Operator = Operator;\n  exports.Parameters = Parameters;\n  exports.Pulse = Pulse;\n  exports.Transform = Transform;\n  exports.UniqueList = UniqueList;\n  exports.asyncCallback = asyncCallback;\n  exports.changeset = changeset;\n  exports.definition = definition;\n  exports.derive = derive;\n  exports.ingest = ingest$1;\n  exports.isChangeSet = isChangeSet;\n  exports.isTuple = isTuple;\n  exports.rederive = rederive;\n  exports.replace = replace;\n  exports.stableCompare = stableCompare;\n  exports.transform = transform;\n  exports.transforms = transforms;\n  exports.tupleid = tupleid;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","vegaUtil","vegaLoader","vegaFormat","UniqueList","idFunc","$","identity","list","ids","add","list.add","_","id","push","remove","list.remove","idx","indexOf","splice","asyncCallback","df","callback","err","error","ingest$1","datum","t","Object","data","TUPLE_ID_KEY","rederive","d","k","isChangeSet","v","constructor","changeset","rem","mod","remp","modp","clean","reflow","insert","array","n","length","i","a","isFunction","modify","field","value","m","constant","filter","tuple","encode","set","pulse","tuples","f","out","cur","forEach","modifies","slice","Parameters","defineProperty","CACHE","writable","Operator","init","update","params","react","OP_ID","qrank","rank","stamp","flags","_update","parameters","flag","bit","state","arguments","EventStream","apply","receive","STREAM_ID","_filter","_apply","stream","loadPending","accept","pending","Promise","requests","done","pending.done","_pending","onStream","target","options","opt","extend","SKIP","undefined","func","e","touch","op","evaluate","onOperator","source","targets","updater","modified","force","skip","connect","Pulse","dataflow","fields","materialize","visitArray","map","visit","addFilter","b","MultiPulse","pulses","c","hash","p","changed","ADD","REM","MOD","changes","reentrant","singlePulse","s","fork","StopPropagation","Heap","cmp","nodes","clear","size","peek","x","siftdown","pop","last","item","start","end","cidx","ridx","parent","pidx","Dataflow","logger","logLevel","Error","_rank","_clock","_locale","defaultLocale","_loader","loader","_touched","_input","_pulse","_heap","_postrun","logMethod","method","_log","Transform","call","transform","type","toLowerCase","hasOwnProperty","transforms","Symbol","TUPLE_ID","prototype","name","index","o","isArray","NO_PARAMS","_targets","SKIP$1","MODIFIED","initonly","argval","_argval","argops","_argops","deps","PULSE","Array","marshall","detach","run","rv","truthy","consume","_consume","evt","val","trg","preventDefault","stopPropagation","merge","throttle","pause","now","Date","debounce","delay","between","active","ADD_REM","ADD_MOD","ALL","REFLOW","SOURCE","NO_SOURCE","NO_FIELDS","clone","addAll","src","addF","remF","modF","srcF","cleans","runAfter","len","nomod","some","visitor","sum","inherits","NO_OPT","locale","warn","info","debug","cleanThreshold","shift","sources","targetRank","rerank","queue","_enqueue","ingest","format","parse","read","timeParse","utcParse","preload","url","res","request","status","load","context","response","responseType","events","send","document","querySelectorAll","addEventListener","on","fn","prerun","postrun","async","count","next","pr","_getPulse","then","sort","priority","all","cb","runAsync","_running","enqueue","q","getPulse","definition","Definition","derive","isTuple","replace","stableCompare","tupleid"]
}
