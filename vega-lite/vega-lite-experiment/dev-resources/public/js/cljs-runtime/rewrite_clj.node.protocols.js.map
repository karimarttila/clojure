{"version":3,"sources":["rewrite_clj/node/protocols.cljs"],"mappings":"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","names":["rewrite-clj$node$protocols$Node$tag$dyn","x__4428__auto__","m__4429__auto__","rewrite-clj.node.protocols/tag","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","rewrite-clj$node$protocols$Node$printable_only_QMARK_$dyn","rewrite-clj.node.protocols/printable-only?","rewrite-clj$node$protocols$Node$sexpr$dyn","rewrite-clj.node.protocols/sexpr","rewrite-clj$node$protocols$Node$length$dyn","rewrite-clj.node.protocols/length","rewrite-clj$node$protocols$Node$string$dyn","rewrite-clj.node.protocols/string","rewrite-clj.node.protocols/Node","_","goog.object/set","this","cljs.core/count","cljs.core.pr_str","rewrite-clj.node.protocols/sexprs","nodes","cljs.core.remove","cljs.core.map","rewrite-clj.node.protocols/sum-lengths","cljs.core.reduce","cljs.core/+","rewrite-clj.node.protocols/concat-strings","cljs.core/str","rewrite-clj$node$protocols$InnerNode$inner_QMARK_$dyn","rewrite-clj.node.protocols/inner?","rewrite-clj$node$protocols$InnerNode$children$dyn","rewrite-clj.node.protocols/children","rewrite-clj$node$protocols$InnerNode$replace_children$dyn","rewrite-clj.node.protocols/replace-children","rewrite-clj.node.protocols/InnerNode","children","js/Error","rewrite-clj.node.protocols/child-sexprs","node","rewrite-clj$node$protocols$NodeCoerceable$coerce$dyn","rewrite-clj.node.protocols/coerce","rewrite-clj.node.protocols/NodeCoerceable","rewrite-clj.node.protocols/assert-sexpr-count","c","cljs.core._EQ_","rewrite-clj.node.protocols/assert-single-sexpr"],"sourcesContent":["(ns rewrite-clj.node.protocols\n  (:require [clojure.string :as s]))\n\n\n\n(defprotocol Node\n  \"Protocol for EDN/Clojure nodes.\"\n  (tag [_]\n    \"Keyword representing the type of the node.\")\n  (printable-only? [_]\n    \"Return true if the node cannot be converted to an s-expression\n     element.\")\n  (sexpr [_]\n    \"Convert node to s-expression.\")\n  (length [_]\n    \"Get number of characters for the string version of this node.\")\n  (string [_]\n    \"Convert node to printable string.\"))\n\n\n(extend-protocol Node\n  object\n  (tag [_] :unknown)\n  (printable-only? [_] false)\n  (sexpr [this] this)\n  (length [this] (count (string this)))\n  (string [this] (pr-str this)))\n\n(defn sexprs\n  \"Given a seq of nodes, convert those that represent s-expressions\n   to the respective forms.\"\n  [nodes]\n  (->> nodes\n       (remove printable-only?)\n       (map sexpr)))\n\n(defn sum-lengths\n  \"Sum up lengths of the given nodes.\"\n  [nodes]\n  (reduce + (map length nodes)))\n\n(defn concat-strings\n  \"Convert nodes to strings and concatenate them.\"\n  [nodes]\n  (reduce str (map string nodes)))\n\n\n(defprotocol InnerNode\n  \"Protocol for non-leaf EDN/Clojure nodes.\"\n  (inner? [_]\n    \"Check whether the node can contain children.\")\n  (children [_]\n    \"Get child nodes.\")\n  (replace-children [_ children]\n    \"Replace the node's children.\"))\n\n(extend-protocol InnerNode\n  object\n  (inner? [_] false)\n  (children [_]\n    (throw (js/Error. \"UnsupportedOperationException\")))\n  (replace-children [_ _]\n    (throw (js/Error. \"UnsupportedOperationException\"))))\n\n(defn child-sexprs\n  \"Get all child s-expressions for the given node.\"\n  [node]\n  (if (inner? node)\n    (sexprs (children node))))\n\n\n(defprotocol NodeCoerceable\n  \"Protocol for values that can be coerced to nodes.\"\n  (coerce [_]))\n\n\n;; TODO: Need to handle format !!!!\n;; (defn- node->string\n;;   [node]\n;;   (let [n (str (if (printable-only? node)\n;;                  (pr-str (string node))\n;;                  (string node)))\n;;         n' (if (re-find #\"\\n\" n)\n;;              (->> (s/replace n #\"\\r?\\n\" \"\\n  \")\n;;                   (format \"%n  %s%n\"))\n;;              (str \" \" n))]\n;;     (format \"<%s:%s>\" (name (tag node)) n')))\n\n\n;; (defn write-node\n;;   [writer node]\n;;   (str writer (node->string node)))\n\n\n;; ## Helpers\n\n(defn assert-sexpr-count\n  [nodes c]\n  (assert\n    (= (count (remove printable-only? nodes)) c)\n   (str \"can only contain\" c \" non-whitespace form(s).\")))\n\n(defn assert-single-sexpr\n  [nodes]\n  (assert-sexpr-count nodes 1))\n"]}