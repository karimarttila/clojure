shadow$provide.module$node_modules$vega_geo$build$vega_geo=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){"object"===typeof exports$jscomp$0&&"undefined"!==typeof module?factory(exports$jscomp$0,require("module$node_modules$vega_dataflow$build$vega_dataflow"),require("module$node_modules$vega_util$build$vega_util"),require("module$node_modules$d3_array$dist$d3_array"),require("module$node_modules$vega_statistics$build$vega_statistics"),require("module$node_modules$vega_projection$build$vega_projection"),
require("module$node_modules$d3_geo$dist$d3_geo"),require("module$node_modules$d3_color$dist$d3_color"),require("module$node_modules$vega_canvas$build$vega_canvas_min")):"function"===typeof define&&define.amd?define("exports vega-dataflow vega-util d3-array vega-statistics vega-projection d3-geo d3-color vega-canvas".split(" "),factory):(global="undefined"!==typeof globalThis?globalThis:global||self,factory((global.vega=global.vega||{},global.vega.transforms={}),global.vega,global.vega,global.d3,
global.vega,global.vega,global.d3,global.d3,global.vega))})(this,function(exports,vegaDataflow,vegaUtil,d3Array,vegaStatistics,vegaProjection,d3Geo,d3Color,vegaCanvas){function noop(){}function contours(){function contours(values,tz){return tz.map(function(value){return contour(values,value)})}function contour(values,value){var polygons=[],holes=[];isorings(values,value,function(ring){smooth(ring,values,value);for(var i=0,n=ring.length,area=ring[n-1][1]*ring[0][0]-ring[n-1][0]*ring[0][1];++i<n;)area+=
ring[i-1][1]*ring[i][0]-ring[i-1][0]*ring[i][1];0<area?polygons.push([ring]):holes.push(ring)});holes.forEach(function(hole$jscomp$0){for(var i=0,n=polygons.length,polygon;i<n;++i){a:{var JSCompiler_inline_result=(polygon=polygons[i])[0];for(var hole=hole$jscomp$0,i$jscomp$0=-1,n$jscomp$0=hole.length;++i$jscomp$0<n$jscomp$0;){b:{var c=JSCompiler_inline_result;for(var point=hole[i$jscomp$0],x=point[0],y=point[1],contains=-1,i$jscomp$1=0,n$jscomp$1=c.length,j=n$jscomp$1-1;i$jscomp$1<n$jscomp$1;j=i$jscomp$1++){var pi=
c[i$jscomp$1],xi=pi[0],yi=pi[1],pj=c[j];j=pj[0];var yj=pj[1],i$jscomp$2,a=pi;pi=pj;pj=point;if(i$jscomp$2=(pi[0]-a[0])*(pj[1]-a[1])===(pj[0]-a[0])*(pi[1]-a[1]))a=a[i$jscomp$2=+(a[0]===pi[0])],pj=pj[i$jscomp$2],pi=pi[i$jscomp$2],i$jscomp$2=a<=pj&&pj<=pi||pi<=pj&&pj<=a;if(i$jscomp$2){c=0;break b}yi>y!==yj>y&&x<(j-xi)*(y-yi)/(yj-yi)+xi&&(contains=-contains)}c=contains}if(c){JSCompiler_inline_result=c;break a}}JSCompiler_inline_result=0}if(-1!==JSCompiler_inline_result){polygon.push(hole$jscomp$0);break}}});
return{type:"MultiPolygon",value:value,coordinates:polygons}}function isorings(values,value,callback){function stitch(line){var start=[line[0][0]+x,line[0][1]+y];line=[line[1][0]+x,line[1][1]+y];var startIndex=2*start[0]+start[1]*(dx+1)*4,endIndex=2*line[0]+line[1]*(dx+1)*4,f,g;(f=fragmentByEnd[startIndex])?(g=fragmentByStart[endIndex])?(delete fragmentByEnd[f.end],delete fragmentByStart[g.start],f===g?(f.ring.push(line),callback(f.ring)):fragmentByStart[f.start]=fragmentByEnd[g.end]={start:f.start,
end:g.end,ring:f.ring.concat(g.ring)}):(delete fragmentByEnd[f.end],f.ring.push(line),fragmentByEnd[f.end=endIndex]=f):(f=fragmentByStart[endIndex])?(g=fragmentByEnd[startIndex])?(delete fragmentByStart[f.start],delete fragmentByEnd[g.end],f===g?(f.ring.push(line),callback(f.ring)):fragmentByStart[g.start]=fragmentByEnd[f.end]={start:g.start,end:f.end,ring:g.ring.concat(f.ring)}):(delete fragmentByStart[f.start],f.ring.unshift(start),fragmentByStart[f.start=startIndex]=f):fragmentByStart[startIndex]=
fragmentByEnd[endIndex]={start:startIndex,end:endIndex,ring:[start,line]}}var fragmentByStart=[],fragmentByEnd=[],y;var x=y=-1;var t1=values[0]>=value;for(cases[t1<<1].forEach(stitch);++x<dx-1;){var t0=t1;t1=values[x+1]>=value;cases[t0|t1<<1].forEach(stitch)}for(cases[t1<<0].forEach(stitch);++y<dy-1;){x=-1;t1=values[y*dx+dx]>=value;var t2=values[y*dx]>=value;for(cases[t1<<1|t2<<2].forEach(stitch);++x<dx-1;){t0=t1;t1=values[y*dx+dx+x+1]>=value;var t3=t2;t2=values[y*dx+x+1]>=value;cases[t0|t1<<1|t2<<
2|t3<<3].forEach(stitch)}cases[t1|t2<<3].forEach(stitch)}x=-1;t2=values[y*dx]>=value;for(cases[t2<<2].forEach(stitch);++x<dx-1;)t3=t2,t2=values[y*dx+x+1]>=value,cases[t2<<2|t3<<3].forEach(stitch);cases[t2<<3].forEach(stitch)}function smoothLinear(ring,values,value){ring.forEach(function(point){var x=point[0],y=point[1],xt=x|0,yt=y|0,v1=values[yt*dx+xt];if(0<x&&x<dx&&xt===x){var v0=values[yt*dx+xt-1];point[0]=x+(value-v0)/(v1-v0)-.5}0<y&&y<dy&&yt===y&&(v0=values[(yt-1)*dx+xt],point[1]=y+(value-v0)/
(v1-v0)-.5)})}var dx=1,dy=1,smooth=smoothLinear;contours.contour=contour;contours.size=function(_){if(!arguments.length)return[dx,dy];var _0=Math.floor(_[0]),_1=Math.floor(_[1]);0<=_0&&0<=_1||vegaUtil.error("invalid size");return dx=_0,dy=_1,contours};contours.smooth=function(_){return arguments.length?(smooth=_?smoothLinear:noop,contours):smooth===smoothLinear};return contours}function quantize(k,nice,zero){return function(values){var ex=vegaUtil.extent(values);values=zero?Math.min(ex[0],0):ex[0];
ex=ex[1];var span=ex-values;span=nice?d3Array.tickStep(values,ex,k):span/(k+1);return d3Array.range(values+span,ex,span)}}function Isocontour(params){vegaDataflow.Transform.call(this,null,params)}function levels(values,f,_){var q=quantize(_.levels||10,_.nice,!1!==_.zero);return"shared"!==_.resolve?q:q(values.map(function(t){return d3Array.max(f(t).values)}))}function transformPaths(paths,grid,datum,_){var s=_.scale||grid.scale,t=_.translate||grid.translate;vegaUtil.isFunction(s)&&(s=s(datum,_));vegaUtil.isFunction(t)&&
(t=t(datum,_));if(1!==s&&null!=s||t)datum=(vegaUtil.isNumber(s)?s:s[0])||1,s=(vegaUtil.isNumber(s)?s:s[1])||1,paths.forEach(transform(grid,datum,s,t&&t[0]||0,t&&t[1]||0))}function transform(grid,sx,sy,tx,ty){function transformPolygon(coordinates){coordinates.forEach(transformRing)}function transformRing(coordinates){flip&&coordinates.reverse();coordinates.forEach(transformPoint)}function transformPoint(coordinates){coordinates[0]=(coordinates[0]-x1)*sx+tx;coordinates[1]=(coordinates[1]-y1)*sy+ty}
var x1=grid.x1||0,y1=grid.y1||0,flip=0>sx*sy;return function(geometry){geometry.coordinates.forEach(transformPolygon);return geometry}}function radius(bw,data,f){bw=0<=bw?bw:vegaStatistics.bandwidthNRD(data,f);return Math.round((Math.sqrt(4*bw*bw+1)-1)/2)}function number(_){return vegaUtil.isFunction(_)?_:vegaUtil.constant(+_)}function density2D(){function density(data,counts){var rx=radius(bandwidth[0],data,x)>>k,ry=radius(bandwidth[1],data,y)>>k,ox=rx?rx+2:0,oy=ry?ry+2:0,n=2*ox+(dx>>k),m=2*oy+(dy>>
k),values0=new Float32Array(n*m),values1=new Float32Array(n*m),values=values0;data.forEach(function(d){var xi=ox+(+x(d)>>k),yi=oy+(+y(d)>>k);0<=xi&&xi<n&&0<=yi&&yi<m&&(values0[xi+yi*n]+=+weight(d))});0<rx&&0<ry?(blurX(n,m,values0,values1,rx),blurY(n,m,values1,values0,ry),blurX(n,m,values0,values1,rx),blurY(n,m,values1,values0,ry),blurX(n,m,values0,values1,rx),blurY(n,m,values1,values0,ry)):0<rx?(blurX(n,m,values0,values1,rx),blurX(n,m,values1,values0,rx),blurX(n,m,values0,values1,rx),values=values1):
0<ry&&(blurY(n,m,values0,values1,ry),blurY(n,m,values1,values0,ry),blurY(n,m,values0,values1,ry),values=values1);data=counts?Math.pow(2,-2*k):1/d3Array.sum(values);counts=0;for(rx=n*m;counts<rx;++counts)values[counts]*=data;return{values:values,scale:1<<k,width:n,height:m,x1:ox,y1:oy,x2:ox+(dx>>k),y2:oy+(dy>>k)}}var x=function(d){return d[0]},y=function(d){return d[1]},weight=vegaUtil.one,bandwidth=[-1,-1],dx=960,dy=500,k=2;density.x=function(_){return arguments.length?(x=number(_),density):x};density.y=
function(_){return arguments.length?(y=number(_),density):y};density.weight=function(_){return arguments.length?(weight=number(_),density):weight};density.size=function(_){if(!arguments.length)return[dx,dy];var _0=+_[0],_1=+_[1];0<=_0&&0<=_1||vegaUtil.error("invalid size");return dx=_0,dy=_1,density};density.cellSize=function(_){if(!arguments.length)return 1<<k;1<=(_=+_)||vegaUtil.error("invalid cell size");k=Math.floor(Math.log(_)/Math.LN2);return density};density.bandwidth=function(_){if(!arguments.length)return bandwidth;
_=vegaUtil.array(_);1===_.length&&(_=[+_[0],+_[0]]);2!==_.length&&vegaUtil.error("invalid bandwidth");return bandwidth=_,density};return density}function blurX(n,m,source,target,r){for(var w=(r<<1)+1,j=0;j<m;++j)for(var i=0,sr=0;i<n+r;++i)i<n&&(sr+=source[i+j*n]),i>=r&&(i>=w&&(sr-=source[i-w+j*n]),target[i-r+j*n]=sr/Math.min(i+1,n-1+w-i,w))}function blurY(n,m,source,target,r){for(var w=(r<<1)+1,i=0;i<n;++i)for(var j=0,sr=0;j<m+r;++j)j<m&&(sr+=source[i+j*n]),j>=r&&(j>=w&&(sr-=source[i+(j-w)*n]),target[i+
(j-r)*n]=sr/Math.min(j+1,m-1+w-j,w))}function KDE2D(params){vegaDataflow.Transform.call(this,null,params)}function params$jscomp$0(obj,_){PARAMS.forEach(function(param){return null!=_[param]?obj[param](_[param]):0});return obj}function partition(data,groupby){var groups=[],get=function(f){return f(t)},n;if(null==groupby)groups.push(data);else{var map={};var i=0;for(n=data.length;i<n;++i){var t=data[i];var k=groupby.map(get);var g=map[k];g||(map[k]=g=[],g.dims=k,groups.push(g));g.push(t)}}return groups}
function Contour(params){vegaDataflow.Transform.call(this,null,params)}function GeoJSON(params){vegaDataflow.Transform.call(this,null,params)}function GeoPath(params){vegaDataflow.Transform.call(this,null,params)}function initPath(path,pointRadius){var prev=path.pointRadius();path.context(null);null!=pointRadius&&path.pointRadius(pointRadius);return prev}function GeoPoint(params){vegaDataflow.Transform.call(this,null,params)}function GeoShape(params){vegaDataflow.Transform.call(this,null,params)}
function shapeGenerator(path,field,pointRadius){var shape=null==pointRadius?function(_){return path(field(_))}:function(_){var prev=path.pointRadius();_=path.pointRadius(pointRadius)(field(_));path.pointRadius(prev);return _};shape.context=function(_){path.context(_);return shape};return shape}function Graticule(params){vegaDataflow.Transform.call(this,[],params);this.generator=d3Geo.geoGraticule()}function Heatmap(params){vegaDataflow.Transform.call(this,null,params)}function color_(color,_){if(vegaUtil.isFunction(color)){var f=
function(obj){return d3Color.rgb(color(obj,_))};f.dep=dependency(color)}else f=vegaUtil.constant(d3Color.rgb(color||"#888"));return f}function opacity_(opacity,_){if(vegaUtil.isFunction(opacity)){var f=function(obj){return opacity(obj,_)};f.dep=dependency(opacity)}else opacity?f=vegaUtil.constant(opacity):(f=function(obj){return obj.$value/obj.$max||0},f.dep=!0);return f}function dependency(f){if(!vegaUtil.isFunction(f))return!1;f=vegaUtil.toSet(vegaUtil.accessorFields(f));return f.$x||f.$y||f.$value||
f.$max}function toCanvas(grid,obj,color,opacity){var n=grid.width,m=grid.height,x1=grid.x1||0,y1=grid.y1||0,x2=grid.x2||n;m=grid.y2||m;var val=grid.values;grid=val?function(i){return val[i]}:vegaUtil.zero;for(var can=vegaCanvas.canvas(x2-x1,m-y1),ctx=can.getContext("2d"),img=ctx.getImageData(0,0,x2-x1,m-y1),pix=img.data,j=y1,k=0;j<m;++j){obj.$y=j-y1;for(var i$jscomp$0=x1,r=j*n;i$jscomp$0<x2;++i$jscomp$0,k+=4){obj.$x=i$jscomp$0-x1;obj.$value=grid(i$jscomp$0+r);var v=color(obj);pix[k+0]=v.r;pix[k+1]=
v.g;pix[k+2]=v.b;pix[k+3]=~~(255*opacity(obj))}}ctx.putImageData(img,0,0);return can}function Projection(params){vegaDataflow.Transform.call(this,null,params);this.modified(!0)}function fit(proj,_){var data=collectGeoJSON(_.fit);_.extent?proj.fitExtent(_.extent,data):_.size?proj.fitSize(_.size,data):0}function create(type){var constructor=vegaProjection.projection((type||"mercator").toLowerCase());constructor||vegaUtil.error("Unrecognized projection type: "+type);return constructor()}function collectGeoJSON(data){data=
vegaUtil.array(data);return 1===data.length?data[0]:{type:"FeatureCollection",features:data.reduce(function(a,f){return a.concat(featurize(f))},[])}}function featurize(f){return"FeatureCollection"===f.type?f.features:vegaUtil.array(f).filter(function(d){return null!=d}).map(function(d){return"Feature"===d.type?d:{type:"Feature",geometry:d}})}var cases=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,
1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];Isocontour.Definition={type:"Isocontour",metadata:{generates:!0},params:[{name:"field",type:"field"},{name:"thresholds",type:"number",array:!0},{name:"levels",type:"number"},{name:"nice",type:"boolean","default":!1},{name:"resolve",type:"enum",values:["shared","independent"],"default":"independent"},{name:"zero",type:"boolean","default":!0},
{name:"smooth",type:"boolean","default":!0},{name:"scale",type:"number",expr:!0},{name:"translate",type:"number",array:!0,expr:!0},{name:"as",type:"string","null":!0,"default":"contour"}]};vegaUtil.inherits(Isocontour,vegaDataflow.Transform,{transform:function(_,pulse){if(this.value&&!pulse.changed()&&!_.modified())return pulse.StopPropagation;var out=pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS);pulse=pulse.materialize(pulse.SOURCE).source;var field=_.field||vegaUtil.identity,contour=contours().smooth(!1!==
_.smooth),tz=_.thresholds||levels(pulse,field,_),as=null===_.as?null:_.as||"contour",values=[];pulse.forEach(function(t){var grid=field(t),paths=contour.size([grid.width,grid.height])(grid.values,vegaUtil.isArray(tz)?tz:tz(grid.values));transformPaths(paths,grid,t,_);paths.forEach(function(p){var $jscomp$compprop210={};values.push(vegaDataflow.rederive(t,vegaDataflow.ingest(null!=as?($jscomp$compprop210[as]=p,$jscomp$compprop210):p)))})});this.value&&(out.rem=this.value);this.value=out.source=out.add=
values;return out}});KDE2D.Definition={type:"KDE2D",metadata:{generates:!0},params:[{name:"size",type:"number",array:!0,length:2,required:!0},{name:"x",type:"field",required:!0},{name:"y",type:"field",required:!0},{name:"weight",type:"field"},{name:"groupby",type:"field",array:!0},{name:"cellSize",type:"number"},{name:"bandwidth",type:"number",array:!0,length:2},{name:"counts",type:"boolean","default":!1},{name:"as",type:"string","default":"grid"}]};var PARAMS="x y weight size cellSize bandwidth".split(" ");
vegaUtil.inherits(KDE2D,vegaDataflow.Transform,{transform:function(_,pulse){function set(t,vals){for(var i=0;i<names.length;++i)t[names[i]]=vals[i];return t}if(this.value&&!pulse.changed()&&!_.modified())return pulse.StopPropagation;var out=pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS);pulse=pulse.materialize(pulse.SOURCE).source;pulse=partition(pulse,_.groupby);var names=(_.groupby||[]).map(vegaUtil.accessorName),kde=params$jscomp$0(density2D(),_),as=_.as||"grid",values=[];values=pulse.map(function(g){var $jscomp$compprop211=
{};return vegaDataflow.ingest(set(($jscomp$compprop211[as]=kde(g,_.counts),$jscomp$compprop211),g.dims))});this.value&&(out.rem=this.value);this.value=out.source=out.add=values;return out}});Contour.Definition={type:"Contour",metadata:{generates:!0},params:[{name:"size",type:"number",array:!0,length:2,required:!0},{name:"values",type:"number",array:!0},{name:"x",type:"field"},{name:"y",type:"field"},{name:"weight",type:"field"},{name:"cellSize",type:"number"},{name:"bandwidth",type:"number"},{name:"count",
type:"number"},{name:"nice",type:"boolean","default":!1},{name:"thresholds",type:"number",array:!0},{name:"smooth",type:"boolean","default":!0}]};vegaUtil.inherits(Contour,vegaDataflow.Transform,{transform:function(_,pulse){if(this.value&&!pulse.changed()&&!_.modified())return pulse.StopPropagation;var out=pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS),contour=contours().smooth(!1!==_.smooth),values=_.values,thresh=_.thresholds||quantize(_.count||10,_.nice,!!values),size=_.size;if(!values){values=pulse.materialize(pulse.SOURCE).source;
_=params$jscomp$0(density2D(),_)(values,!0);var post=transform(_,_.scale||1,_.scale||1,0,0);size=[_.width,_.height];values=_.values}thresh=vegaUtil.isArray(thresh)?thresh:thresh(values);values=contour.size(size)(values,thresh);post&&values.forEach(post);this.value&&(out.rem=this.value);this.value=out.source=out.add=(values||[]).map(vegaDataflow.ingest);return out}});GeoJSON.Definition={type:"GeoJSON",metadata:{},params:[{name:"fields",type:"field",array:!0,length:2},{name:"geojson",type:"field"}]};
vegaUtil.inherits(GeoJSON,vegaDataflow.Transform,{transform:function(_,pulse){var features=this._features,points=this._points,fields=_.fields,lon=fields&&fields[0],lat=fields&&fields[1],geojson=_.geojson||!fields&&vegaUtil.identity;fields=pulse.ADD;_=_.modified()||pulse.changed(pulse.REM)||pulse.modified(vegaUtil.accessorFields(geojson))||lon&&pulse.modified(vegaUtil.accessorFields(lon))||lat&&pulse.modified(vegaUtil.accessorFields(lat));if(!this.value||_)fields=pulse.SOURCE,this._features=features=
[],this._points=points=[];geojson&&pulse.visit(fields,function(t){return features.push(geojson(t))});lon&&lat&&(pulse.visit(fields,function(t){var x=lon(t);t=lat(t);null!=x&&null!=t&&(x=+x)===x&&(t=+t)===t&&points.push([x,t])}),features=features.concat({type:"Feature",geometry:{type:"MultiPoint",coordinates:points}}));this.value={type:"FeatureCollection",features:features}}});GeoPath.Definition={type:"GeoPath",metadata:{modifies:!0},params:[{name:"projection",type:"projection"},{name:"field",type:"field"},
{name:"pointRadius",type:"number",expr:!0},{name:"as",type:"string","default":"path"}]};vegaUtil.inherits(GeoPath,vegaDataflow.Transform,{transform:function(_,pulse){var out=pulse.fork(pulse.ALL),path=this.value,field=_.field||vegaUtil.identity,as=_.as||"path",flag=out.SOURCE;!path||_.modified()?(this.value=path=vegaProjection.getProjectionPath(_.projection),out.materialize().reflow()):flag=field===vegaUtil.identity||pulse.modified(field.fields)?out.ADD_MOD:out.ADD;_=initPath(path,_.pointRadius);
out.visit(flag,function(t){return t[as]=path(field(t))});path.pointRadius(_);return out.modifies(as)}});GeoPoint.Definition={type:"GeoPoint",metadata:{modifies:!0},params:[{name:"projection",type:"projection",required:!0},{name:"fields",type:"field",array:!0,required:!0,length:2},{name:"as",type:"string",array:!0,length:2,"default":["x","y"]}]};vegaUtil.inherits(GeoPoint,vegaDataflow.Transform,{transform:function(_,pulse){function set(t){var xy=proj([lon(t),lat(t)]);xy?(t[x]=xy[0],t[y]=xy[1]):(t[x]=
void 0,t[y]=void 0)}var proj=_.projection,lon=_.fields[0],lat=_.fields[1],as=_.as||["x","y"],x=as[0],y=as[1];_.modified()?pulse=pulse.materialize().reflow(!0).visit(pulse.SOURCE,set):(_=pulse.modified(lon.fields)||pulse.modified(lat.fields),pulse.visit(_?pulse.ADD_MOD:pulse.ADD,set));return pulse.modifies(as)}});GeoShape.Definition={type:"GeoShape",metadata:{modifies:!0,nomod:!0},params:[{name:"projection",type:"projection"},{name:"field",type:"field","default":"datum"},{name:"pointRadius",type:"number",
expr:!0},{name:"as",type:"string","default":"shape"}]};vegaUtil.inherits(GeoShape,vegaDataflow.Transform,{transform:function(_,pulse){pulse=pulse.fork(pulse.ALL);var shape=this.value,as=_.as||"shape",flag=pulse.ADD;if(!shape||_.modified())this.value=shape=shapeGenerator(vegaProjection.getProjectionPath(_.projection),_.field||vegaUtil.field("datum"),_.pointRadius),pulse.materialize().reflow(),flag=pulse.SOURCE;pulse.visit(flag,function(t){return t[as]=shape});return pulse.modifies(as)}});Graticule.Definition=
{type:"Graticule",metadata:{changes:!0,generates:!0},params:[{name:"extent",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"extentMajor",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"extentMinor",type:"array",array:!0,length:2,content:{type:"number",array:!0,length:2}},{name:"step",type:"number",array:!0,length:2},{name:"stepMajor",type:"number",array:!0,length:2,"default":[90,360]},{name:"stepMinor",type:"number",array:!0,length:2,
"default":[10,10]},{name:"precision",type:"number","default":2.5}]};vegaUtil.inherits(Graticule,vegaDataflow.Transform,{transform:function(_,pulse){var src=this.value,gen=this.generator;if(!src.length||_.modified())for(var prop in _)if(vegaUtil.isFunction(gen[prop]))gen[prop](_[prop]);_=gen();src.length?pulse.mod.push(vegaDataflow.replace(src[0],_)):pulse.add.push(vegaDataflow.ingest(_));src[0]=_;return pulse}});Heatmap.Definition={type:"heatmap",metadata:{modifies:!0},params:[{name:"field",type:"field"},
{name:"color",type:"string",expr:!0},{name:"opacity",type:"number",expr:!0},{name:"resolve",type:"enum",values:["shared","independent"],"default":"independent"},{name:"as",type:"string","default":"image"}]};vegaUtil.inherits(Heatmap,vegaDataflow.Transform,{transform:function(_,pulse){if(!pulse.changed()&&!_.modified())return pulse.StopPropagation;var source=pulse.materialize(pulse.SOURCE).source,shared="shared"===_.resolve,field=_.field||vegaUtil.identity,opacity=opacity_(_.opacity,_),color=color_(_.color,
_),as=_.as||"image",obj={$x:0,$y:0,$value:0,$max:shared?d3Array.max(source.map(function(t){return d3Array.max(field(t).values)})):0};source.forEach(function(t){var v=field(t),o=vegaUtil.extend({},t,obj);shared||(o.$max=d3Array.max(v.values||[]));t[as]=toCanvas(v,o,color.dep?color:vegaUtil.constant(color(o)),opacity.dep?opacity:vegaUtil.constant(opacity(o)))});return pulse.reflow(!0).modifies(as)}});vegaUtil.inherits(Projection,vegaDataflow.Transform,{transform:function(_,pulse){var proj$jscomp$0=
this.value;!proj$jscomp$0||_.modified("type")?(this.value=proj$jscomp$0=create(_.type),vegaProjection.projectionProperties.forEach(function(prop){if(null!=_[prop]){var proj=proj$jscomp$0,value=_[prop];if(vegaUtil.isFunction(proj[prop]))proj[prop](value)}})):vegaProjection.projectionProperties.forEach(function(prop){if(_.modified(prop)){var proj=proj$jscomp$0,value=_[prop];if(vegaUtil.isFunction(proj[prop]))proj[prop](value)}});null!=_.pointRadius&&proj$jscomp$0.path.pointRadius(_.pointRadius);_.fit&&
fit(proj$jscomp$0,_);return pulse.fork(pulse.NO_SOURCE|pulse.NO_FIELDS)}});exports.contour=Contour;exports.geojson=GeoJSON;exports.geopath=GeoPath;exports.geopoint=GeoPoint;exports.geoshape=GeoShape;exports.graticule=Graticule;exports.heatmap=Heatmap;exports.isocontour=Isocontour;exports.kde2d=KDE2D;exports.projection=Projection;Object.defineProperty(exports,"__esModule",{value:!0})})}
//# sourceMappingURL=module$node_modules$vega_geo$build$vega_geo.js.map
