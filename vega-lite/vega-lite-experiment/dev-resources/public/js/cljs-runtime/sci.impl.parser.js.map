{"version":3,"sources":["sci/impl/parser.cljc"],"mappings":"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","names":["sci.impl.parser/eof","sci.impl.parser/default-opts","sci.impl.parser/fully-qualify","ctx","sym","cljs.core/deref","env","sym-ns","temp__5735__auto__","n","cljs.core/namespace","cljs.core.symbol","sym-name-str","cljs.core/name","current-ns","sci.impl.vars/current-ns-name","current-ns-str","namespaces","cljs.core.get","the-current-ns","aliases","ret","cljs.core/not","or__4126__auto__","cljs.core/contains?","G__52520","sci.impl.utils/ana-macros","sci.impl.interop/fully-qualify-class","v","m","cljs.core/meta","var-name","ns","sci.impl.vars/getName","cljs.core.get_in","temp__5733__auto__","var_args","G__52530","sci.impl.parser/parse-next","js/Error","r","sci.impl.parser.edamame.parse_next","sci.impl.parser.parse_next","opts","features","readers","sci.impl.vars/var?","env-val","auto-resolve","cljs.core.assoc","parse-opts","G__52537","p1__52527#","cljs.core.merge","e52538","cljs.core/ExceptionInfo","e","cljs.core.ex_info","cljs.core/ex-data","sci.impl.vars/current-file","sci.impl.parser/reader","x","string-reader","cljs.tools.reader.reader-types/string-reader","buf-len","pushback-reader","cljs.tools.reader.reader-types/PushbackReader","cljs.core.object_array","cljs.tools.reader.reader_types.indexing_push_back_reader","sci.impl.parser/get-line-number","reader","cljs.tools.reader.reader-types/get-line-number","sci.impl.parser/get-column-number","cljs.tools.reader.reader-types/get-column-number","sci.impl.parser/parse-string","s","sci.impl.utils/kw-identical?"],"sourcesContent":["(ns sci.impl.parser\n  {:no-doc true}\n  (:refer-clojure :exclude [read-string])\n  (:require\n   [clojure.tools.reader.reader-types :as r]\n   [sci.impl.interop :as interop]\n   [sci.impl.parser.edamame :as parser]\n   [sci.impl.utils :as utils]\n   [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def ^:const eof :sci.impl.parser.edamame/eof)\n\n(def default-opts\n  {:read-eval false\n   :read-cond :allow})\n\n(defn fully-qualify [ctx sym]\n  (let [env @(:env ctx)\n        sym-ns (when-let [n (namespace sym)]\n                 (symbol n))\n        sym-name-str (name sym)\n        current-ns (vars/current-ns-name)\n        current-ns-str (str current-ns)\n        namespaces (get env :namespaces)\n        the-current-ns (get namespaces current-ns)\n        aliases (:aliases the-current-ns)\n        ret (if-not sym-ns\n              (or (when (or (and (contains? (get namespaces 'clojure.core) sym)\n                                 ;; only valid when the symbol isn't excluded\n                                 (not (some-> the-current-ns\n                                              :refer\n                                              (get 'clojure.core)\n                                              :exclude\n                                              (contains? sym ))))\n                            (contains? utils/ana-macros sym))\n                    (symbol \"clojure.core\" sym-name-str))\n                  (interop/fully-qualify-class ctx sym)\n                  (when-let [v (get the-current-ns sym)]\n                    (when-let [m (meta v)]\n                      (when-let [var-name (:name m)]\n                        (when-let [ns (:ns m)]\n                          (symbol (str (vars/getName ns))\n                                  (str var-name))))))\n                  ;; all unresolvable symbols all resolved in the current namespace\n                  (symbol current-ns-str sym-name-str))\n              (if (get-in env [:namespaces sym-ns])\n                sym\n                (if-let [ns (get aliases sym-ns)]\n                  (symbol (str ns) sym-name-str)\n                  sym)))]\n    ret))\n\n(defn parse-next\n  ([r]\n   (parser/parse-next default-opts r))\n  ([ctx r]\n   (parse-next ctx r nil))\n  ([ctx r opts]\n   (let [features (:features ctx)\n         readers (:readers ctx)\n         readers (if (vars/var? readers) @readers readers)\n         env (:env ctx)\n         env-val @env\n         current-ns (vars/current-ns-name)\n         the-current-ns (get-in env-val [:namespaces current-ns])\n         aliases (:aliases the-current-ns)\n         auto-resolve (assoc aliases :current current-ns)\n         parse-opts (cond-> (assoc default-opts\n                                   :features features\n                                   :auto-resolve auto-resolve\n                                   :syntax-quote {:resolve-symbol #(fully-qualify ctx %)}\n                                   :readers readers)\n                      opts (merge opts))\n         ret (try (parser/parse-next parse-opts\n                                     r)\n                  (catch #?(:clj clojure.lang.ExceptionInfo\n                            :cljs cljs.core/ExceptionInfo) e\n                    (throw (ex-info #?(:clj (.getMessage e)\n                                       :cljs (.-message e))\n                                    (assoc (ex-data e)\n                                           :type :sci.error/parse\n                                           :phase \"parse\"\n                                           :file @vars/current-file)\n                                    e))))]\n     ret)))\n\n(defn reader [x]\n  #?(:clj (r/indexing-push-back-reader (r/push-back-reader x))\n     :cljs (let [string-reader (r/string-reader x)\n                 buf-len 1\n                 pushback-reader (r/PushbackReader. string-reader\n                                                    (object-array buf-len)\n                                                    buf-len buf-len)]\n             (r/indexing-push-back-reader pushback-reader))))\n\n(defn get-line-number [reader]\n  (r/get-line-number reader))\n\n(defn get-column-number [reader]\n  (r/get-column-number reader))\n\n(defn parse-string\n  ([ctx s]\n   (let [r (reader s)\n         v (parse-next ctx r)]\n     (if (utils/kw-identical? eof v) nil v))))\n\n;;;; Scratch\n\n(comment\n  )\n"]}