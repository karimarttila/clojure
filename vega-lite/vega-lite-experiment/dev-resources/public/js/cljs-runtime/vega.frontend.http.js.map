{"version":3,"sources":["vega/frontend/http.cljs"],"mappings":";AAKA,AAAA,AAAMA,AAAMC,AAAOC,AAAGC,AAAIC,AAAKC,AAAWC;AAA1C,AACE,AAAA,AAACC,AAAwBJ;;AACzB,AAAMK,AAAM,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACiBR,AACHE,AACG,AAACO,AACQ,AAAA,AAAA,AAAA,AAACC,AACLN,AACAC;AANtB,AAAA,AAOQF;AAAK,AAAAK,AAAA,AAACG,AAAcR;;AAP5BK;;;AAAZ,AAAA,AAAA,AAAA,AAQeD,AACRN;;AAET,AAAKW,AAAU,AAAA,AAACC,AAAQd;AACxB,AAAKe,AAAS,AAAA,AAACD,AAAQd","names":["vega.frontend.http/http","method","db","uri","data","on-success","on-failure","vega.frontend.util.clog","xhrio","G__80800","ajax.core/json-request-format","ajax.core/json-response-format","cljs.core.assoc","vega.frontend.http/http-post","cljs.core.partial","vega.frontend.http/http-get"],"sourcesContent":["(ns vega.frontend.http\n  (:require [vega.frontend.util :as v-util]\n            [ajax.core :as ajax :refer []])) ; NOTE: Empty refer for clj-kondo\n\n;; See: https://github.com/day8/re-frame-http-fx\n(defn http [method db uri data on-success on-failure]\n  (v-util/clog \"http, uri\" uri)\n  (let [xhrio (cond-> {:debug true\n                       :method method\n                       :uri uri\n                       :format (ajax/json-request-format)\n                       :response-format (ajax/json-response-format {:keywords? true})\n                       :on-success [on-success]\n                       :on-failure [on-failure]}\n                      data (assoc :params data))]\n    {:http-xhrio xhrio\n     :db db}))\n\n(def http-post (partial http :post))\n(def http-get (partial http :get))\n\n"]}