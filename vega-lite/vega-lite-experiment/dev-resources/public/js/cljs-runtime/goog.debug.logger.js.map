{
"version":3,
"file":"goog.debug.logger.js",
"lineCount":287,
"mappings":"AAsBAA,IAAA,CAAKC,OAAL,CAAa,uBAAb,CAAA;AACAD,IAAA,CAAKC,OAAL,CAAa,qBAAb,CAAA;AACAD,IAAA,CAAKC,OAAL,CAAa,mBAAb,CAAA;AACAD,IAAA,CAAKC,OAAL,CAAa,yBAAb,CAAA;AAEAD,IAAA,CAAKE,OAAL,CAAa,YAAb,CAAA;AACAF,IAAA,CAAKE,OAAL,CAAa,cAAb,CAAA;AACAF,IAAA,CAAKE,OAAL,CAAa,YAAb,CAAA;AACAF,IAAA,CAAKE,OAAL,CAAa,sBAAb,CAAA;AACAF,IAAA,CAAKE,OAAL,CAAa,sBAAb,CAAA;AAYAF,IAAA,CAAKG,KAAL,CAAWC,QAAX;AAqBAJ,IAAA,CAAKG,KAAL,CAAWE,MAAX,GAAoBC,QAAQ,CAACC,IAAD,CAAO;AAKjC,MAAA,CAAKC,KAAL,GAAaD,IAAb;AAMA,MAAA,CAAKE,OAAL,GAAe,IAAf;AAOA,MAAA,CAAKC,MAAL,GAAc,IAAd;AAOA,MAAA,CAAKC,SAAL,GAAiB,IAAjB;AAMA,MAAA,CAAKC,SAAL,GAAiB,IAAjB;AA/BiC,CAAnC;AAoCAZ,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBQ,gBAAlB,GAAqC,EAArC;AAQAb,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBS,gBAAlB,GACId,IAAA,CAAKe,MAAL,CAAY,oCAAZ,EAAkD,IAAlD,CADJ;AAQAf,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBW,uBAAlB,GACIhB,IAAA,CAAKe,MAAL,CAAY,2CAAZ,EAAyD,KAAzD,CADJ;AAIA,IAAI,CAACf,IAAD,CAAMG,KAAN,CAAYE,MAAZ,CAAmBS,gBAAvB,CAAyC;AAKvCd,MAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBY,aAAlB,GAAkC,EAAlC;AAOAjB,MAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBa,UAAlB;AAZuC;AA6CzClB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,GAA0BC,QAAQ,CAACb,IAAD,EAAOc,KAAP,CAAc;AAK9C,MAAA,CAAKd,IAAL,GAAYA,IAAZ;AAMA,MAAA,CAAKc,KAAL,GAAaA,KAAb;AAX8C,CAAhD;AAmBArB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBG,SAAxB,CAAkCC,QAAlC,GAA6CC,QAAQ,EAAG;AACtD,SAAO,IAAP,CAAYjB,IAAZ;AADsD,CAAxD;AAUAP,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBM,GAAxB,GAA8B,IAAIzB,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBc,KAAtB,CAA4B,KAA5B,EAAmCO,QAAnC,CAA9B;AAQA1B,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBQ,KAAxB,GAAgC,IAAI3B,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBc,KAAtB,CAA4B,OAA5B,EAAqC,IAArC,CAAhC;AAQAnB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBS,MAAxB,GAAiC,IAAI5B,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBc,KAAtB,CAA4B,QAA5B,EAAsC,IAAtC,CAAjC;AAQAnB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBU,OAAxB,GAAkC,IAAI7B,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBc,KAAtB,CAA4B,SAA5B,EAAuC,GAAvC,CAAlC;AAQAnB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBW,IAAxB,GAA+B,IAAI9B,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBc,KAAtB,CAA4B,MAA5B,EAAoC,GAApC,CAA/B;AAQAnB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBY,MAAxB,GAAiC,IAAI/B,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBc,KAAtB,CAA4B,QAA5B,EAAsC,GAAtC,CAAjC;AAQAnB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBa,IAAxB,GAA+B,IAAIhC,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBc,KAAtB,CAA4B,MAA5B,EAAoC,GAApC,CAA/B;AAQAnB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBc,KAAxB,GAAgC,IAAIjC,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBc,KAAtB,CAA4B,OAA5B,EAAqC,GAArC,CAAhC;AAQAnB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBe,MAAxB,GAAiC,IAAIlC,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBc,KAAtB,CAA4B,QAA5B,EAAsC,GAAtC,CAAjC;AAQAnB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBgB,GAAxB,GAA8B,IAAInC,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBc,KAAtB,CAA4B,KAA5B,EAAmC,CAAnC,CAA9B;AAQAnB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBiB,iBAAxB,GAA4C,CAC1CpC,IAD0C,CACrCG,KADqC,CAC/BE,MAD+B,CACxBc,KADwB,CAClBM,GADkB,EACbzB,IADa,CACRG,KADQ,CACFE,MADE,CACKc,KADL,CACWQ,KADX,EAE1C3B,IAF0C,CAErCG,KAFqC,CAE/BE,MAF+B,CAExBc,KAFwB,CAElBS,MAFkB,EAEV5B,IAFU,CAELG,KAFK,CAECE,MAFD,CAEQc,KAFR,CAEcU,OAFd,EAG1C7B,IAH0C,CAGrCG,KAHqC,CAG/BE,MAH+B,CAGxBc,KAHwB,CAGlBW,IAHkB,EAGZ9B,IAHY,CAGPG,KAHO,CAGDE,MAHC,CAGMc,KAHN,CAGYY,MAHZ,EAI1C/B,IAJ0C,CAIrCG,KAJqC,CAI/BE,MAJ+B,CAIxBc,KAJwB,CAIlBa,IAJkB,EAIZhC,IAJY,CAIPG,KAJO,CAIDE,MAJC,CAIMc,KAJN,CAIYc,KAJZ,EAK1CjC,IAL0C,CAKrCG,KALqC,CAK/BE,MAL+B,CAKxBc,KALwB,CAKlBe,MALkB,EAKVlC,IALU,CAKLG,KALK,CAKCE,MALD,CAKQc,KALR,CAKcgB,GALd,CAA5C;AAeAnC,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBkB,sBAAxB,GAAiD,IAAjD;AAOArC,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBmB,4BAAxB,GAAuDC,QAAQ,EAAG;AAChEvC,MAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBkB,sBAAxB,GAAiD,EAAjD;AACA,OAAK,IAAIG,IAAI,CAAR,EAAWC,KAAhB,EAAuBA,KAAvB,GAA+BzC,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBiB,iBAAxB,CAA0CI,CAA1C,CAA/B,EACKA,CAAA,EADL,CACU;AACRxC,QAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBkB,sBAAxB,CAA+CI,KAA/C,CAAqDpB,KAArD,CAAA,GAA8DoB,KAA9D;AACAzC,QAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBkB,sBAAxB,CAA+CI,KAA/C,CAAqDlC,IAArD,CAAA,GAA6DkC,KAA7D;AAFQ;AAHsD,CAAlE;AAeAzC,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBuB,kBAAxB,GAA6CC,QAAQ,CAACpC,IAAD,CAAO;AAC1D,MAAI,CAACP,IAAD,CAAMG,KAAN,CAAYE,MAAZ,CAAmBc,KAAnB,CAAyBkB,sBAA7B;AACErC,QAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBmB,4BAAxB,EAAA;AADF;AAIA,SAAOtC,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBkB,sBAAxB,CAA+C9B,IAA/C,CAAP,IAA+D,IAA/D;AAL0D,CAA5D;AAcAP,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwByB,yBAAxB,GAAoDC,QAAQ,CAACxB,KAAD,CAAQ;AAClE,MAAI,CAACrB,IAAD,CAAMG,KAAN,CAAYE,MAAZ,CAAmBc,KAAnB,CAAyBkB,sBAA7B;AACErC,QAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBmB,4BAAxB,EAAA;AADF;AAIA,MAAIjB,KAAJ,IACQrB,IAD4B,CACvBG,KADuB,CACjBE,MADiB,CACVc,KADU,CACJkB,sBADhC;AAEE,WAAOrC,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBkB,sBAAxB,CAA+ChB,KAA/C,CAAP;AAFF;AAKA,OAAK,IAAImB,IAAI,CAAb,EAAgBA,CAAhB,GAAoBxC,IAApB,CAAyBG,KAAzB,CAA+BE,MAA/B,CAAsCc,KAAtC,CAA4CiB,iBAA5C,CAA8DU,MAA9D,EAAsE,EAAEN,CAAxE,CAA2E;AACzE,QAAIC,QAAQzC,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBc,KAAlB,CAAwBiB,iBAAxB,CAA0CI,CAA1C,CAAZ;AACA,QAAIC,KAAJ,CAAUpB,KAAV,IAAmBA,KAAnB;AACE,aAAOoB,KAAP;AADF;AAFyE;AAM3E,SAAO,IAAP;AAhBkE,CAApE;AAkCAzC,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkB0C,SAAlB,GAA8BC,QAAQ,CAACzC,IAAD,CAAO;AAC3C,SAAOP,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsBF,SAAtB,CAAgCxC,IAAhC,CAAP;AAD2C,CAA7C;AAWAP,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkB6C,cAAlB,GAAmCC,QAAQ,CAACC,GAAD,CAAM;AAG/C,MAAIpD,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBW,uBAAtB,CAA+C;AAC7C,QAAIqC,sBAAsBrD,IAAA,CAAKsD,MAAL,CAAY,qBAAZ,CAA1B;AACA,QAAID,mBAAJ,CAAyB;AAGvBA,yBAAA,CAAoBD,GAApB,CAAA;AACA;AAJuB;AAQzB,QAAIG,UAAUvD,IAAA,CAAKsD,MAAL,CAAY,SAAZ,CAAd;AACA,QAAIC,OAAJ,IAAeA,OAAA,CAAQ,WAAR,CAAf;AAEEA,aAAA,CAAQ,WAAR,CAAA,CAAqBH,GAArB,CAAA;AAFF;AAX6C;AAHA,CAAjD;AA0BApD,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BkC,OAA5B,GAAsCC,QAAQ,EAAG;AAC/C,SAAO,IAAP,CAAYjD,KAAZ;AAD+C,CAAjD;AAUAR,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BoC,UAA5B,GAAyCC,QAAQ,CAACC,OAAD,CAAU;AACzD,MAAI5D,IAAJ,CAASG,KAAT,CAAe0D,eAAf;AACE,QAAI7D,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBS,gBAAtB,CAAwC;AACtC,UAAI,CAAC,IAAD,CAAMF,SAAV;AACE,YAAA,CAAKA,SAAL,GAAiB,EAAjB;AADF;AAGA,UAAA,CAAKA,SAAL,CAAekD,IAAf,CAAoBF,OAApB,CAAA;AAJsC,KAAxC,KAKO;AACL5D,UAAA,CAAK+D,OAAL,CAAaC,MAAb,CACI,CAAC,IAAD,CAAMxD,KADV,EACiB,mDADjB,GAEQ,8CAFR,CAAA;AAGAR,UAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBY,aAAlB,CAAgC6C,IAAhC,CAAqCF,OAArC,CAAA;AAJK;AANT;AADyD,CAA3D;AAuBA5D,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4B2C,aAA5B,GAA4CC,QAAQ,CAACN,OAAD,CAAU;AAC5D,MAAI5D,IAAJ,CAASG,KAAT,CAAe0D,eAAf,CAAgC;AAC9B,QAAIM,WAAWnE,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBS,gBAAlB,GACX,IADW,CACNF,SADM,GAEXZ,IAFW,CAENG,KAFM,CAEAE,MAFA,CAEOY,aAFtB;AAGA,WAAO,CAAC,CAACkD,QAAT,IAAqBnE,IAAA,CAAKoE,KAAL,CAAWC,MAAX,CAAkBF,QAAlB,EAA4BP,OAA5B,CAArB;AAJ8B,GAAhC;AAME,WAAO,KAAP;AANF;AAD4D,CAA9D;AAgBA5D,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BgD,SAA5B,GAAwCC,QAAQ,EAAG;AACjD,SAAO,IAAP,CAAY9D,OAAZ;AADiD,CAAnD;AAUAT,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BkD,WAA5B,GAA0CC,QAAQ,EAAG;AACnD,MAAI,CAAC,IAAD,CAAM9D,SAAV;AACE,QAAA,CAAKA,SAAL,GAAiB,EAAjB;AADF;AAGA,SAAO,IAAP,CAAYA,SAAZ;AAJmD,CAArD;AAiBAX,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BoD,QAA5B,GAAuCC,QAAQ,CAAClC,KAAD,CAAQ;AACrD,MAAIzC,IAAJ,CAASG,KAAT,CAAe0D,eAAf;AACE,QAAI7D,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBS,gBAAtB;AACE,UAAA,CAAKJ,MAAL,GAAc+B,KAAd;AADF,UAEO;AACLzC,UAAA,CAAK+D,OAAL,CAAaC,MAAb,CACI,CAAC,IAAD,CAAMxD,KADV,EACiB,mDADjB,GAEQ,8CAFR,CAAA;AAGAR,UAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBa,UAAlB,GAA+BuB,KAA/B;AAJK;AAHT;AADqD,CAAvD;AAuBAzC,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BsD,QAA5B,GAAuCC,QAAQ,EAAG;AAChD,SAAO7E,IAAA,CAAKG,KAAL,CAAW0D,eAAX,GAA6B,IAA7B,CAAkCnD,MAAlC,GAA2CV,IAA3C,CAAgDG,KAAhD,CAAsDE,MAAtD,CAA6Dc,KAA7D,CAAmEM,GAA1E;AADgD,CAAlD;AASAzB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BwD,iBAA5B,GAAgDC,QAAQ,EAAG;AACzD,MAAI,CAAC/E,IAAD,CAAMG,KAAN,CAAY0D,eAAhB;AACE,WAAO7D,IAAP,CAAYG,KAAZ,CAAkBE,MAAlB,CAAyBc,KAAzB,CAA+BM,GAA/B;AADF;AAIA,MAAI,CAACzB,IAAD,CAAMG,KAAN,CAAYE,MAAZ,CAAmBS,gBAAvB;AACE,WAAOd,IAAP,CAAYG,KAAZ,CAAkBE,MAAlB,CAAyBa,UAAzB;AADF;AAGA,MAAI,IAAJ,CAASR,MAAT;AACE,WAAO,IAAP,CAAYA,MAAZ;AADF;AAGA,MAAI,IAAJ,CAASD,OAAT;AACE,WAAO,IAAA,CAAKA,OAAL,CAAaqE,iBAAb,EAAP;AADF;AAGA9E,MAAA,CAAK+D,OAAL,CAAaiB,IAAb,CAAkB,+BAAlB,CAAA;AACA,SAAO,IAAP;AAfyD,CAA3D;AA0BAhF,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4B2D,UAA5B,GAAyCC,QAAQ,CAACzC,KAAD,CAAQ;AACvD,SAAOzC,IAAP,CAAYG,KAAZ,CAAkB0D,eAAlB,IACIpB,KADJ,CACUpB,KADV,IACmB,IAAA,CAAKyD,iBAAL,EADnB,CAC4CzD,KAD5C;AADuD,CAAzD;AAeArB,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4B6D,GAA5B,GAAkCC,QAAQ,CAAC3C,KAAD,EAAQW,GAAR,EAAaiC,aAAb,CAA4B;AAEpE,MAAIrF,IAAJ,CAASG,KAAT,CAAe0D,eAAf,IAAkC,IAAA,CAAKoB,UAAL,CAAgBxC,KAAhB,CAAlC,CAA0D;AAExD,QAAIzC,IAAA,CAAKsF,UAAL,CAAgBlC,GAAhB,CAAJ;AACEA,SAAA,GAAMA,GAAA,EAAN;AADF;AAIA,QAAA,CAAKmC,YAAL,CAAkB,IAAA,CAAKC,YAAL,CAAkB/C,KAAlB,EAAyBW,GAAzB,EAA8BiC,aAA9B,CAAlB,CAAA;AANwD;AAFU,CAAtE;AAsBArF,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BkE,YAA5B,GAA2CC,QAAQ,CAAChD,KAAD,EAAQW,GAAR,EAAaiC,aAAb,CAA4B;AAC7E,MAAIrF,IAAA,CAAKG,KAAL,CAAWuF,SAAX,CAAqBC,kBAArB,EAAJ;AACE,QAAIC,YACA5F,IAAA,CAAKG,KAAL,CAAWuF,SAAX,CAAqBG,WAArB,EAAA,CAAmCC,SAAnC,CAA6CrD,KAA7C,EAAoDW,GAApD,EAAyD,IAAzD,CAA8D5C,KAA9D,CADJ;AADF;AAIEoF,aAAA,GAAY,IAAI5F,IAAJ,CAASG,KAAT,CAAe4F,SAAf,CAAyBtD,KAAzB,EAAgCuD,MAAA,CAAO5C,GAAP,CAAhC,EAA6C,IAA7C,CAAkD5C,KAAlD,CAAZ;AAJF;AAMA,MAAI6E,aAAJ;AACEO,aAAA,CAAUK,YAAV,CAAuBZ,aAAvB,CAAA;AADF;AAGA,SAAOO,SAAP;AAV6E,CAA/E;AAqBA5F,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4B4E,KAA5B,GAAoCC,QAAQ,CAAC/C,GAAD,EAAMiC,aAAN,CAAqB;AAC/D,MAAIrF,IAAJ,CAASG,KAAT,CAAe0D,eAAf;AACE,QAAA,CAAKsB,GAAL,CAASnF,IAAT,CAAcG,KAAd,CAAoBE,MAApB,CAA2Bc,KAA3B,CAAiCQ,KAAjC,EAAwCyB,GAAxC,EAA6CiC,aAA7C,CAAA;AADF;AAD+D,CAAjE;AAcArF,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4B8E,MAA5B,GAAqCC,QAAQ,CAACjD,GAAD,EAAMiC,aAAN,CAAqB;AAChE,MAAIrF,IAAJ,CAASG,KAAT,CAAe0D,eAAf;AACE,QAAA,CAAKsB,GAAL,CAASnF,IAAT,CAAcG,KAAd,CAAoBE,MAApB,CAA2Bc,KAA3B,CAAiCS,MAAjC,EAAyCwB,GAAzC,EAA8CiC,aAA9C,CAAA;AADF;AADgE,CAAlE;AAcArF,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BgF,OAA5B,GAAsCC,QAAQ,CAACnD,GAAD,EAAMiC,aAAN,CAAqB;AACjE,MAAIrF,IAAJ,CAASG,KAAT,CAAe0D,eAAf;AACE,QAAA,CAAKsB,GAAL,CAASnF,IAAT,CAAcG,KAAd,CAAoBE,MAApB,CAA2Bc,KAA3B,CAAiCU,OAAjC,EAA0CuB,GAA1C,EAA+CiC,aAA/C,CAAA;AADF;AADiE,CAAnE;AAcArF,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BkF,IAA5B,GAAmCC,QAAQ,CAACrD,GAAD,EAAMiC,aAAN,CAAqB;AAC9D,MAAIrF,IAAJ,CAASG,KAAT,CAAe0D,eAAf;AACE,QAAA,CAAKsB,GAAL,CAASnF,IAAT,CAAcG,KAAd,CAAoBE,MAApB,CAA2Bc,KAA3B,CAAiCW,IAAjC,EAAuCsB,GAAvC,EAA4CiC,aAA5C,CAAA;AADF;AAD8D,CAAhE;AAcArF,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BoF,MAA5B,GAAqCC,QAAQ,CAACvD,GAAD,EAAMiC,aAAN,CAAqB;AAChE,MAAIrF,IAAJ,CAASG,KAAT,CAAe0D,eAAf;AACE,QAAA,CAAKsB,GAAL,CAASnF,IAAT,CAAcG,KAAd,CAAoBE,MAApB,CAA2Bc,KAA3B,CAAiCY,MAAjC,EAAyCqB,GAAzC,EAA8CiC,aAA9C,CAAA;AADF;AADgE,CAAlE;AAcArF,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BsF,IAA5B,GAAmCC,QAAQ,CAACzD,GAAD,EAAMiC,aAAN,CAAqB;AAC9D,MAAIrF,IAAJ,CAASG,KAAT,CAAe0D,eAAf;AACE,QAAA,CAAKsB,GAAL,CAASnF,IAAT,CAAcG,KAAd,CAAoBE,MAApB,CAA2Bc,KAA3B,CAAiCa,IAAjC,EAAuCoB,GAAvC,EAA4CiC,aAA5C,CAAA;AADF;AAD8D,CAAhE;AAcArF,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BwF,KAA5B,GAAoCC,QAAQ,CAAC3D,GAAD,EAAMiC,aAAN,CAAqB;AAC/D,MAAIrF,IAAJ,CAASG,KAAT,CAAe0D,eAAf;AACE,QAAA,CAAKsB,GAAL,CAASnF,IAAT,CAAcG,KAAd,CAAoBE,MAApB,CAA2Bc,KAA3B,CAAiCc,KAAjC,EAAwCmB,GAAxC,EAA6CiC,aAA7C,CAAA;AADF;AAD+D,CAAjE;AAcArF,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4B0F,MAA5B,GAAqCC,QAAQ,CAAC7D,GAAD,EAAMiC,aAAN,CAAqB;AAChE,MAAIrF,IAAJ,CAASG,KAAT,CAAe0D,eAAf;AACE,QAAA,CAAKsB,GAAL,CAASnF,IAAT,CAAcG,KAAd,CAAoBE,MAApB,CAA2Bc,KAA3B,CAAiCe,MAAjC,EAAyCkB,GAAzC,EAA8CiC,aAA9C,CAAA;AADF;AADgE,CAAlE;AAaArF,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BsE,SAA5B,GAAwCsB,QAAQ,CAACtB,SAAD,CAAY;AAC1D,MAAI5F,IAAJ,CAASG,KAAT,CAAe0D,eAAf,IAAkC,IAAA,CAAKoB,UAAL,CAAgBW,SAAA,CAAUhB,QAAV,EAAhB,CAAlC;AACE,QAAA,CAAKW,YAAL,CAAkBK,SAAlB,CAAA;AADF;AAD0D,CAA5D;AAYA5F,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BiE,YAA5B,GAA2C4B,QAAQ,CAACvB,SAAD,CAAY;AAC7D,MAAI5F,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBW,uBAAtB;AACEhB,QAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkB6C,cAAlB,CAAiC,MAAjC,GAA0C0C,SAAA,CAAUwB,UAAV,EAA1C,CAAA;AADF;AAGA,MAAIpH,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBS,gBAAtB,CAAwC;AACtC,QAAIuG,SAAS,IAAb;AACA,WAAOA,MAAP,CAAe;AACbA,YAAA,CAAOC,YAAP,CAAoB1B,SAApB,CAAA;AACAyB,YAAA,GAASA,MAAA,CAAO/C,SAAP,EAAT;AAFa;AAFuB,GAAxC;AAOE,SAAK,IAAI9B,IAAI,CAAR,EAAWoB,OAAhB,EAAyBA,OAAzB,GAAmC5D,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBY,aAAlB,CAAgCuB,CAAA,EAAhC,CAAnC,CAAA;AACEoB,aAAA,CAAQgC,SAAR,CAAA;AADF;AAPF;AAJ6D,CAA/D;AAuBA5F,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BgG,YAA5B,GAA2CC,QAAQ,CAAC3B,SAAD,CAAY;AAC7D,MAAI,IAAJ,CAAShF,SAAT;AACE,SAAK,IAAI4B,IAAI,CAAR,EAAWoB,OAAhB,EAAyBA,OAAzB,GAAmC,IAAA,CAAKhD,SAAL,CAAe4B,CAAf,CAAnC,EAAsDA,CAAA,EAAtD;AACEoB,aAAA,CAAQgC,SAAR,CAAA;AADF;AADF;AAD6D,CAA/D;AAcA5F,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BkG,UAA5B,GAAyCC,QAAQ,CAACC,MAAD,CAAS;AACxD,MAAA,CAAKjH,OAAL,GAAeiH,MAAf;AADwD,CAA1D;AAWA1H,IAAA,CAAKG,KAAL,CAAWE,MAAX,CAAkBiB,SAAlB,CAA4BqG,SAA5B,GAAwCC,QAAQ,CAACrH,IAAD,EAAOsH,MAAP,CAAe;AAC7D,MAAA,CAAKrD,WAAL,EAAA,CAAmBjE,IAAnB,CAAA,GAA2BsH,MAA3B;AAD6D,CAA/D;AAWA7H,IAAA,CAAKG,KAAL,CAAW8C,UAAX,GAAwB,EAAxB;AASAjD,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsB6E,QAAtB,GAAiC,EAAjC;AAQA9H,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsB8E,WAAtB,GAAoC,IAApC;AAMA/H,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsB+E,UAAtB,GAAmCC,QAAQ,EAAG;AAC5C,MAAI,CAACjI,IAAD,CAAMG,KAAN,CAAY8C,UAAZ,CAAuB8E,WAA3B,CAAwC;AACtC/H,QAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsB8E,WAAtB,GACI,IAAI/H,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBL,IAAtB,CAA2BG,KAA3B,CAAiCE,MAAjC,CAAwCQ,gBAAxC,CADJ;AAEAb,QAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsB6E,QAAtB,CAA+B9H,IAA/B,CAAoCG,KAApC,CAA0CE,MAA1C,CAAiDQ,gBAAjD,CAAA,GACIb,IADJ,CACSG,KADT,CACe8C,UADf,CAC0B8E,WAD1B;AAEA/H,QAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsB8E,WAAtB,CAAkCrD,QAAlC,CAA2C1E,IAA3C,CAAgDG,KAAhD,CAAsDE,MAAtD,CAA6Dc,KAA7D,CAAmEY,MAAnE,CAAA;AALsC;AADI,CAA9C;AAgBA/B,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsBiF,UAAtB,GAAmCC,QAAQ,EAAG;AAC5C,SAAOnI,IAAP,CAAYG,KAAZ,CAAkB8C,UAAlB,CAA6B6E,QAA7B;AAD4C,CAA9C;AAWA9H,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsBmF,OAAtB,GAAgCC,QAAQ,EAAG;AACzCrI,MAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsB+E,UAAtB,EAAA;AACA,SAA0ChI,IAAD,CAAMG,KAAN,CAAY8C,UAAZ,CAAuB8E,WAAhE;AAFyC,CAA3C;AAcA/H,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsBF,SAAtB,GAAkCuF,QAAQ,CAAC/H,IAAD,CAAO;AAC/CP,MAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsB+E,UAAtB,EAAA;AACA,MAAIO,MAAMvI,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsB6E,QAAtB,CAA+BvH,IAA/B,CAAV;AACA,SAAOgI,GAAP,IAAcvI,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsBuF,aAAtB,CAAoCjI,IAApC,CAAd;AAH+C,CAAjD;AAcAP,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsBwF,4BAAtB,GAAqDC,QAAQ,CAACC,UAAD,CAAa;AACxE,SAAO,QAAQ,CAACnC,IAAD,CAAO;AACpB,QAAIqB,SAASc,UAATd,IAAuB7H,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsBmF,OAAtB,EAA3B;AACAP,UAAA,CAAOzB,MAAP,CACI,SADJ,GACgBI,IADhB,CACqBoC,OADrB,GAC+B,IAD/B,GACsCpC,IADtC,CAC2CqC,QAD3C,GACsD,WADtD,GAEIrC,IAFJ,CAESsC,IAFT,GAEgB,GAFhB,CAAA;AAFoB,GAAtB;AADwE,CAA1E;AAiBA9I,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsBuF,aAAtB,GAAsCO,QAAQ,CAACxI,IAAD,CAAO;AAEnD,MAAIsH,SAAS,IAAI7H,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBE,IAAtB,CAAb;AACA,MAAIP,IAAJ,CAASG,KAAT,CAAeE,MAAf,CAAsBS,gBAAtB,CAAwC;AACtC,QAAIkI,eAAezI,IAAA,CAAK0I,WAAL,CAAiB,GAAjB,CAAnB;AACA,QAAIC,aAAa3I,IAAA,CAAK4I,MAAL,CAAY,CAAZ,EAAeH,YAAf,CAAjB;AACA,QAAII,WAAW7I,IAAA,CAAK4I,MAAL,CAAYH,YAAZ,GAA2B,CAA3B,CAAf;AACA,QAAIK,eAAerJ,IAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsBF,SAAtB,CAAgCmG,UAAhC,CAAnB;AAGAG,gBAAA,CAAa1B,SAAb,CAAuByB,QAAvB,EAAiCvB,MAAjC,CAAA;AACAA,UAAA,CAAOL,UAAP,CAAkB6B,YAAlB,CAAA;AARsC;AAWxCrJ,MAAA,CAAKG,KAAL,CAAW8C,UAAX,CAAsB6E,QAAtB,CAA+BvH,IAA/B,CAAA,GAAuCsH,MAAvC;AACA,SAAOA,MAAP;AAfmD,CAArD;;",
"sources":["goog/debug/logger.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the Logger class. Please minimize dependencies\n * this file has on other closure classes as any dependency it takes won't be\n * able to use the logging infrastructure.\n *\n * @see ../demos/debug.html\n */\n\ngoog.provide('goog.debug.LogManager');\ngoog.provide('goog.debug.Loggable');\ngoog.provide('goog.debug.Logger');\ngoog.provide('goog.debug.Logger.Level');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.debug');\ngoog.require('goog.debug.LogBuffer');\ngoog.require('goog.debug.LogRecord');\n\n\n/**\n * A message value that can be handled by a Logger.\n *\n * Functions are treated like callbacks, but are only called when the event's\n * log level is enabled. This is useful for logging messages that are expensive\n * to construct.\n *\n * @typedef {string|function(): string}\n */\ngoog.debug.Loggable;\n\n\n\n/**\n * The Logger is an object used for logging debug messages. Loggers are\n * normally named, using a hierarchical dot-separated namespace. Logger names\n * can be arbitrary strings, but they should normally be based on the package\n * name or class name of the logged component, such as goog.net.BrowserChannel.\n *\n * The Logger object is loosely based on the java class\n * java.util.logging.Logger. It supports different levels of filtering for\n * different loggers.\n *\n * The logger object should never be instantiated by application code. It\n * should always use the goog.debug.Logger.getLogger function.\n *\n * @constructor\n * @param {string} name The name of the Logger.\n * @final\n */\ngoog.debug.Logger = function(name) {\n  /**\n   * Name of the Logger. Generally a dot-separated namespace\n   * @private {string}\n   */\n  this.name_ = name;\n\n  /**\n   * Parent Logger.\n   * @private {?goog.debug.Logger}\n   */\n  this.parent_ = null;\n\n  /**\n   * Level that this logger only filters above. Null indicates it should\n   * inherit from the parent.\n   * @private {?goog.debug.Logger.Level}\n   */\n  this.level_ = null;\n\n  /**\n   * Map of children loggers. The keys are the leaf names of the children and\n   * the values are the child loggers.\n   * @private {?Object}\n   */\n  this.children_ = null;\n\n  /**\n   * Handlers that are listening to this logger.\n   * @private {?Array<?Function>}\n   */\n  this.handlers_ = null;\n};\n\n\n/** @const */\ngoog.debug.Logger.ROOT_LOGGER_NAME = '';\n\n\n/**\n * @define {boolean} Toggles whether loggers other than the root logger can have\n *     log handlers attached to them and whether they can have their log level\n *     set. Logging is a bit faster when this is set to false.\n */\ngoog.debug.Logger.ENABLE_HIERARCHY =\n    goog.define('goog.debug.Logger.ENABLE_HIERARCHY', true);\n\n\n/**\n * @define {boolean} Toggles whether active log statements are also recorded\n *     to the profiler.\n */\ngoog.debug.Logger.ENABLE_PROFILER_LOGGING =\n    goog.define('goog.debug.Logger.ENABLE_PROFILER_LOGGING', false);\n\n\nif (!goog.debug.Logger.ENABLE_HIERARCHY) {\n  /**\n   * @type {!Array<Function>}\n   * @private\n   */\n  goog.debug.Logger.rootHandlers_ = [];\n\n\n  /**\n   * @type {goog.debug.Logger.Level}\n   * @private\n   */\n  goog.debug.Logger.rootLevel_;\n}\n\n\n\n/**\n * The Level class defines a set of standard logging levels that\n * can be used to control logging output.  The logging Level objects\n * are ordered and are specified by ordered integers.  Enabling logging\n * at a given level also enables logging at all higher levels.\n * <p>\n * Clients should normally use the predefined Level constants such\n * as Level.SEVERE.\n * <p>\n * The levels in descending order are:\n * <ul>\n * <li>SEVERE (highest value)\n * <li>WARNING\n * <li>INFO\n * <li>CONFIG\n * <li>FINE\n * <li>FINER\n * <li>FINEST  (lowest value)\n * </ul>\n * In addition there is a level OFF that can be used to turn\n * off logging, and a level ALL that can be used to enable\n * logging of all messages.\n *\n * @param {string} name The name of the level.\n * @param {number} value The numeric value of the level.\n * @constructor\n * @final\n */\ngoog.debug.Logger.Level = function(name, value) {\n  /**\n   * The name of the level\n   * @type {string}\n   */\n  this.name = name;\n\n  /**\n   * The numeric value of the level\n   * @type {number}\n   */\n  this.value = value;\n};\n\n\n/**\n * @return {string} String representation of the logger level.\n * @override\n */\ngoog.debug.Logger.Level.prototype.toString = function() {\n  return this.name;\n};\n\n\n/**\n * OFF is a special level that can be used to turn off logging.\n * This level is initialized to <CODE>Infinity</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.OFF = new goog.debug.Logger.Level('OFF', Infinity);\n\n\n/**\n * SHOUT is a message level for extra debugging loudness.\n * This level is initialized to <CODE>1200</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level('SHOUT', 1200);\n\n\n/**\n * SEVERE is a message level indicating a serious failure.\n * This level is initialized to <CODE>1000</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level('SEVERE', 1000);\n\n\n/**\n * WARNING is a message level indicating a potential problem.\n * This level is initialized to <CODE>900</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level('WARNING', 900);\n\n\n/**\n * INFO is a message level for informational messages.\n * This level is initialized to <CODE>800</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.INFO = new goog.debug.Logger.Level('INFO', 800);\n\n\n/**\n * CONFIG is a message level for static configuration messages.\n * This level is initialized to <CODE>700</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level('CONFIG', 700);\n\n\n/**\n * FINE is a message level providing tracing information.\n * This level is initialized to <CODE>500</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.FINE = new goog.debug.Logger.Level('FINE', 500);\n\n\n/**\n * FINER indicates a fairly detailed tracing message.\n * This level is initialized to <CODE>400</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.FINER = new goog.debug.Logger.Level('FINER', 400);\n\n/**\n * FINEST indicates a highly detailed tracing message.\n * This level is initialized to <CODE>300</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\n\ngoog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level('FINEST', 300);\n\n\n/**\n * ALL indicates that all messages should be logged.\n * This level is initialized to <CODE>0</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.ALL = new goog.debug.Logger.Level('ALL', 0);\n\n\n/**\n * The predefined levels.\n * @type {!Array<!goog.debug.Logger.Level>}\n * @final\n */\ngoog.debug.Logger.Level.PREDEFINED_LEVELS = [\n  goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT,\n  goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING,\n  goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG,\n  goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER,\n  goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL\n];\n\n\n/**\n * A lookup map used to find the level object based on the name or value of\n * the level object.\n * @type {?Object}\n * @private\n */\ngoog.debug.Logger.Level.predefinedLevelsCache_ = null;\n\n\n/**\n * Creates the predefined levels cache and populates it.\n * @private\n */\ngoog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {\n  goog.debug.Logger.Level.predefinedLevelsCache_ = {};\n  for (var i = 0, level; level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n       i++) {\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;\n  }\n};\n\n\n/**\n * Gets the predefined level with the given name.\n * @param {string} name The name of the level.\n * @return {goog.debug.Logger.Level} The level, or null if none found.\n */\ngoog.debug.Logger.Level.getPredefinedLevel = function(name) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n\n  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;\n};\n\n\n/**\n * Gets the highest predefined level <= #value.\n * @param {number} value Level value.\n * @return {goog.debug.Logger.Level} The level, or null if none found.\n */\ngoog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n\n  if (value in /** @type {!Object} */ (\n          goog.debug.Logger.Level.predefinedLevelsCache_)) {\n    return goog.debug.Logger.Level.predefinedLevelsCache_[value];\n  }\n\n  for (var i = 0; i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length; ++i) {\n    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n    if (level.value <= value) {\n      return level;\n    }\n  }\n  return null;\n};\n\n\n/**\n * Finds or creates a logger for a named subsystem. If a logger has already been\n * created with the given name it is returned. Otherwise a new logger is\n * created. If a new logger is created its log level will be configured based\n * on the LogManager configuration and it will configured to also send logging\n * output to its parent's handlers. It will be registered in the LogManager\n * global namespace.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n * @deprecated use {@link goog.log} instead.\n */\ngoog.debug.Logger.getLogger = function(name) {\n  return goog.debug.LogManager.getLogger(name);\n};\n\n\n/**\n * Logs a message to profiling tools, if available.\n * {@see https://developers.google.com/web-toolkit/speedtracer/logging-api}\n * {@see http://msdn.microsoft.com/en-us/library/dd433074(VS.85).aspx}\n * @param {string} msg The message to log.\n */\ngoog.debug.Logger.logToProfilers = function(msg) {\n  // Some browsers also log timeStamp calls to the console, only log\n  // if actually asked.\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    var msWriteProfilerMark = goog.global['msWriteProfilerMark'];\n    if (msWriteProfilerMark) {\n      // Logs a message to the Microsoft profiler\n      // On IE, console['timeStamp'] may output to console\n      msWriteProfilerMark(msg);\n      return;\n    }\n\n    // Using goog.global, as loggers might be used in window-less contexts.\n    var console = goog.global['console'];\n    if (console && console['timeStamp']) {\n      // Logs a message to Firebug, Web Inspector, SpeedTracer, etc.\n      console['timeStamp'](msg);\n    }\n  }\n};\n\n\n/**\n * Gets the name of this logger.\n * @return {string} The name of this logger.\n */\ngoog.debug.Logger.prototype.getName = function() {\n  return this.name_;\n};\n\n\n/**\n * Adds a handler to the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {Function} handler Handler function to add.\n */\ngoog.debug.Logger.prototype.addHandler = function(handler) {\n  if (goog.debug.LOGGING_ENABLED) {\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\n      if (!this.handlers_) {\n        this.handlers_ = [];\n      }\n      this.handlers_.push(handler);\n    } else {\n      goog.asserts.assert(\n          !this.name_, 'Cannot call addHandler on a non-root logger when ' +\n              'goog.debug.Logger.ENABLE_HIERARCHY is false.');\n      goog.debug.Logger.rootHandlers_.push(handler);\n    }\n  }\n};\n\n\n/**\n * Removes a handler from the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {Function} handler Handler function to remove.\n * @return {boolean} Whether the handler was removed.\n */\ngoog.debug.Logger.prototype.removeHandler = function(handler) {\n  if (goog.debug.LOGGING_ENABLED) {\n    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ?\n        this.handlers_ :\n        goog.debug.Logger.rootHandlers_;\n    return !!handlers && goog.array.remove(handlers, handler);\n  } else {\n    return false;\n  }\n};\n\n\n/**\n * Returns the parent of this logger.\n * @return {goog.debug.Logger} The parent logger or null if this is the root.\n */\ngoog.debug.Logger.prototype.getParent = function() {\n  return this.parent_;\n};\n\n\n/**\n * Returns the children of this logger as a map of the child name to the logger.\n * @return {!Object} The map where the keys are the child leaf names and the\n *     values are the Logger objects.\n */\ngoog.debug.Logger.prototype.getChildren = function() {\n  if (!this.children_) {\n    this.children_ = {};\n  }\n  return this.children_;\n};\n\n\n/**\n * Set the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value Level.OFF can be used to turn off logging. If the new level\n * is null, it means that this node should inherit its level from its nearest\n * ancestor with a specific (non-null) level value.\n *\n * @param {goog.debug.Logger.Level} level The new level.\n */\ngoog.debug.Logger.prototype.setLevel = function(level) {\n  if (goog.debug.LOGGING_ENABLED) {\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\n      this.level_ = level;\n    } else {\n      goog.asserts.assert(\n          !this.name_, 'Cannot call setLevel() on a non-root logger when ' +\n              'goog.debug.Logger.ENABLE_HIERARCHY is false.');\n      goog.debug.Logger.rootLevel_ = level;\n    }\n  }\n};\n\n\n/**\n * Gets the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value Level.OFF can be used to turn off logging. If the level\n * is null, it means that this node should inherit its level from its nearest\n * ancestor with a specific (non-null) level value.\n *\n * @return {goog.debug.Logger.Level} The level.\n */\ngoog.debug.Logger.prototype.getLevel = function() {\n  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;\n};\n\n\n/**\n * Returns the effective level of the logger based on its ancestors' levels.\n * @return {goog.debug.Logger.Level} The level.\n */\ngoog.debug.Logger.prototype.getEffectiveLevel = function() {\n  if (!goog.debug.LOGGING_ENABLED) {\n    return goog.debug.Logger.Level.OFF;\n  }\n\n  if (!goog.debug.Logger.ENABLE_HIERARCHY) {\n    return goog.debug.Logger.rootLevel_;\n  }\n  if (this.level_) {\n    return this.level_;\n  }\n  if (this.parent_) {\n    return this.parent_.getEffectiveLevel();\n  }\n  goog.asserts.fail('Root logger has no level set.');\n  return null;\n};\n\n\n/**\n * Checks if a message of the given level would actually be logged by this\n * logger. This check is based on the Loggers effective level, which may be\n * inherited from its parent.\n * @param {goog.debug.Logger.Level} level The level to check.\n * @return {boolean} Whether the message would be logged.\n */\ngoog.debug.Logger.prototype.isLoggable = function(level) {\n  return goog.debug.LOGGING_ENABLED &&\n      level.value >= this.getEffectiveLevel().value;\n};\n\n\n/**\n * Logs a message. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error|Object=} opt_exception An exception associated with the\n *     message.\n */\ngoog.debug.Logger.prototype.log = function(level, msg, opt_exception) {\n  // java caches the effective level, not sure it's necessary here\n  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {\n    // Message callbacks can be useful when a log message is expensive to build.\n    if (goog.isFunction(msg)) {\n      msg = msg();\n    }\n\n    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));\n  }\n};\n\n\n/**\n * Creates a new log record and adds the exception (if present) to it.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {Error|Object=} opt_exception An exception associated with the\n *     message.\n * @return {!goog.debug.LogRecord} A log record.\n * @suppress {es5Strict}\n */\ngoog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {\n  if (goog.debug.LogBuffer.isBufferingEnabled()) {\n    var logRecord =\n        goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);\n  } else {\n    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);\n  }\n  if (opt_exception) {\n    logRecord.setException(opt_exception);\n  }\n  return logRecord;\n};\n\n\n/**\n * Logs a message at the Logger.Level.SHOUT level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.shout = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.SEVERE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.severe = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.WARNING level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.warning = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.INFO level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.info = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.CONFIG level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.config = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.fine = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINER level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.finer = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINEST level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.finest = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a LogRecord. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.debug.LogRecord} logRecord A log record to log.\n */\ngoog.debug.Logger.prototype.logRecord = function(logRecord) {\n  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {\n    this.doLogRecord_(logRecord);\n  }\n};\n\n\n/**\n * Logs a LogRecord.\n * @param {goog.debug.LogRecord} logRecord A log record to log.\n * @private\n */\ngoog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    goog.debug.Logger.logToProfilers('log:' + logRecord.getMessage());\n  }\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var target = this;\n    while (target) {\n      target.callPublish_(logRecord);\n      target = target.getParent();\n    }\n  } else {\n    for (var i = 0, handler; handler = goog.debug.Logger.rootHandlers_[i++];) {\n      handler(logRecord);\n    }\n  }\n};\n\n\n/**\n * Calls the handlers for publish.\n * @param {goog.debug.LogRecord} logRecord The log record to publish.\n * @private\n */\ngoog.debug.Logger.prototype.callPublish_ = function(logRecord) {\n  if (this.handlers_) {\n    for (var i = 0, handler; handler = this.handlers_[i]; i++) {\n      handler(logRecord);\n    }\n  }\n};\n\n\n/**\n * Sets the parent of this logger. This is used for setting up the logger tree.\n * @param {goog.debug.Logger} parent The parent logger.\n * @private\n */\ngoog.debug.Logger.prototype.setParent_ = function(parent) {\n  this.parent_ = parent;\n};\n\n\n/**\n * Adds a child to this logger. This is used for setting up the logger tree.\n * @param {string} name The leaf name of the child.\n * @param {goog.debug.Logger} logger The child logger.\n * @private\n */\ngoog.debug.Logger.prototype.addChild_ = function(name, logger) {\n  this.getChildren()[name] = logger;\n};\n\n\n/**\n * There is a single global LogManager object that is used to maintain a set of\n * shared state about Loggers and log services. This is loosely based on the\n * java class java.util.logging.LogManager.\n * @const\n */\ngoog.debug.LogManager = {};\n\n\n/**\n * Map of logger names to logger objects.\n *\n * @type {!Object<string, !goog.debug.Logger>}\n * @private\n */\ngoog.debug.LogManager.loggers_ = {};\n\n\n/**\n * The root logger which is the root of the logger tree.\n * @type {?goog.debug.Logger}\n * @private\n */\ngoog.debug.LogManager.rootLogger_ = null;\n\n\n/**\n * Initializes the LogManager if not already initialized.\n */\ngoog.debug.LogManager.initialize = function() {\n  if (!goog.debug.LogManager.rootLogger_) {\n    goog.debug.LogManager.rootLogger_ =\n        new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);\n    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] =\n        goog.debug.LogManager.rootLogger_;\n    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);\n  }\n};\n\n\n/**\n * Returns all the loggers.\n * @return {!Object<string, !goog.debug.Logger>} Map of logger names to logger\n *     objects.\n */\ngoog.debug.LogManager.getLoggers = function() {\n  return goog.debug.LogManager.loggers_;\n};\n\n\n/**\n * Returns the root of the logger tree namespace, the logger with the empty\n * string as its name.\n *\n * @return {!goog.debug.Logger} The root logger.\n */\ngoog.debug.LogManager.getRoot = function() {\n  goog.debug.LogManager.initialize();\n  return /** @type {!goog.debug.Logger} */ (goog.debug.LogManager.rootLogger_);\n};\n\n\n/**\n * Finds a named logger.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n */\ngoog.debug.LogManager.getLogger = function(name) {\n  goog.debug.LogManager.initialize();\n  var ret = goog.debug.LogManager.loggers_[name];\n  return ret || goog.debug.LogManager.createLogger_(name);\n};\n\n\n/**\n * Creates a function that can be passed to goog.debug.catchErrors. The function\n * will log all reported errors using the given logger.\n * @param {goog.debug.Logger=} opt_logger The logger to log the errors to.\n *     Defaults to the root logger.\n * @return {function(Object)} The created function.\n */\ngoog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {\n  return function(info) {\n    var logger = opt_logger || goog.debug.LogManager.getRoot();\n    logger.severe(\n        'Error: ' + info.message + ' (' + info.fileName + ' @ Line: ' +\n        info.line + ')');\n  };\n};\n\n\n/**\n * Creates the named logger. Will also create the parents of the named logger\n * if they don't yet exist.\n * @param {string} name The name of the logger.\n * @return {!goog.debug.Logger} The named logger.\n * @private\n */\ngoog.debug.LogManager.createLogger_ = function(name) {\n  // find parent logger\n  var logger = new goog.debug.Logger(name);\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var lastDotIndex = name.lastIndexOf('.');\n    var parentName = name.substr(0, lastDotIndex);\n    var leafName = name.substr(lastDotIndex + 1);\n    var parentLogger = goog.debug.LogManager.getLogger(parentName);\n\n    // tell the parent about the child and the child about the parent\n    parentLogger.addChild_(leafName, logger);\n    logger.setParent_(parentLogger);\n  }\n\n  goog.debug.LogManager.loggers_[name] = logger;\n  return logger;\n};\n"],
"names":["goog","provide","require","debug","Loggable","Logger","goog.debug.Logger","name","name_","parent_","level_","children_","handlers_","ROOT_LOGGER_NAME","ENABLE_HIERARCHY","define","ENABLE_PROFILER_LOGGING","rootHandlers_","rootLevel_","Level","goog.debug.Logger.Level","value","prototype","toString","goog.debug.Logger.Level.prototype.toString","OFF","Infinity","SHOUT","SEVERE","WARNING","INFO","CONFIG","FINE","FINER","FINEST","ALL","PREDEFINED_LEVELS","predefinedLevelsCache_","createPredefinedLevelsCache_","goog.debug.Logger.Level.createPredefinedLevelsCache_","i","level","getPredefinedLevel","goog.debug.Logger.Level.getPredefinedLevel","getPredefinedLevelByValue","goog.debug.Logger.Level.getPredefinedLevelByValue","length","getLogger","goog.debug.Logger.getLogger","LogManager","logToProfilers","goog.debug.Logger.logToProfilers","msg","msWriteProfilerMark","global","console","getName","goog.debug.Logger.prototype.getName","addHandler","goog.debug.Logger.prototype.addHandler","handler","LOGGING_ENABLED","push","asserts","assert","removeHandler","goog.debug.Logger.prototype.removeHandler","handlers","array","remove","getParent","goog.debug.Logger.prototype.getParent","getChildren","goog.debug.Logger.prototype.getChildren","setLevel","goog.debug.Logger.prototype.setLevel","getLevel","goog.debug.Logger.prototype.getLevel","getEffectiveLevel","goog.debug.Logger.prototype.getEffectiveLevel","fail","isLoggable","goog.debug.Logger.prototype.isLoggable","log","goog.debug.Logger.prototype.log","opt_exception","isFunction","doLogRecord_","getLogRecord","goog.debug.Logger.prototype.getLogRecord","LogBuffer","isBufferingEnabled","logRecord","getInstance","addRecord","LogRecord","String","setException","shout","goog.debug.Logger.prototype.shout","severe","goog.debug.Logger.prototype.severe","warning","goog.debug.Logger.prototype.warning","info","goog.debug.Logger.prototype.info","config","goog.debug.Logger.prototype.config","fine","goog.debug.Logger.prototype.fine","finer","goog.debug.Logger.prototype.finer","finest","goog.debug.Logger.prototype.finest","goog.debug.Logger.prototype.logRecord","goog.debug.Logger.prototype.doLogRecord_","getMessage","target","callPublish_","goog.debug.Logger.prototype.callPublish_","setParent_","goog.debug.Logger.prototype.setParent_","parent","addChild_","goog.debug.Logger.prototype.addChild_","logger","loggers_","rootLogger_","initialize","goog.debug.LogManager.initialize","getLoggers","goog.debug.LogManager.getLoggers","getRoot","goog.debug.LogManager.getRoot","goog.debug.LogManager.getLogger","ret","createLogger_","createFunctionForCatchErrors","goog.debug.LogManager.createFunctionForCatchErrors","opt_logger","message","fileName","line","goog.debug.LogManager.createLogger_","lastDotIndex","lastIndexOf","parentName","substr","leafName","parentLogger"]
}
