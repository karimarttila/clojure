{"version":3,"sources":["vega/frontend/main.cljs"],"mappings":"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","names":["re_frame.core.reg_sub","db","re_frame.core.reg_event_db","_","vega.frontend.util.clog","p__80894","vec__80895","cljs.core.nth","new-match","old-match","new-path","controllers","reitit.frontend.controllers/apply-controllers","js/console.log","G__80898","cljs.core.assoc","cljs.core._EQ_","re_frame.core.reg_event_fx","p__80899","vec__80900","seq__80901","cljs.core/seq","first__80902","cljs.core/first","cljs.core/next","route","vega.frontend.main/simple-data","vega.frontend.main/simple-data2","p__80903","map__80904","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vega.frontend.main/bar-experiment-raw-spec","data","p__80906","map__80907","vega.frontend.main/bar-experiment-vega-lite-api","vega.frontend.components/my-vl","cljs.core/clj->js","p__80909","map__80910","vega.frontend.main/cars-columns-vega-lite-api","p__80912","map__80913","vega.frontend.main/cars-counts-vega-lite-api","p__80915","map__80916","vega.frontend.main/cars-avg-miles-per-gallon-vega-lite-api","vega.frontend.main/weather-colors","p__80918","map__80919","vega.frontend.main/weather-bars-vega-lite-api","p__80921","map__80922","vega.frontend.main/weather-bars-%-vega-lite-api","p__80924","map__80925","vega.frontend.main/weather-temp-circles-vega-lite-api-1","width","height","p__80927","map__80928","vega.frontend.main/weather-temp-circles-vega-lite-api-2","p__80930","map__80931","vega.frontend.main/weather-temp-circles-vega-lite-api-3","p__80933","map__80934","vega.frontend.main/weather-condition-counts-vega-lite-api","vega.frontend.main/draw-it","graph","title","func-name","data-name","method","p__80936","map__80937","vega.frontend.main/vega-lite-api-render-it","func","vega.frontend.components/vega-lite-api-render","p__80939","map__80940","vega.frontend.main/vega-lite-api-spec-and-vega-react-it","spec-obj","spec","cljs.core.js__GT_clj","vega.frontend.components/vega-lite-react-wrapper-old-style","p__80942","map__80943","vega.frontend.main/vega-react-it-old-style","raw-spec-func","p__80945","map__80946","vega.frontend.main/vega-react-it","vega.frontend.components/vega-lite-react-wrapper","vega.frontend.main/home-page","data-cars","cljs.core/deref","re_frame.core.subscribe","re-frame.core/dispatch","data-seattle-weather","and__4115__auto__","vega.frontend.data.cars/simple-scatter","vega.frontend.data.cars/complex-scatter1","re-frame.core/reg-fx","reitit.frontend.easy/push-state","var_args","G__80949","vega.frontend.main/href","js/Error","k","vega.frontend.main.href","params","query","reitit.frontend.easy.href","vega.frontend.main/routes-dev","vega.frontend.main/routes","vega.frontend.main/on-navigate","vega.frontend.main/router","reitit.frontend.router","reitit.coercion.spec/coercion","vega.frontend.main/init-routes!","reitit.frontend.easy/start!","vega.frontend.main/router-component","current-route","path-params","vega.frontend.main/debug?","js/goog.DEBUG","vega.frontend.main/debug","vega.frontend.main/dev-setup","cljs.core/enable-console-print!","cljs.core.println","vega.frontend.main/start","re-frame.core/clear-subscription-cache!","reagent.dom.render","reagent-dev-tools.core/dev-state","js/document","vega.frontend.main/init","re-frame.core/dispatch-sync","reagent-dev-tools.core/start!","re-frame.db/app-db","vega.frontend.main/stop"],"sourcesContent":["(ns vega.frontend.main\n  (:require [re-frame.core :as re-frame]\n            [re-frame.db]\n            [reagent.core :as r]\n            [reagent.dom :as rd]\n            [day8.re-frame.http-fx] ; Needed to register :http-xhrio to re-frame.\n            [reagent-dev-tools.core :as dev-tools]\n            [reitit.coercion.spec :as rss]\n            [reitit.frontend :as rf]\n            [reitit.frontend.easy :as rfe]\n            [reitit.frontend.controllers :as rfc]\n            [vega.frontend.util :as v-util]\n            [vega.frontend.components :as v-c]\n            [vega.frontend.data.cars :as v-cars]\n            [vega.frontend.data.seattle-weather :as v-s-w]\n            [\"react\" :as react]\n            [\"vega-embed\" :as vegaEmbed]\n            [\"vega\" :as vega]\n            [\"vega-lite\" :as vega-lite]\n            [\"vega-lite-api\" :as vega-lite-api :refer [vl]]\n            [hashp.core :include-macros true]\n            )\n  )\n\n;; NOTE: If mystic failures, do:\n;; Stop frontend watch and backend repl\n;; rm -rf node_modules\n;; just clean\n;; just init\n;; start frontend watch and backend repl\n;; connect cursive to backend repl and (reset)\n\n;; If Clojure namespaces do not show:\n;; Check in Cursive => Clojure Deps => you have the right aliases checked.\n;; Try: Refresh Clojure Deps Project.\n\n\n(re-frame/reg-sub\n  ::current-route\n  (fn [db]\n    (:current-route db)))\n\n(re-frame/reg-event-db\n  ::initialize-db\n  (fn [_ _]\n    (v-util/clog \"reg-event-db - ::initialize-db\")\n    {:current-route nil}))\n\n(re-frame/reg-event-db\n  ::navigated\n  (fn [db [_ new-match]]\n    (v-util/clog \"reg-event-db - ::navigated\")\n    (let [old-match (:current-route db)\n          new-path (:path new-match)\n          controllers (rfc/apply-controllers (:controllers old-match) new-match)]\n      (js/console.log (str \"new-path: \" new-path))\n      (cond-> (assoc db :current-route (assoc new-match :controllers controllers))\n              (= \"/\" new-path) (-> (assoc :login nil))))))\n\n(re-frame/reg-event-fx\n  ::navigate\n  (fn [_ [_ & route]]\n    (v-util/clog \"reg-event-fx - ::navigate\")\n    ;; See `navigate` effect in routes.cljs\n    {::navigate! route}))\n\n;;; Views ;;;\n\n(def simple-data\n  [{:a \"A\", :b 155}, {:a \"B\", :b 55}, {:a \"C\", :b 43},\n   {:a \"D\", :b 91}, {:a \"E\", :b 81}, {:a \"F\", :b 53},\n   {:a \"G\", :b 19}, {:a \"H\", :b 87}, {:a \"I\", :b 52},\n   ])\n\n(def simple-data2\n  [{:a \"A\", :b 55}, {:a \"B\", :b 155}, {:a \"C\", :b 43},\n   {:a \"D\", :b 91}, {:a \"E\", :b 181}, {:a \"F\", :b 53},\n   {:a \"G\", :b 99}, {:a \"H\", :b 187}, {:a \"I\", :b 52},\n   ])\n\n(defn bar-experiment-raw-spec [{:keys [data]}]\n  {:mark {:type \"bar\"},\n   :data {:values data}\n   :encoding {:x {:field \"b\", :type \"quantitative\"},\n              :y {:field \"a\", :type \"nominal\"}}})\n\n(defn bar-experiment-vega-lite-api [{:keys [data]}]\n  (-> v-c/my-vl\n      (.markBar)\n      (.data (clj->js data))\n      (.encode\n        (-> v-c/my-vl (.x) (.fieldQ \"b\"))\n        (-> v-c/my-vl (.y) (.fieldN \"a\")))))\n\n(defn cars-columns-vega-lite-api [{:keys [data]}]\n  (-> v-c/my-vl\n      (.markCircle)\n      (.data (clj->js data))\n      (.encode\n        (-> v-c/my-vl (.x) (.fieldQ \"Horsepower\"))\n        (-> v-c/my-vl (.y) (.fieldQ \"Miles_per_Gallon\"))\n        (-> v-c/my-vl (.column) (.field \"Origin\")))))\n\n(defn cars-counts-vega-lite-api [{:keys [data]}]\n  (-> v-c/my-vl\n      (.markBar)\n      (.data (clj->js data))\n      (.encode\n        (-> v-c/my-vl (.y) (.fieldN \"Origin\"))\n        (-> v-c/my-vl (.x) (.count)))))\n\n(defn cars-avg-miles-per-gallon-vega-lite-api [{:keys [data]}]\n  (-> v-c/my-vl\n      (.markBar)\n      (.data (clj->js data))\n      (.encode\n        (-> v-c/my-vl (.y) (.fieldN \"Origin\"))\n        (-> v-c/my-vl (.x) (.average \"Miles_per_Gallon\"))\n        )))\n\n(def weather-colors {:range [\"darkgray\" \"paleturquoise\" \"steelblue\" \"gold\" \"red\"]})\n\n(defn weather-bars-vega-lite-api [{:keys [data]}]\n  (-> v-c/my-vl\n      (.markBar)\n      (.data (clj->js data))\n      (.encode\n        (-> v-c/my-vl (.x) (.fieldO \"date\") (.timeUnit \"month\") (.axis (clj->js {:labelAngle -45 :formatType \"time\" :format \"%m\"})))\n        (-> v-c/my-vl (.y) (.count))\n        (-> v-c/my-vl (.color) (.fieldN \"weather\") (.scale (clj->js weather-colors))  ))))\n\n(defn weather-bars-%-vega-lite-api [{:keys [data]}]\n  (-> v-c/my-vl\n      (.markBar)\n      (.data (clj->js data))\n      (.encode\n        (-> v-c/my-vl (.x) (.fieldO \"date\") (.timeUnit \"month\") (.axis (clj->js {:labelAngle -45 :formatType \"time\" :format \"%m\"})))\n        (-> v-c/my-vl (.y) (.count) (.stack \"normalize\") )\n        (-> v-c/my-vl (.color) (.fieldN \"weather\") (.scale (clj->js weather-colors))  ))))\n\n(defn weather-temp-circles-vega-lite-api-1 [{:keys [data width height]}]\n  (-> v-c/my-vl\n      (.markCircle)\n      (.width width)\n      (.height height)\n      (.data (clj->js data))\n      (.encode\n        (-> v-c/my-vl (.x) (.fieldT \"date\") (.timeUnit \"monthdate\") (.axis (clj->js {:labelAngle -45 :formatType \"time\" :format \"%m\"})))\n        (-> v-c/my-vl (.y) (.fieldQ \"temp_max\"))\n        (-> v-c/my-vl (.color) (.fieldN \"weather\") (.scale (clj->js weather-colors))  ))))\n\n(defn weather-temp-circles-vega-lite-api-2 [{:keys [data width height]}]\n  (-> v-c/my-vl\n      (.markCircle)\n      (.width width)\n      (.height height)\n      (.data (clj->js data))\n      (.encode\n        (-> v-c/my-vl (.x) (.fieldT \"date\") (.timeUnit \"monthdate\") (.axis (clj->js {:labelAngle -45 :formatType \"time\" :format \"%m\"})))\n        (-> v-c/my-vl (.y) (.fieldQ \"temp_max\"))\n        (-> v-c/my-vl (.size) (.fieldQ \"precipitation\") (.scale (clj->js {:range [20, 300]})))\n        (-> v-c/my-vl (.color) (.fieldN \"weather\") (.scale (clj->js weather-colors))  ))))\n\n(defn weather-temp-circles-vega-lite-api-3 [{:keys [data]}]\n  (-> v-c/my-vl\n      (.markCircle)\n      (.data (clj->js data))\n      (.encode\n        (-> v-c/my-vl (.x) (.fieldO \"date\") (.timeUnit \"monthyear\") (.axis (clj->js {:labelAngle -45 :formatType \"time\" :format \"%Y-%m\"})))\n        (-> v-c/my-vl (.y) (.fieldQ \"temp_max\"))\n        (-> v-c/my-vl (.color) (.fieldN \"weather\") (.scale (clj->js weather-colors))  ))))\n\n(defn weather-condition-counts-vega-lite-api [{:keys [data]}]\n  (-> v-c/my-vl\n      (.markBar)\n      (.data (clj->js data))\n      (.encode\n        (-> v-c/my-vl (.x) (.count))\n        (-> v-c/my-vl (.y) (.fieldN \"weather\"))\n        (-> v-c/my-vl (.color) (.fieldN \"weather\") (.scale (clj->js weather-colors))))))\n\n(defn draw-it [graph title func-name data-name method]\n  [:div.box.mr-2.mb-2 {:id \"draw-it-box\"}\n   [:div\n    [:p.title.is-5 title]\n    [:ul\n     [:li (str \"function: \" func-name)]\n     [:li (str \"data: \" data-name)]\n     [:li (str \"method: \" method)]]\n    [:div.mt-4\n     graph]]])\n\n(defn vega-lite-api-render-it\n  \"This function uses vega-lite-api both to create the spec and also to render the spec to graph.\"\n  [func data {:keys [title func-name data-name]}]\n  (let [graph [v-c/vega-lite-api-render func data]]\n    [draw-it graph title func-name data-name \"vega-lite-api render\"]))\n\n(defn vega-lite-api-spec-and-vega-react-it\n  \"This function uses vega-lite-api to create the spec but uses vega-lite-wrapper to create the graph.\"\n  [func data {:keys [title func-name data-name]}]\n  (let [spec-obj (func data)\n        spec (js->clj (.toSpec spec-obj))\n        graph [:> v-c/vega-lite-react-wrapper-old-style spec]]\n    [draw-it graph title func-name data-name \"vega-lite-react-wrapper\"]))\n\n(defn vega-react-it-old-style\n  \"This function uses raw vega specification (without data) and injects it with data to vega-react wrapper to create the graph.\"\n  [raw-spec-func data {:keys [title func-name data-name]}]\n  (let [spec (raw-spec-func data)\n        graph (v-c/vega-lite-react-wrapper-old-style spec)]\n    [draw-it graph title func-name data-name \"vega-lite-react-wrapper\"]))\n\n(defn vega-react-it\n  \"This function uses raw vega specification (without data) and injects it with data to vega-react wrapper to create the graph.\"\n  [raw-spec-func data {:keys [title func-name data-name]}]\n  (let [spec (raw-spec-func data)\n        graph [:> v-c/vega-lite-react-wrapper spec]]\n    [draw-it graph title func-name data-name \"vega-lite-react-wrapper\"]))\n\n(defn home-page []\n  (v-util/clog \"home-page\")\n  (let [data-cars (-> @(re-frame/subscribe [::v-cars/data-cars]))\n        _ (when-not data-cars (re-frame/dispatch [::v-cars/get-data-cars]))\n        data-seattle-weather (-> @(re-frame/subscribe [::v-s-w/data-seattle-weather]))\n        _ (when-not data-cars (re-frame/dispatch [::v-s-w/get-data-seattle-weather]))]\n    ;; when: if we do not yet have cars do not show diagrams (Vega error)\n    (when (and data-cars data-seattle-weather)\n      [:section.section\n       [:div.columns.is-multiline.is-mobile {:id \"home-page-columns\"}\n        ;; Weather\n        [vega-lite-api-render-it weather-bars-vega-lite-api {:data data-seattle-weather}\n         {:title \"Weather, bars by month, vega-lite-api render\"\n          :func-name \"weather-bars-vega-lite-api\"\n          :data-name \"data-seattle-weather\"}]\n        [vega-lite-api-render-it weather-bars-%-vega-lite-api {:data data-seattle-weather}\n         {:title \"Weather, bars by month-%, vega-lite-api render\"\n          :func-name \"weather-bars-%-vega-lite-api\"\n          :data-name \"data-seattle-weather\"}]\n        [vega-lite-api-render-it weather-temp-circles-vega-lite-api-1 {:data data-seattle-weather :width 300 :height 300}\n         {:title \"Weather, temperatures, vega-lite-api render\"\n          :func-name \"weather-temp-circles-vega-lite-api-1\"\n          :data-name \"data-seattle-weather\"}]\n        [vega-lite-api-render-it weather-temp-circles-vega-lite-api-2 {:data data-seattle-weather :width 300 :height 300}\n         {:title \"Weather, temperatures, vega-lite-api render\"\n          :func-name \"weather-temp-circles-vega-lite-api-2\"\n          :data-name \"data-seattle-weather\"}]\n        [vega-lite-api-render-it weather-condition-counts-vega-lite-api {:data data-seattle-weather}\n         {:title \"Condition, counts, vega-lite-api render\"\n          :func-name \"weather-condition-counts-vega-lite-api\"\n          :data-name \"data-seattle-weather\"}]\n        [vega-lite-api-render-it weather-temp-circles-vega-lite-api-3 {:data data-seattle-weather}\n         {:title \"Weather, temperatures, vega-lite-api render\"\n          :func-name \"weather-temp-circles-vega-lite-api-3\"\n          :data-name \"data-seattle-weather\"}]\n\n        ;; Cars\n        [vega-react-it v-cars/simple-scatter {:data data-cars :width 300 :height 300}\n         {:title \"Scatter chart, vega-lite react-wrapper\"\n          :func-name \"v-cars/simple-scatter\"\n          :data-name \"data-cars\"}]\n        [vega-react-it v-cars/complex-scatter1 {:data data-cars :width 300 :height 300}\n         {:title \"Complex Scatter chart, vega-lite react-wrapper\"\n          :func-name \"v-cars/complex-scatter1\"\n          :data-name \"data-cars\"}]\n        [vega-lite-api-render-it cars-columns-vega-lite-api {:data data-cars}\n         {:title \"Cars, columns, vega-lite-api render\"\n          :func-name \"cars-columns-vega-lite-api\"\n          :data-name \"data-cars\"}]\n        [vega-lite-api-render-it cars-counts-vega-lite-api {:data data-cars}\n         {:title \"Cars, counts, vega-lite-api render\"\n          :func-name \"cars-counts-vega-lite-api\"\n          :data-name \"data-cars\"}]\n        [vega-lite-api-render-it cars-avg-miles-per-gallon-vega-lite-api {:data data-cars}\n         {:title \"Cars, averages, vega-lite-api render\"\n          :func-name \"cars-avg-miles-per-gallon-vega-lite-api\"\n          :data-name \"data-cars\"}]\n\n        ;; Bars\n        [vega-lite-api-render-it bar-experiment-vega-lite-api {:data simple-data}\n           {:title \"Bar, vega-lite-api render\"\n            :func-name \"bar-experiment-vega-lite-api\"\n            :data-name \"simple-data\"}]\n        [vega-lite-api-render-it bar-experiment-vega-lite-api {:data simple-data2}\n           {:title \"Same Bar, different data\"\n            :func-name \"bar-experiment-vega-lite-api\"\n            :data-name \"simple-data2\"}]\n        [vega-react-it-old-style bar-experiment-raw-spec {:data simple-data}\n           {:title \"Bar, vega-lite-react-wrapper, old style\"\n            :func-name \"bar-experiment-raw-spec\"\n            :data-name \"simple-data\"}]\n        [vega-react-it bar-experiment-raw-spec {:data simple-data}\n           {:title \"Bar, vega-lite-react-wrapper\"\n            :func-name \"bar-experiment-raw-spec\"\n            :data-name \"simple-data\"}]\n        [vega-lite-api-spec-and-vega-react-it bar-experiment-vega-lite-api {:data simple-data}\n           {:title \"Bar, vega-lite-react wrapper\"\n            :func-name \"bar-experiment-vega-lite-api\"\n            :data-name \"simple-data\"}]\n        ]])))\n\n;;; Effects ;;;\n\n;; Triggering navigation from events.\n(re-frame/reg-fx\n  ::navigate!\n  (fn [route]\n    (apply rfe/push-state route)))\n\n;;; Routes ;;;\n\n(defn href\n  \"Return relative url for given route. Url can be used in HTML links.\"\n  ([k]\n   (href k nil nil))\n  ([k params]\n   (href k params nil))\n  ([k params query]\n   (rfe/href k params query)))\n\n(def routes-dev\n  [\"/\"\n   [\"\"\n    {:name ::home\n     :view home-page\n     :link-text \"Home\"\n     :controllers\n     [{:start (fn [& params] (js/console.log (str \"Entering home page, params: \" params)))\n       :stop (fn [& params] (js/console.log (str \"Leaving home page, params: \" params)))}]}]])\n\n(def routes routes-dev)\n\n(defn on-navigate [new-match]\n  (v-util/clog \"on-navigate, new-match\" new-match)\n  (when new-match\n    (re-frame/dispatch [::navigated new-match])))\n\n(def router\n  (rf/router\n    routes\n    {:data {:coercion rss/coercion}}))\n\n(defn init-routes! []\n  (js/console.log \"initializing routes\")\n  (rfe/start!\n    router\n    on-navigate\n    {:use-fragment true}))\n\n(defn router-component [_] ; {:keys [router] :as params}\n  (v-util/clog \"ENTER router-component\")\n  (let [current-route @(re-frame/subscribe [::current-route])\n        path-params (:path-params current-route)\n        _ (v-util/clog \"router-component, path-params\" path-params)]\n    [:div\n     [:section.hero.is-small\n      [:div.hero-body\n       [:h1.title.has-text-centered\t \"Vega Experimentation\"]]]\n     ; NOTE: when you supply the current-route to the view it can parse path-params there (from path)\n     (when current-route\n       [(-> current-route :data :view) current-route])]))\n\n;;; Setup ;;;\n\n; TODO: https://clojureverse.org/t/how-to-deal-with-development-code-in-clojurescript/613\n; One thing is to check for goog.DEBUG, which is what the Google Closure library also uses.\n; In your ClojureScript compiler options you can add :closure-defines {goog.DEBUG false}\n; for the production build, and {goog.DEBUG true} for the dev build,\n; and then check for it in your code, (if goog.DEBUG ...)\n; TODO: Using backend configuration to get DEBUG info.\n(def debug? ^boolean goog.DEBUG)\n\n(def debug true)\n\n(defn dev-setup []\n  (js/console.log \"ENTER main dev-setup\")\n  (when debug\n    (enable-console-print!)\n    (println \"dev mode\")))\n\n\n(defn ^:dev/after-load start []\n  (js/console.log \"ENTER main start\")\n  (re-frame/clear-subscription-cache!)\n  (init-routes!)\n  (rd/render [router-component {:router router}\n                 (if (:open? @dev-tools/dev-state)\n                   {:style {:padding-bottom (str (:height @dev-tools/dev-state) \"px\")}})]\n                (.getElementById js/document \"app\")))\n\n(defn ^:export init []\n  (js/console.log \"ENTER main init\")\n  (re-frame/dispatch-sync [::initialize-db])\n  (dev-tools/start! {:state-atom re-frame.db/app-db})\n  (dev-setup)\n  (start))\n\n(defn ^:dev/before-load stop []\n  (js/console.log \"ENTER main stop\"))\n\n\n"]}