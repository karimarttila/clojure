{
"version":3,
"file":"goog.events.eventhandler.js",
"lineCount":121,
"mappings":"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",
"sources":["goog/events/eventhandler.js"],
"sourcesContent":["// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Class to create objects which want to handle multiple events\n * and have their listeners easily cleaned up via a dispose method.\n *\n * Example:\n * <pre>\n * function Something() {\n *   Something.base(this);\n *\n *   ... set up object ...\n *\n *   // Add event listeners\n *   this.listen(this.starEl, goog.events.EventType.CLICK, this.handleStar);\n *   this.listen(this.headerEl, goog.events.EventType.CLICK, this.expand);\n *   this.listen(this.collapseEl, goog.events.EventType.CLICK, this.collapse);\n *   this.listen(this.infoEl, goog.events.EventType.MOUSEOVER, this.showHover);\n *   this.listen(this.infoEl, goog.events.EventType.MOUSEOUT, this.hideHover);\n * }\n * goog.inherits(Something, goog.events.EventHandler);\n *\n * Something.prototype.disposeInternal = function() {\n *   Something.base(this, 'disposeInternal');\n *   goog.dom.removeNode(this.container);\n * };\n *\n *\n * // Then elsewhere:\n *\n * var activeSomething = null;\n * function openSomething() {\n *   activeSomething = new Something();\n * }\n *\n * function closeSomething() {\n *   if (activeSomething) {\n *     activeSomething.dispose();  // Remove event listeners\n *     activeSomething = null;\n *   }\n * }\n * </pre>\n *\n */\n\ngoog.provide('goog.events.EventHandler');\n\ngoog.forwardDeclare('goog.events.EventWrapper');\ngoog.require('goog.Disposable');\ngoog.require('goog.events');\ngoog.require('goog.object');\n\n\n\n/**\n * Super class for objects that want to easily manage a number of event\n * listeners.  It allows a short cut to listen and also provides a quick way\n * to remove all events listeners belonging to this object.\n * @param {SCOPE=} opt_scope Object in whose scope to call the listeners.\n * @constructor\n * @extends {goog.Disposable}\n * @template SCOPE\n */\ngoog.events.EventHandler = function(opt_scope) {\n  goog.Disposable.call(this);\n  // TODO(mknichel): Rename this to this.scope_ and fix the classes in google3\n  // that access this private variable. :(\n  this.handler_ = opt_scope;\n\n  /**\n   * Keys for events that are being listened to.\n   * @type {!Object<!goog.events.Key>}\n   * @private\n   */\n  this.keys_ = {};\n};\ngoog.inherits(goog.events.EventHandler, goog.Disposable);\n\n\n/**\n * Utility array used to unify the cases of listening for an array of types\n * and listening for a single event, without using recursion or allocating\n * an array each time.\n * @type {!Array<string>}\n * @const\n * @private\n */\ngoog.events.EventHandler.typeArray_ = [];\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted then the\n * EventHandler's handleEvent method will be used.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(this:SCOPE, EVENTOBJ):?|{handleEvent:function(?):?}|null=}\n *     opt_fn Optional callback function to be used as the listener or an object\n *     with handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)=} opt_options\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listen = function(\n    src, type, opt_fn, opt_options) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  return self.listen_(src, type, opt_fn, opt_options);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted then the\n * EventHandler's handleEvent method will be used.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(this:T, ?):?}|\n *     null|undefined} fn Optional callback function to be used as the\n *     listener or an object with handleEvent function.\n * @param {boolean|!AddEventListenerOptions|undefined} options\n * @param {T} scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template T, EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listenWithScope = function(\n    src, type, fn, options, scope) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Deprecate this function.\n  return self.listen_(src, type, fn, options, scope);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted then the\n * EventHandler's handleEvent method will be used.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null=} opt_fn\n *     Optional callback function to be used as the listener or an object with\n *     handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)=} opt_options\n * @param {Object=} opt_scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n * @private\n */\ngoog.events.EventHandler.prototype.listen_ = function(\n    src, type, opt_fn, opt_options, opt_scope) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  if (!goog.isArray(type)) {\n    if (type) {\n      goog.events.EventHandler.typeArray_[0] = type.toString();\n    }\n    type = goog.events.EventHandler.typeArray_;\n  }\n  for (var i = 0; i < type.length; i++) {\n    var listenerObj = goog.events.listen(\n        src, type[i], opt_fn || self.handleEvent, opt_options || false,\n        opt_scope || self.handler_ || self);\n\n    if (!listenerObj) {\n      // When goog.events.listen run on OFF_AND_FAIL or OFF_AND_SILENT\n      // (goog.events.CaptureSimulationMode) in IE8-, it will return null\n      // value.\n      return self;\n    }\n\n    var key = listenerObj.key;\n    self.keys_[key] = listenerObj;\n  }\n\n  return self;\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted, then the\n * EventHandler's handleEvent method will be used. After the event has fired the\n * event listener is removed from the target. If an array of event types is\n * provided, each event type will be listened to once.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(this:SCOPE, EVENTOBJ):?|{handleEvent:function(?):?}|null=}\n * opt_fn\n *    Optional callback function to be used as the listener or an object with\n *    handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)=} opt_options\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listenOnce = function(\n    src, type, opt_fn, opt_options) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  return self.listenOnce_(src, type, opt_fn, opt_options);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted, then the\n * EventHandler's handleEvent method will be used. After the event has fired the\n * event listener is removed from the target. If an array of event types is\n * provided, each event type will be listened to once.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(this:T, EVENTOBJ):?|{handleEvent:function(this:T, ?):?}|\n *     null|undefined} fn Optional callback function to be used as the\n *     listener or an object with handleEvent function.\n * @param {boolean|undefined} capture Optional whether to use capture phase.\n * @param {T} scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template T, EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.listenOnceWithScope = function(\n    src, type, fn, capture, scope) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Deprecate this function.\n  return self.listenOnce_(src, type, fn, capture, scope);\n};\n\n\n/**\n * Listen to an event on a Listenable.  If the function is omitted, then the\n * EventHandler's handleEvent method will be used. After the event has fired\n * the event listener is removed from the target. If an array of event types is\n * provided, each event type will be listened to once.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type to listen for or array of event types.\n * @param {function(EVENTOBJ):?|{handleEvent:function(?):?}|null=} opt_fn\n *    Optional callback function to be used as the listener or an object with\n *    handleEvent function.\n * @param {(boolean|!AddEventListenerOptions)=} opt_options\n * @param {Object=} opt_scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n * @private\n */\ngoog.events.EventHandler.prototype.listenOnce_ = function(\n    src, type, opt_fn, opt_options, opt_scope) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  if (goog.isArray(type)) {\n    for (var i = 0; i < type.length; i++) {\n      self.listenOnce_(src, type[i], opt_fn, opt_options, opt_scope);\n    }\n  } else {\n    var listenerObj = goog.events.listenOnce(\n        src, type, opt_fn || self.handleEvent, opt_options,\n        opt_scope || self.handler_ || self);\n    if (!listenerObj) {\n      // When goog.events.listen run on OFF_AND_FAIL or OFF_AND_SILENT\n      // (goog.events.CaptureSimulationMode) in IE8-, it will return null\n      // value.\n      return self;\n    }\n\n    var key = listenerObj.key;\n    self.keys_[key] = listenerObj;\n  }\n\n  return self;\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(this:SCOPE, ?):?|{handleEvent:function(?):?}|null} listener\n *     Callback method, or an object with a handleEvent function.\n * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to\n *     false).\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template THIS\n */\ngoog.events.EventHandler.prototype.listenWithWrapper = function(\n    src, wrapper, listener, opt_capt) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Remove the opt_scope from this function and then\n  // templatize it.\n  return self.listenWithWrapper_(src, wrapper, listener, opt_capt);\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(this:T, ?):?|{handleEvent:function(this:T, ?):?}|null}\n *     listener Optional callback function to be used as the\n *     listener or an object with handleEvent function.\n * @param {boolean|undefined} capture Optional whether to use capture phase.\n * @param {T} scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template T, THIS\n */\ngoog.events.EventHandler.prototype.listenWithWrapperAndScope = function(\n    src, wrapper, listener, capture, scope) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  // TODO(mknichel): Deprecate this function.\n  return self.listenWithWrapper_(src, wrapper, listener, capture, scope);\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(?):?|{handleEvent:function(?):?}|null} listener Callback\n *     method, or an object with a handleEvent function.\n * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to\n *     false).\n * @param {Object=} opt_scope Element in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template THIS\n * @private\n */\ngoog.events.EventHandler.prototype.listenWithWrapper_ = function(\n    src, wrapper, listener, opt_capt, opt_scope) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  wrapper.listen(\n      src, listener, opt_capt, opt_scope || self.handler_ || self, self);\n  return self;\n};\n\n\n/**\n * @return {number} Number of listeners registered by this handler.\n */\ngoog.events.EventHandler.prototype.getListenerCount = function() {\n  var count = 0;\n  for (var key in this.keys_) {\n    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n\n/**\n * Unlistens on an event.\n * @param {goog.events.ListenableType} src Event source.\n * @param {string|Array<string>|\n *     !goog.events.EventId<EVENTOBJ>|!Array<!goog.events.EventId<EVENTOBJ>>}\n *     type Event type or array of event types to unlisten to.\n * @param {function(this:?, EVENTOBJ):?|{handleEvent:function(?):?}|null=}\n *     opt_fn Optional callback function to be used as the listener or an object\n *     with handleEvent function.\n * @param {(boolean|!EventListenerOptions)=} opt_options\n * @param {Object=} opt_scope Object in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template EVENTOBJ, THIS\n */\ngoog.events.EventHandler.prototype.unlisten = function(\n    src, type, opt_fn, opt_options, opt_scope) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  if (goog.isArray(type)) {\n    for (var i = 0; i < type.length; i++) {\n      self.unlisten(src, type[i], opt_fn, opt_options, opt_scope);\n    }\n  } else {\n    var capture =\n        goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;\n    var listener = goog.events.getListener(\n        src, type, opt_fn || self.handleEvent, capture,\n        opt_scope || self.handler_ || self);\n\n    if (listener) {\n      goog.events.unlistenByKey(listener);\n      delete self.keys_[listener.key];\n    }\n  }\n\n  return self;\n};\n\n\n/**\n * Removes an event listener which was added with listenWithWrapper().\n *\n * @param {EventTarget|goog.events.EventTarget} src The target to stop\n *     listening to events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {function(?):?|{handleEvent:function(?):?}|null} listener The\n *     listener function to remove.\n * @param {boolean=} opt_capt In DOM-compliant browsers, this determines\n *     whether the listener is fired during the capture or bubble phase of the\n *     event.\n * @param {Object=} opt_scope Element in whose scope to call the listener.\n * @return {THIS} This object, allowing for chaining of calls.\n * @this {THIS}\n * @template THIS\n */\ngoog.events.EventHandler.prototype.unlistenWithWrapper = function(\n    src, wrapper, listener, opt_capt, opt_scope) {\n  var self = /** @type {!goog.events.EventHandler} */ (this);\n  wrapper.unlisten(\n      src, listener, opt_capt, opt_scope || self.handler_ || self, self);\n  return self;\n};\n\n\n/**\n * Unlistens to all events.\n */\ngoog.events.EventHandler.prototype.removeAll = function() {\n  goog.object.forEach(this.keys_, function(listenerObj, key) {\n    if (this.keys_.hasOwnProperty(key)) {\n      goog.events.unlistenByKey(listenerObj);\n    }\n  }, this);\n\n  this.keys_ = {};\n};\n\n\n/**\n * Disposes of this EventHandler and removes all listeners that it registered.\n * @override\n * @protected\n */\ngoog.events.EventHandler.prototype.disposeInternal = function() {\n  goog.events.EventHandler.superClass_.disposeInternal.call(this);\n  this.removeAll();\n};\n\n\n/**\n * Default event handler\n * @param {goog.events.Event} e Event object.\n */\ngoog.events.EventHandler.prototype.handleEvent = function(e) {\n  throw new Error('EventHandler.handleEvent not implemented');\n};\n"],
"names":["goog","provide","forwardDeclare","require","events","EventHandler","goog.events.EventHandler","opt_scope","Disposable","call","handler_","keys_","inherits","typeArray_","prototype","listen","goog.events.EventHandler.prototype.listen","src","type","opt_fn","opt_options","self","listen_","listenWithScope","goog.events.EventHandler.prototype.listenWithScope","fn","options","scope","goog.events.EventHandler.prototype.listen_","isArray","toString","i","length","listenerObj","handleEvent","key","listenOnce","goog.events.EventHandler.prototype.listenOnce","listenOnce_","listenOnceWithScope","goog.events.EventHandler.prototype.listenOnceWithScope","capture","goog.events.EventHandler.prototype.listenOnce_","listenWithWrapper","goog.events.EventHandler.prototype.listenWithWrapper","wrapper","listener","opt_capt","listenWithWrapper_","listenWithWrapperAndScope","goog.events.EventHandler.prototype.listenWithWrapperAndScope","goog.events.EventHandler.prototype.listenWithWrapper_","getListenerCount","goog.events.EventHandler.prototype.getListenerCount","count","Object","hasOwnProperty","unlisten","goog.events.EventHandler.prototype.unlisten","isObject","getListener","unlistenByKey","unlistenWithWrapper","goog.events.EventHandler.prototype.unlistenWithWrapper","removeAll","goog.events.EventHandler.prototype.removeAll","object","forEach","disposeInternal","goog.events.EventHandler.prototype.disposeInternal","superClass_","goog.events.EventHandler.prototype.handleEvent","e","Error"]
}
