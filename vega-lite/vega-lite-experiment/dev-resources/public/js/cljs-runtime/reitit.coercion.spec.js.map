{"version":3,"sources":["reitit/coercion/spec.cljc"],"mappings":"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","names":["reitit.coercion.spec/string-transformer","spec_tools.core.type_transformer","spec-tools.core/strip-extra-keys-transformer","spec-tools.core/string-transformer","reitit.coercion.spec/json-transformer","spec-tools.core/json-transformer","reitit.coercion.spec/strip-extra-keys-transformer","reitit.coercion.spec/no-op-transformer","js/reitit","js/reitit.coercion","js/reitit.coercion.spec","js/reitit.coercion.spec.t_reitit$coercion$spec80539","reitit.coercion.spec/t_reitit$coercion$spec80539","_80541","meta80540","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","reitit.coercion.spec/->t_reitit$coercion$spec80539","_","reitit$coercion$spec$IntoSpec$into_spec$dyn","x__4428__auto__","m__4429__auto__","reitit.coercion.spec/into-spec","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","reitit.coercion.spec/IntoSpec","this","name","reitit.coercion.spec/ensure-name","?name","or__4126__auto__","cljs.core.keyword","cljs.core/name","cljs.core.gensym","goog.object/set","cljs.core/PersistentArrayMap","cljs.core.dissoc","spec_tools.data_spec.spec","cljs.core/PersistentHashMap","cljs.core/PersistentVector","spec-tools.data-spec/Maybe","spec-tools.core/Spec","spec-tools.core/create-spec","reitit.coercion.spec/stringify-pred","pred","cljs.core/seq?","cljs.core/seq","js/reitit.coercion.spec.coerce-response?","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__80565","cljs.core/MultiFn","cljs.core.symbol","reitit.coercion.spec/coerce-response?","cljs.core/identity","reitit.coercion.spec/default-options","p__80581","map__80582","cljs.core.apply","cljs.core/hash-map","reitit.coercion.spec/create","transformers","coerce-response?","opts","js/reitit.coercion.spec.t_reitit$coercion$spec80586","reitit.coercion.spec/t_reitit$coercion$spec80586","_80588","meta80587","p__80592","map__80593","reitit.coercion.spec/->t_reitit$coercion$spec80586","specification","parameters","responses","G__80595","cljs.core/Keyword","spec_tools.swagger.core.swagger_spec","cljs.core.merge","cljs.core.into","cljs.core/empty","iter__4529__auto__","s__80597","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__80599","cljs.core/chunk-buffer","i__80598","vec__80600","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80596","cljs.core/chunk-rest","vec__80606","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","s__80611","b__80613","i__80612","vec__80614","iter__80610","vec__80621","response","$","clojure.set/rename-keys","p1__80578#","cljs.core.update","cljs.core.ex_info","model","spec","error","problems","cljs.core.comp","cljs.core/str","cljs.spec.alpha/form","cljs.core.assoc","p1__80579#","cljs.core.mapv","type","map__80638","formats","default","value","format","temp__5733__auto__","transformer","coerced","spec_tools.core.coerce","cljs.spec.alpha.valid_QMARK_","transformed","spec_tools.core.conform","cljs.spec.alpha/invalid?","spec_tools.core.explain_data","reitit.coercion/map->CoercionError","cljs.spec.alpha/unform","reitit.coercion.spec/coercion","cljs.core/chunk-first"],"sourcesContent":["(ns reitit.coercion.spec\n  (:require [clojure.spec.alpha :as s]\n            [spec-tools.core :as st #?@(:cljs [:refer [Spec]])]\n            [spec-tools.data-spec :as ds #?@(:cljs [:refer [Maybe]])]\n            [spec-tools.swagger.core :as swagger]\n            [reitit.coercion :as coercion]\n            [clojure.set :as set])\n  #?(:clj\n     (:import (spec_tools.core Spec)\n              (spec_tools.data_spec Maybe))))\n\n(def string-transformer\n  (st/type-transformer\n    st/strip-extra-keys-transformer\n    st/string-transformer))\n\n(def json-transformer\n  (st/type-transformer\n    st/strip-extra-keys-transformer\n    st/json-transformer))\n\n(def strip-extra-keys-transformer\n  st/strip-extra-keys-transformer)\n\n(def no-op-transformer\n  (reify\n    st/Transformer\n    (-name [_] ::no-op)\n    (-encoder [_ _ _])\n    (-decoder [_ _ _])))\n\n(defprotocol IntoSpec\n  (into-spec [this name]))\n\n(defn- ensure-name [?name]\n  (or ?name (keyword \"spec\" (name (gensym \"\")))))\n\n(extend-protocol IntoSpec\n\n  #?(:clj  clojure.lang.PersistentArrayMap\n     :cljs cljs.core.PersistentArrayMap)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  #?(:clj  clojure.lang.PersistentHashMap\n     :cljs cljs.core.PersistentHashMap)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  #?(:clj  clojure.lang.PersistentVector\n     :cljs cljs.core.PersistentVector)\n  (into-spec [this name]\n    (dissoc (ds/spec (ensure-name name) this) :name))\n\n  Maybe\n  (into-spec [this name]\n    (ds/spec (ensure-name name) this))\n\n  Spec\n  (into-spec [this _] this)\n\n  #?(:clj  Object\n     :cljs default)\n  (into-spec [this _]\n    (st/create-spec {:spec this}))\n\n  nil\n  (into-spec [this _]))\n\n(defn stringify-pred [pred]\n  (str (if (seq? pred) (seq pred) pred)))\n\n(defmulti coerce-response? identity :default ::default)\n(defmethod coerce-response? ::default [_] true)\n\n(def default-options\n  {:coerce-response? coerce-response?\n   :transformers {:body {:default strip-extra-keys-transformer\n                         :formats {\"application/json\" json-transformer}}\n                  :string {:default string-transformer}\n                  :response {:default no-op-transformer}}})\n\n(defn create [{:keys [transformers coerce-response?] :as opts}]\n  ^{:type ::coercion/coercion}\n  (reify coercion/Coercion\n    (-get-name [_] :spec)\n    (-get-options [_] opts)\n    (-get-apidocs [this specification {:keys [parameters responses]}]\n      (case specification\n        :swagger (swagger/swagger-spec\n                   (merge\n                     (if parameters\n                       {::swagger/parameters\n                        (into\n                          (empty parameters)\n                          (for [[k v] parameters]\n                            [k (coercion/-compile-model this v nil)]))})\n                     (if responses\n                       {::swagger/responses\n                        (into\n                          (empty responses)\n                          (for [[k response] responses]\n                            [k (as-> response $\n                                     (set/rename-keys $ {:body :schema})\n                                     (if (:schema $)\n                                       (update $ :schema #(coercion/-compile-model this % nil))\n                                       $))]))})))\n        (throw\n          (ex-info\n            (str \"Can't produce Spec apidocs for \" specification)\n            {:specification specification, :coercion :spec}))))\n    (-compile-model [_ model name]\n      (into-spec model name))\n    (-open-model [_ spec] spec)\n    (-encode-error [_ error]\n      (let [problems (-> error :problems ::s/problems)]\n        (-> error\n            (update :spec (comp str s/form))\n            (assoc :problems (mapv #(update % :pred stringify-pred) problems)))))\n    (-request-coercer [this type spec]\n      (let [spec (coercion/-compile-model this spec nil)\n            {:keys [formats default]} (transformers type)]\n        (fn [value format]\n          (if-let [transformer (or (get formats format) default)]\n            (let [coerced (st/coerce spec value transformer)]\n              (if (s/valid? spec coerced)\n                coerced\n                (let [transformed (st/conform spec coerced transformer)]\n                  (if (s/invalid? transformed)\n                    (let [problems (st/explain-data spec coerced transformer)]\n                      (coercion/map->CoercionError\n                        {:spec spec\n                         :problems problems}))\n                    (s/unform spec transformed)))))\n            value))))\n    (-response-coercer [this spec]\n      (if (coerce-response? spec)\n        (coercion/-request-coercer this :response spec)))))\n\n(def coercion (create default-options))\n"]}