{"version":3,"sources":["spec_tools/form.cljc"],"mappings":"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","names":["js/spec-tools","js/spec-tools.form","js/spec-tools.form.resolve-form","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__76228","cljs.core/MultiFn","cljs.core.symbol","spec-tools.form/resolve-form","x","cljs.core/qualified-keyword?","cljs.core/seq?","cljs.core/set?","or__4126__auto__","cljs.spec.alpha/spec?","cljs.spec.alpha/regex?","cljs.spec.alpha/form","_","cljs.core/any?","cljs.core/some?","cljs.core/number?","cljs.core/integer?","cljs.core/int?","cljs.core/pos-int?","cljs.core/neg-int?","cljs.core/nat-int?","cljs.core/float?","cljs.core/double?","cljs.core/boolean?","cljs.core/string?","cljs.core/ident?","cljs.core/simple-ident?","cljs.core/qualified-ident?","cljs.core/keyword?","cljs.core/simple-keyword?","cljs.core/symbol?","cljs.core/simple-symbol?","cljs.core/qualified-symbol?","cljs.core/uuid?","cljs.core/inst?","cljs.core/seqable?","cljs.core/indexed?","cljs.core/map?","cljs.core/vector?","cljs.core/list?","cljs.core/char?","cljs.core/nil?","cljs.core/false?","cljs.core/true?","cljs.core/zero?","cljs.core/coll?","cljs.core/empty?","cljs.core/associative?","cljs.core/sequential?"],"sourcesContent":["(ns spec-tools.form\n  (:require [clojure.spec.alpha :as s]))\n\n(defmulti resolve-form\n          (fn [x] (cond\n                    (or (qualified-keyword? x) (seq? x) (set? x)) ::identity\n                    (or (s/spec? x) (s/regex? x)) ::spec\n                    :else x))\n          :default ::default)\n\n(defmethod resolve-form ::spec [x] (s/form x))\n(defmethod resolve-form ::identity [x] x)\n(defmethod resolve-form ::default [_] ::s/unknown)\n\n(defmethod resolve-form any? [_] `any?)\n(defmethod resolve-form some? [_] `some?)\n(defmethod resolve-form number? [_] `number?)\n(defmethod resolve-form integer? [_] `integer?)\n(defmethod resolve-form int? [_] `int?)\n(defmethod resolve-form pos-int? [_] `pos-int?)\n(defmethod resolve-form neg-int? [_] `neg-int?)\n(defmethod resolve-form nat-int? [_] `nat-int?)\n(defmethod resolve-form float? [_] `float?)\n(defmethod resolve-form double? [_] `double?)\n(defmethod resolve-form boolean? [_] `boolean?)\n(defmethod resolve-form string? [_] `string?)\n(defmethod resolve-form ident? [_] `ident?)\n(defmethod resolve-form simple-ident? [_] `simple-ident?)\n(defmethod resolve-form qualified-ident? [_] `qualified-ident?)\n(defmethod resolve-form keyword? [_] `keyword?)\n(defmethod resolve-form simple-keyword? [_] `simple-keyword?)\n(defmethod resolve-form qualified-keyword? [_] `qualified-keyword?)\n(defmethod resolve-form symbol? [_] `symbol?)\n(defmethod resolve-form simple-symbol? [_] `simple-symbol?)\n(defmethod resolve-form qualified-symbol? [_] `qualified-symbol?)\n(defmethod resolve-form uuid? [_] `uuid?)\n#?(:clj (defmethod resolve-form uri? [_] `uri?))\n#?(:clj (defmethod resolve-form decimal? [_] `decimal?))\n(defmethod resolve-form inst? [_] `inst?)\n(defmethod resolve-form seqable? [_] `seqable?)\n(defmethod resolve-form indexed? [_] `indexed?)\n(defmethod resolve-form map? [_] `map?)\n(defmethod resolve-form vector? [_] `vector?)\n(defmethod resolve-form list? [_] `list?)\n(defmethod resolve-form seq? [_] `seq?)\n(defmethod resolve-form char? [_] `char?)\n(defmethod resolve-form set? [_] `set?)\n(defmethod resolve-form nil? [_] `nil?)\n(defmethod resolve-form false? [_] `false?)\n(defmethod resolve-form true? [_] `true?)\n(defmethod resolve-form zero? [_] `zero?)\n#?(:clj (defmethod resolve-form rational? [_] `rational?))\n(defmethod resolve-form coll? [_] `coll?)\n(defmethod resolve-form empty? [_] `empty?)\n(defmethod resolve-form associative? [_] `associative?)\n(defmethod resolve-form sequential? [_] `sequential?)\n#?(:clj (defmethod resolve-form ratio? [_] `ratio?))\n#?(:clj (defmethod resolve-form bytes? [_] `bytes?))\n"]}