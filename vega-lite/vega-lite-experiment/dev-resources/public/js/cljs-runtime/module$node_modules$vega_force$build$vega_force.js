shadow$provide.module$node_modules$vega_force$build$vega_force=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){"object"===typeof exports$jscomp$0&&"undefined"!==typeof module?factory(exports$jscomp$0,require("module$node_modules$vega_dataflow$build$vega_dataflow"),require("module$node_modules$vega_util$build$vega_util"),require("module$node_modules$d3_force$dist$d3_force")):"function"===typeof define&&define.amd?define(["exports","vega-dataflow","vega-util","d3-force"],
factory):(global="undefined"!==typeof globalThis?globalThis:global||self,factory((global.vega=global.vega||{},global.vega.transforms={}),global.vega,global.vega,global.d3))})(this,function(exports,vegaDataflow,vegaUtil,d3Force){function Force(params){vegaDataflow.Transform.call(this,null,params)}function rerun(df,op){return function(){return df.touch(op).run()}}function simulation(nodes,_){nodes=d3Force.forceSimulation(nodes);var stop=nodes.stop,restart=nodes.restart,stopped=!1;nodes.stopped=function(){return stopped};
nodes.restart=function(){return stopped=!1,restart()};nodes.stop=function(){return stopped=!0,stop()};return setup(nodes,_,!0).on("end",function(){return stopped=!0})}function setup(sim,_$jscomp$0,init,pulse$jscomp$0){var f=vegaUtil.array(_$jscomp$0.forces),n;var i=0;for(n=ForceParams.length;i<n;++i){var p=ForceParams[i];if("forces"!==p&&_$jscomp$0.modified(p))sim[p](_$jscomp$0[p])}i=0;for(n=f.length;i<n;++i){var name="forces"+i;if(init||_$jscomp$0.modified("forces",i)){p=void 0;var _=f[i];vegaUtil.hasOwnProperty(ForceMap,
_.force)||vegaUtil.error("Unrecognized force: "+_.force);var f$jscomp$0=ForceMap[_.force]();for(p in _)vegaUtil.isFunction(f$jscomp$0[p])&&setForceParam(f$jscomp$0[p],_[p],_);p=f$jscomp$0}else{if(p=pulse$jscomp$0)a:{f$jscomp$0=p=void 0;_=f[i];var pulse=pulse$jscomp$0;for(f$jscomp$0 in _)if(vegaUtil.isFunction(p=_[f$jscomp$0])&&pulse.modified(vegaUtil.accessorFields(p))){p=1;break a}p=0}p=p?sim.force(name):null}p&&sim.force(name,p)}for(n=sim.numForces||0;i<n;++i)sim.force("forces"+i,null);sim.numForces=
f.length;return sim}function setForceParam(f,v,_){f(vegaUtil.isFunction(v)?function(d){return v(d,_)}:v)}var ForceMap={center:d3Force.forceCenter,collide:d3Force.forceCollide,nbody:d3Force.forceManyBody,link:d3Force.forceLink,x:d3Force.forceX,y:d3Force.forceY},ForceParams=["alpha","alphaMin","alphaTarget","velocityDecay","forces"],ForceConfig=["static","iterations"],ForceOutput=["x","y","vx","vy"];Force.Definition={type:"Force",metadata:{modifies:!0},params:[{name:"static",type:"boolean","default":!1},
{name:"restart",type:"boolean","default":!1},{name:"iterations",type:"number","default":300},{name:"alpha",type:"number","default":1},{name:"alphaMin",type:"number","default":.001},{name:"alphaTarget",type:"number","default":0},{name:"velocityDecay",type:"number","default":.4},{name:"forces",type:"param",array:!0,params:[{key:{force:"center"},params:[{name:"x",type:"number","default":0},{name:"y",type:"number","default":0}]},{key:{force:"collide"},params:[{name:"radius",type:"number",expr:!0},{name:"strength",
type:"number","default":.7},{name:"iterations",type:"number","default":1}]},{key:{force:"nbody"},params:[{name:"strength",type:"number","default":-30},{name:"theta",type:"number","default":.9},{name:"distanceMin",type:"number","default":1},{name:"distanceMax",type:"number"}]},{key:{force:"link"},params:[{name:"links",type:"data"},{name:"id",type:"field"},{name:"distance",type:"number","default":30,expr:!0},{name:"strength",type:"number",expr:!0},{name:"iterations",type:"number","default":1}]},{key:{force:"x"},
params:[{name:"strength",type:"number","default":.1},{name:"x",type:"field"}]},{key:{force:"y"},params:[{name:"strength",type:"number","default":.1},{name:"y",type:"field"}]}]},{name:"as",type:"string",array:!0,modify:!1,"default":ForceOutput}]};vegaUtil.inherits(Force,vegaDataflow.Transform,{transform:function(_,pulse){var sim=this.value,change=pulse.changed(pulse.ADD_REM),params=_.modified(ForceParams),iters=_.iterations||300;sim?(change&&(pulse.modifies("index"),sim.nodes(pulse.source)),(params||
pulse.changed(pulse.MOD))&&setup(sim,_,0,pulse)):(this.value=sim=simulation(pulse.source,_),sim.on("tick",rerun(pulse.dataflow,this)),_.static||(change=!0,sim.tick()),pulse.modifies("index"));if(params||change||_.modified(ForceConfig)||pulse.changed()&&_.restart)if(sim.alpha(Math.max(sim.alpha(),_.alpha||1)).alphaDecay(1-Math.pow(sim.alphaMin(),1/iters)),_.static)for(sim.stop();0<=--iters;)sim.tick();else if(sim.stopped()&&sim.restart(),!change)return pulse.StopPropagation;return this.finish(_,pulse)},
finish:function(_,pulse){for(var dataflow=pulse.dataflow,args=this._argops,j=0,m=args.length,arg;j<m;++j)if(arg=args[j],"forces"===arg.name&&"link"===arg.op._argval.force){arg=arg.op._argops;for(var i=0,n=arg.length,op;i<n;++i)if("links"===arg[i].name&&(op=arg[i].op.source)){dataflow.pulse(op,dataflow.changeset().reflow());break}}return pulse.reflow(_.modified()).modifies(ForceOutput)}});exports.force=Force;Object.defineProperty(exports,"__esModule",{value:!0})})}
//# sourceMappingURL=module$node_modules$vega_force$build$vega_force.js.map
