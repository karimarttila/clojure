{"version":3,"sources":["shadow/cljs/devtools/client/shared.cljs"],"mappings":"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","names":["shadow$cljs$devtools$client$shared$IRemote$remote_open$dyn","x__4428__auto__","m__4429__auto__","shadow.cljs.devtools.client.shared/remote-open","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","shadow$cljs$devtools$client$shared$IRemote$remote_msg$dyn","shadow.cljs.devtools.client.shared/remote-msg","shadow$cljs$devtools$client$shared$IRemote$remote_close$dyn","shadow.cljs.devtools.client.shared/remote-close","shadow$cljs$devtools$client$shared$IRemote$remote_error$dyn","shadow.cljs.devtools.client.shared/remote-error","shadow.cljs.devtools.client.shared/IRemote","this","e","msg","shadow$cljs$devtools$client$shared$IHostSpecific$do_repl_init$dyn","shadow.cljs.devtools.client.shared/do-repl-init","shadow$cljs$devtools$client$shared$IHostSpecific$do_repl_require$dyn","shadow.cljs.devtools.client.shared/do-repl-require","shadow$cljs$devtools$client$shared$IHostSpecific$do_invoke$dyn","shadow.cljs.devtools.client.shared/do-invoke","shadow.cljs.devtools.client.shared/IHostSpecific","action","done","error","require-msg","invoke-msg","shadow.cljs.devtools.client.shared/load-sources","runtime","sources","callback","shadow.remote.runtime.shared.call","shadow.cljs.devtools.client.env/worker-client-id","cljs.core.into","cljs.core.map","p__72901","map__72902","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.shared","js/shadow.cljs.devtools.client.shared.runtime-ref","shadow.cljs.devtools.client.shared/runtime-ref","cljs.core.atom","js/shadow.cljs.devtools.client.shared.plugins-ref","shadow.cljs.devtools.client.shared/plugins-ref","p__72904","map__72905","shadow.cljs.devtools.client.shared/start-all-plugins!","state-ref","cljs.core/deref","started-set","cljs.core/set","cljs.core/keys","plugins","plugins-set","pending-set","clojure.set.difference","cljs.core/empty?","cljs.core.reduce","plugin-id","map__72917","depends-on","init-fn","plugin","cljs.core/some","start-arg","cljs.core.assoc","cljs.core/select-keys","started","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core.disj","js/Error","shadow.cljs.devtools.client.shared/add-plugin!","stop-fn","cljs.core/Keyword","cljs.core/set?","cljs.core/fn?","temp__5739__auto__","cljs.core.get_in","map__72923","old","cljs.core/update","cljs.core/dissoc","cljs.core/assoc","shadow.cljs.devtools.client.shared/transit-read","data","t","cognitect.transit.reader","cognitect.transit/read","shadow.cljs.devtools.client.shared/transit-str","obj","w","cognitect.transit.writer","cognitect.transit/write","shadow.cljs.devtools.client.shared/continue!","state","shadow.cljs.devtools.client.shared/interpret-actions","p__72929","map__72930","shadow.cljs.devtools.client.shared/abort!","ex","cljs.core.dissoc","G__72932","shadow.cljs.devtools.client.shared/handle-invoke","res","cljs.core.update","cljs.core/conj","shadow.cljs.devtools.client.shared/handle-repl-invoke","e72933","ret","cljs.core/*3","cljs.core/*2","cljs.core/*1","cljs.core/*e","p__72936","p__72937","map__72938","map__72939","shadow.cljs.devtools.client.shared/interpret-action","type","G__72944","map__72945","ns","map__72948","internal","cljs.core/into","G__72950","cljs.core/not","e72951","repl","G__72952","cljs.core.ex_info","p__72953","map__72954","queue","warnings","map__72959","js/Date.now","G__72961","cljs.core/seq","shadow.cljs.devtools.client.env/ignore-warnings","map__72962","G__72964","cljs.core/first","cljs.core/rest","p__72965","map__72967","shadow.cljs.devtools.client.shared/setup-actions","input","actions","cljs.core.mapcat","cljs.core/vec","this__4380__auto__","k__4381__auto__","this__4382__auto__","k72977","else__4383__auto__","G__72998","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","ret__4402__auto__","p__72999","vec__73000","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__72976","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this72978","other72979","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__73027","cljs.core/keyword-identical?","expr__73028","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","shadow.cljs.devtools.client.shared/Runtime","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__72983","extmap__4419__auto__","G__73034","cljs.core/record?","shadow.cljs.devtools.client.shared/->Runtime","shadow.cljs.devtools.client.shared/map->Runtime","map__73015","ws-state","ws-connected","ws-send-fn","js/console.warn","s","e73021","key","spec","shadow.remote.runtime.shared/add-extension","shadow.remote.runtime.shared/del-extension","p__73007","map__73008","ex-oid","ex-client-id","ex-data","report","G__73010","G__73011","shadow.remote.runtime.shared/now","text","shadow.remote.runtime.shared/process","js/console.log","cljs.core/inc","shadow.remote.runtime.shared/trigger!","js/console.error","map__72987","ws-connecting","ws-connect-timeout","shutdown","stale","ws-stop-fn","ws-start-fn","js/clearTimeout","after","map__72994","js/setTimeout","js/shadow.cljs.devtools.client.shared.print-subs","shadow.cljs.devtools.client.shared/print-subs","p__73039","map__73040","shadow.cljs.devtools.client.shared/stop-runtime!","map__73042","interval","js/clearInterval","cljs.core/reduce-kv","_","map__73044","shadow.cljs.devtools.client.shared/init-runtime!","client-info","cljs.core/reset!","p1__73046#","shadow.remote.runtime.obj-support/start","shadow.remote.runtime.obj-support/stop","p__73062","map__73063","obj-support","shadow.remote.runtime.tap-support/start","shadow.remote.runtime.tap-support/stop","p__73072","map__73073","shadow.remote.runtime.eval-support/start","shadow.remote.runtime.eval-support/stop","cljs.core.keyword","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.remote.runtime.shared/init-state","G__73082","shadow.remote.runtime.shared/add-defaults","idle-fn","map__73086","ws-last-msg","and__4115__auto__","shadow.remote.runtime.shared/run-on-idle","js/setInterval","js/goog.global.cljs_eval","opts","cljs.core/map?","cljs.core/object?","cljs.core.symbol","goog.object/get","js/Promise","resolve","reject","shadow.remote.runtime.api/cljs-eval","p__73092","map__73093","result","results","info","G__73095","cljs.core/last","p__73096","map__73097","from","shadow.remote.runtime.shared/relay-msg","p__73099","map__73100","cljs.core/disj","p__73102","map__73104","event-op","client-id","p__73107","map__73108","shadow.cljs.devtools.client.env/reset-print-fns!","shadow.cljs.devtools.client.env/set-print-fns!","stream","subs"],"sourcesContent":["(ns shadow.cljs.devtools.client.shared\n  (:require\n    [goog.object :as gobj]\n    [cognitect.transit :as transit]\n    [clojure.set :as set]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.remote.runtime.api :as api]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.cljs.js-builtins]\n    [shadow.remote.runtime.obj-support :as obj-support]\n    [shadow.remote.runtime.tap-support :as tap-support]\n    [shadow.remote.runtime.eval-support :as eval-support]))\n\n(defprotocol IRemote\n  (remote-open [this e])\n  (remote-msg [this msg])\n  (remote-close [this e])\n  (remote-error [this e]))\n\n(defprotocol IHostSpecific\n  (do-repl-init [this action done error])\n  (do-repl-require [this require-msg done error])\n  (do-invoke [this invoke-msg]))\n\n(defn load-sources [runtime sources callback]\n  (shared/call runtime\n    {:op :cljs-load-sources\n     :to env/worker-client-id\n     :sources (into [] (map :resource-id) sources)}\n    {:cljs-sources\n     (fn [{:keys [sources] :as msg}]\n       (callback sources))}))\n\n(defonce runtime-ref (atom nil))\n(defonce plugins-ref (atom {}))\n\n(defn start-all-plugins! [{:keys [state-ref] :as runtime}]\n  (let [started-set (set (keys (::plugins @state-ref)))\n        plugins @plugins-ref\n        plugins-set (set (keys plugins))\n        pending-set (set/difference plugins-set started-set)]\n\n    ;; FIXME: this is dumb, should properly sort things in dependency order\n    ;; instead of looping over\n    (loop [pending-set pending-set]\n      (cond\n        (empty? pending-set)\n        ::done!\n\n        :else\n        (-> (reduce\n              (fn [pending-set plugin-id]\n                (let [{:keys [depends-on init-fn] :as plugin} (get plugins plugin-id)]\n                  (if (some pending-set depends-on)\n                    pending-set\n                    (let [start-arg (assoc (select-keys (::plugins @state-ref) depends-on) :runtime runtime)\n                          started (init-fn start-arg)]\n                      (swap! state-ref assoc-in [::plugins plugin-id] started)\n                      (disj pending-set plugin-id)))))\n              pending-set\n              pending-set)\n            (recur))))))\n\n;; generic plugin mechanism\n;; runtime already has extensions but requires access to runtime\n;; plugin decouple the lifecycle so they can be created wherever\n(defn add-plugin!\n  [plugin-id depends-on init-fn stop-fn]\n  {:pre [(keyword? plugin-id)\n         (set? depends-on)\n         (fn? init-fn)\n         (fn? stop-fn)]}\n\n  (when-some [runtime @runtime-ref]\n    (when-some [started (get-in runtime [::plugins plugin-id])]\n      (let [{:keys [stop-fn] :as old} (get @plugins-ref plugin-id)]\n        (stop-fn started)\n        (swap! runtime-ref update ::plugins dissoc plugin-id))))\n\n  (swap! plugins-ref assoc plugin-id\n    {:ext-id plugin-id\n     :depends-on depends-on\n     :init-fn init-fn\n     :stop-fn stop-fn})\n\n  ;; in case runtime is already started\n  (when-some [runtime @runtime-ref]\n    (start-all-plugins! runtime)))\n\n(defn transit-read [data]\n  (let [t (transit/reader :json)]\n    (transit/read t data)))\n\n(defn transit-str [obj]\n  (let [w (transit/writer :json)]\n    (transit/write w obj)))\n\n(declare interpret-actions)\n\n(defn continue! [state]\n  (interpret-actions state))\n\n(defn abort! [{:keys [callback] :as state} action ex]\n  (-> state\n      (assoc :result :runtime-error\n             :ex ex\n             :ex-action action)\n      (dissoc :runtime :callback)\n      (callback)))\n\n(defn handle-invoke [state runtime action]\n  (let [res (do-invoke runtime action)]\n    (update state :results conj res)))\n\n(defn handle-repl-invoke [state runtime action]\n  (try\n    (let [ret (do-invoke runtime action)]\n\n      ;; FIXME: these are nonsense with multiple sessions. refactor this properly\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (if (:internal action)\n        state\n        (update state :results conj ret)))\n\n    (catch :default e\n      (set! *e e)\n      (throw e))))\n\n(defn interpret-action\n  [{:keys [runtime] :as state}\n   {:keys [type] :as action}]\n  (case type\n    :repl/init\n    (do-repl-init runtime action\n      (fn []\n        (swap! (:state-ref runtime) assoc :init-complete true)\n        (continue! state))\n      (fn [ex]\n        (abort! state action ex)))\n\n    :repl/set-ns\n    (let [{:keys [ns]} action]\n      (-> state\n          (assoc :ns ns)\n          (update :results conj nil)\n          (continue!)))\n\n    :repl/require\n    (let [{:keys [internal]} action]\n      (do-repl-require runtime action\n        (fn [sources]\n          (-> state\n              (update :loaded-sources into sources)\n              (cond->\n                ;; (require '...) has a result\n                ;; (ns foo.bar (:require ...)) does not since ns has the result\n                (not internal)\n                (update :results conj nil))\n              (continue!)))\n        (fn [ex]\n          (abort! state action ex))))\n\n    :repl/invoke\n    (try\n      (let [repl (get-in state [:input :repl])]\n        (-> state\n            (cond->\n              repl\n              (handle-repl-invoke runtime action)\n              (not repl)\n              (handle-invoke runtime action))\n            (continue!)))\n      (catch :default ex\n        (abort! state action ex)))\n\n    (throw (ex-info \"unhandled repl action\" {:state state :action action}))))\n\n(defn interpret-actions [{:keys [queue warnings] :as state}]\n  (cond\n    (empty? queue)\n    (let [{:keys [callback]} state]\n      (-> state\n          (dissoc :runtime :callback :queue)\n          (assoc :time-finish (js/Date.now))\n          (callback)))\n\n    (and (seq warnings) (false? env/ignore-warnings))\n    (let [{:keys [callback]} state]\n      (-> state\n          (dissoc :runtime :callback :queue)\n          (assoc :result :warnings\n                 :warnings warnings\n                 :time-finish (js/Date.now))\n          (callback)))\n\n    :else\n    (let [action (first queue)\n          state (update state :queue rest)]\n      (interpret-action state action))))\n\n(defn setup-actions [runtime input {:keys [actions] :as msg} callback]\n  {:runtime runtime\n   :callback callback\n   :input input\n   :msg msg\n   :time-start (js/Date.now) ;; time used for prepl\n   :queue actions\n   :result :ok\n   :results []\n   :ns (:ns input)\n   :warnings\n   (->> actions\n        (mapcat :warnings)\n        (vec))\n   :loaded-sources []})\n\n(defrecord Runtime [state-ref]\n  api/IRuntime\n  (relay-msg [this msg]\n    (let [{::keys [ws-state ws-connected ws-send-fn] :as state} @state-ref]\n      (if-not ws-connected\n        (js/console.warn \"shadow-cljs - dropped ws message, not connected\" msg state)\n        (let [s (try\n                  (transit-str msg)\n                  (catch :default e\n                    (throw (ex-info \"failed to encode relay msg\" {:msg msg}))))]\n          ;; (js/console.log \"sending\" msg state)\n          (ws-send-fn ws-state s)))))\n\n  (add-extension [runtime key spec]\n    (shared/add-extension runtime key spec))\n  (del-extension [runtime key]\n    (shared/del-extension runtime key))\n\n  api/IEvalCLJS\n  (-cljs-eval [this input callback]\n    ;; FIXME: define what input is supposed to look like\n    ;; {:code \"(some-cljs)\" :ns foo.bar}\n    (shared/call this\n      {:op :cljs-compile\n       :to env/worker-client-id\n       :input input\n       :include-init (not (:init-complete @state-ref))}\n\n      {:cljs-compile-result\n       (fn [msg]\n         (-> (setup-actions this input msg callback)\n             (interpret-actions)))\n\n       ;; going from cljs specific error\n       :cljs-compile-error\n       (fn [{:keys [ex-oid ex-client-id ex-data report]}]\n         (callback\n           ;; to more generic error, that CLJ can also use\n           {:result :compile-error\n            :ex-oid ex-oid\n            :ex-client-id ex-client-id\n            :ex-data ex-data\n            :report report}))\n\n       :client-not-found\n       (fn [msg]\n         (callback\n           {:result :worker-not-found}))}))\n\n  IRemote\n  (remote-open [this e]\n    ;; (js/console.log \"runtime remote-open\" this e)\n    (swap! state-ref assoc\n      ::ws-errors 0\n      ::ws-connecting false\n      ::ws-connected true\n      ::ws-last-msg (shared/now)))\n\n  (remote-msg [this text]\n    (let [msg (transit-read text)]\n      ;; (js/console.log \"runtime remote-msg\" this msg)\n      (swap! state-ref assoc ::ws-last-msg (shared/now))\n      (when (= :access-denied (:op msg))\n        (swap! state-ref assoc ::stale true))\n      (shared/process this msg)))\n\n  (remote-close [this e]\n    ;; (js/console.log \"runtime remote-close\" @state-ref e)\n    (swap! state-ref dissoc ::ws-connected ::ws-connecting)\n\n    ;; after 3 failed attempts just stop\n    (if (>= 3 (::ws-errors @state-ref))\n      (.schedule-connect! this 5000)\n      (js/console.log \"giving up trying to connect\")))\n\n  (remote-error [this e]\n    (swap! state-ref update ::ws-errors inc)\n\n    (shared/trigger! this :on-disconnect)\n\n    (js/console.error \"shadow-cljs - remote-error\" e))\n\n  Object\n  (attempt-connect! [this]\n    (let [{::keys [ws-connecting ws-connect-timeout shutdown stale ws-state ws-stop-fn ws-start-fn]\n           :as state}\n          @state-ref]\n\n      ;; (js/console.log \"attempt-connect!\" state)\n      (when (and (not shutdown)\n                 (not stale)\n                 (not ws-connecting))\n\n        (when ws-connect-timeout\n          (js/clearTimeout ws-connect-timeout))\n\n        (when (some? ws-state)\n          (ws-stop-fn ws-state))\n\n        (let [ws-state (ws-start-fn this)]\n          (swap! state-ref assoc\n            ::ws-connecting true\n            ::ws-connected false\n            ::ws-state ws-state)))))\n\n  (schedule-connect! [this after]\n    ;; (js/console.log \"scheduling next connect\" after @state-ref)\n    (let [{::keys [ws-connect-timeout stale shutdown]} @state-ref]\n      (when ws-connect-timeout\n        (js/clearTimeout ws-connect-timeout))\n\n      (when (and (not stale) (not shutdown))\n        (shared/trigger! this :on-reconnect)\n\n        (swap! state-ref assoc\n          ::ws-connect-timeout\n          (js/setTimeout\n            (fn []\n              ;; (js/console.log \"attempt-connect after schedule timeout\" @state-ref)\n              (swap! state-ref dissoc ::ws-connect-timeout)\n              (.attempt-connect! this))\n            after))))))\n\n(defonce print-subs (atom #{}))\n\n(defn stop-runtime! [{:keys [state-ref] :as runtime}]\n  (let [{::keys [ws-state ws-stop-fn interval plugins]} @state-ref]\n\n    (js/clearInterval interval)\n\n    (when (some? ws-state)\n      (ws-stop-fn ws-state))\n\n    (reduce-kv\n      (fn [_ plugin-id started]\n        ;; FIXME: should stop in reverse started order\n        (let [{:keys [stop-fn]} (get @plugins-ref plugin-id)]\n          (stop-fn started)))\n      nil\n      plugins)\n\n    (swap! state-ref assoc ::shutdown true)))\n\n(defn init-runtime! [client-info ws-start-fn ws-send-fn ws-stop-fn]\n  ;; in case of hot-reload or reconnect, clean up previous runtime\n  (when-some [runtime @runtime-ref]\n    (stop-runtime! runtime)\n    (reset! runtime-ref nil))\n\n  (add-plugin! :obj-support #{}\n    #(obj-support/start (:runtime %))\n    obj-support/stop)\n\n  (add-plugin! :tap-support #{:obj-support}\n    (fn [{:keys [runtime obj-support]}]\n      (tap-support/start runtime obj-support))\n    tap-support/stop)\n\n  (add-plugin! :eval-support #{:obj-support}\n    (fn [{:keys [runtime obj-support]}]\n      (eval-support/start runtime obj-support))\n    eval-support/stop)\n\n  (let [state-ref\n        (-> (assoc client-info\n              :type :runtime\n              :lang :cljs\n              :build-id (keyword env/build-id)\n              :proc-id env/proc-id)\n            (shared/init-state)\n            (assoc ::shutdown false\n                   ::stale false\n                   ::plugins {}\n                   ::ws-errors 0\n                   ::ws-start-fn ws-start-fn\n                   ::ws-send-fn ws-send-fn\n                   ::ws-stop-fn ws-stop-fn)\n            (atom))\n\n        runtime\n        (doto (->Runtime state-ref)\n          (shared/add-defaults))\n\n        idle-fn\n        (fn []\n          (let [{::keys [shutdown ws-connected ws-last-msg ws-connect-timeout] :as state} @state-ref]\n            (when (and (not ws-connect-timeout) (not shutdown) ws-connected (> (shared/now) (+ ws-last-msg 20000)))\n              ;; should be receiving pings, if not assume dead ws\n              ;; (js/console.log \"attempting reconnect because of idle\" state)\n              ;; wait a little, otherwise might get ERR_INTERNET_DISCONNECTED after waking from sleep\n              (swap! state-ref dissoc ::ws-connected)\n              (.schedule-connect! runtime 2000))\n\n            (shared/run-on-idle state-ref)))]\n\n    (swap! state-ref assoc ::interval (js/setInterval idle-fn 1000))\n\n    (reset! runtime-ref runtime)\n\n    ;; test exporting this into the global so potential consumers\n    ;; don't have to worry about importing a namespace that shouldn't be in release builds\n    ;; can't bind cljs.core/eval since that expects a CLJ form not a string\n    ;; which we could technically also support but I don't want to assume the user\n    ;; knows how to read properly. just accepting a string and optional ns is much easier\n    (set! js/goog.global.cljs_eval\n      (fn [input opts]\n        (let [input\n              (cond\n                ;; preferred when calling from CLJS\n                (map? input)\n                input\n\n                ;; just calling with code\n                (and (string? input) (not opts))\n                {:code input :ns 'cljs.user}\n\n                ;; when calling from JS {ns: \"cljs.user\"}\n                ;; FIXME: other opts?\n                (and (string? input) (object? opts))\n                {:code input :ns (symbol (gobj/get opts \"ns\"))}\n\n                :else\n                (throw (ex-info \"invalid arguments, call cljs_eval(string, opts-obj) or cljs_eval(map)\" {:input input :opts opts})))]\n\n          (js/Promise.\n            (fn [resolve reject]\n              (api/cljs-eval runtime input\n                (fn [{:keys [result results] :as info}]\n                  (if (= :ok result)\n                    ;; FIXME: option to not throw away multiple results?\n                    ;; user may do cljs_eval(\"1 2 3\") and will only get 3 but we have [1 2 3]\n                    (resolve (last results))\n                    (reject info)))))))))\n\n    (api/add-extension runtime\n      ::print-support\n      {:ops\n       {:runtime-print-sub\n        (fn [{:keys [from] :as msg}]\n          (swap! print-subs conj from)\n          (shared/relay-msg runtime\n            {:op :request-notify\n             :notify-op ::runtime-print-disconnect\n             :query [:eq :client-id from]}))\n        :runtime-print-unsub\n        (fn [{:keys [from] :as msg}]\n          (swap! print-subs disj from))\n        ::runtime-print-disconnect\n        (fn [{:keys [event-op client-id]}]\n          (when (= :client-disconnect event-op)\n            (swap! print-subs disj client-id)))}\n\n       ;; just in case the disconnect notify comes after trying to send something\n       :on-client-not-found\n       (fn [{:keys [client-id]}]\n         (swap! print-subs disj client-id))})\n\n    ;; in case this was hot reloaded, restore previous state first\n    (env/reset-print-fns!)\n\n    (env/set-print-fns!\n      (fn [stream text]\n        (let [subs @print-subs]\n          ;; (js/console.log \"print\" stream text subs)\n          (when (seq subs)\n            (shared/relay-msg runtime\n              {:op :runtime-print\n               :to subs\n               :stream stream\n               :text text})))))\n\n    (api/add-extension runtime\n      ::shared\n      {:on-welcome\n       (fn []\n         (shared/relay-msg runtime\n           {:op :request-notify\n            :notify-op ::env/worker-notify\n            :query [:eq :shadow.cljs.model/worker-for (keyword env/build-id)]}))})\n\n    (start-all-plugins! runtime)\n\n    ;; (js/console.log \"first connect from init-runtime!\")\n    (.attempt-connect! runtime)))\n\n"]}