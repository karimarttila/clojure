{"version":3,"sources":["reitit/coercion.cljc"],"mappings":"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","names":["reitit$coercion$Coercion$_get_name$dyn","x__4428__auto__","m__4429__auto__","reitit.coercion/-get-name","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","reitit$coercion$Coercion$_get_options$dyn","reitit.coercion/-get-options","reitit$coercion$Coercion$_get_apidocs$dyn","reitit.coercion/-get-apidocs","reitit$coercion$Coercion$_compile_model$dyn","reitit.coercion/-compile-model","reitit$coercion$Coercion$_open_model$dyn","reitit.coercion/-open-model","reitit$coercion$Coercion$_encode_error$dyn","reitit.coercion/-encode-error","reitit$coercion$Coercion$_request_coercer$dyn","reitit.coercion/-request-coercer","reitit$coercion$Coercion$_response_coercer$dyn","reitit.coercion/-response-coercer","reitit.coercion/Coercion","this","specification","data","model","name","error","type","this__4380__auto__","k__4381__auto__","this__4382__auto__","k80396","else__4383__auto__","G__80400","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__80401","vec__80402","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","G__80395","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this80397","other80398","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__80405","cljs.core/keyword-identical?","expr__80406","cljs.core.assoc","this__4392__auto__","cljs.core/seq","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","reitit.coercion/CoercionError","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__80399","extmap__4419__auto__","G__80410","cljs.core/record?","reitit.coercion/->CoercionError","reitit.coercion/map->CoercionError","reitit.coercion/error?","x","k80412","G__80422","cljs.core/Keyword","in","style","keywordize?","open?","p__80423","vec__80424","cljs.core/PersistentVector","G__80411","this80413","other80414","pred__80432","expr__80433","cljs.core/MapEntry","reitit.coercion/ParameterCoercion","G__80415","G__80438","reitit.coercion/->ParameterCoercion","reitit.coercion/map->ParameterCoercion","reitit.coercion/default-parameter-coercion","reitit.coercion/request-coercion-failed!","result","coercion","value","request","cljs.core.ex_info","cljs.core.pr_str","cljs.core.merge","reitit.coercion/response-coercion-failed!","response","reitit.coercion/extract-request-format-default","p__80445","map__80446","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","reitit.coercion/request-coercer","extract-request-format","parameter-coercion","temp__5733__auto__","map__80449","transform","cljs.core.comp","clojure.walk/keywordize-keys","cljs.core/identity","coercer","format","reitit.coercion/extract-response-format-default","_","p__80455","map__80456","reitit.coercion/response-coercer","body","extract-response-format","reitit.coercion/encode-error","cljs.core.update","reitit.coercion/coerce-request","coercers","cljs.core/reduce-kv","acc","k","reitit.impl/fast-assoc","reitit.coercion/coerce-response","or__4126__auto__","G__80459","reitit.coercion/request-coercers","parameters","opts","G__80463","iter__4529__auto__","s__80465","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__80467","cljs.core/chunk-buffer","i__80466","vec__80468","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80464","cljs.core/chunk-rest","vec__80471","cljs.core/first","cljs.core/cons","cljs.core/rest","v","cljs.core.filter","cljs.core/second","reitit.coercion/response-coercers","responses","G__80474","s__80476","b__80478","i__80477","vec__80480","map__80483","iter__80475","vec__80487","map__80490","status","reitit.coercion/get-apidocs","swagger-parameter","G__80494","js/Error","cljs.core.map","p__80495","vec__80497","p__80502","vec__80503","map__80506","reitit.coercion/compile-request-coercers","and__4115__auto__","reitit.coercion/coerce!","match","cljs.core/chunk-first"],"sourcesContent":["(ns reitit.coercion\n  (:require [clojure.walk :as walk]\n            [reitit.impl :as impl])\n  #?(:clj\n     (:import (java.io Writer))))\n\n;;\n;; Protocol\n;;\n\n(defprotocol Coercion\n  \"Pluggable coercion protocol\"\n  (-get-name [this] \"Keyword name for the coercion\")\n  (-get-options [this] \"Coercion options\")\n  (-get-apidocs [this specification data] \"Returns api documentation\")\n  (-compile-model [this model name] \"Compiles a model\")\n  (-open-model [this model] \"Returns a new model which allows extra keys in maps\")\n  (-encode-error [this error] \"Converts error in to a serializable format\")\n  (-request-coercer [this type model] \"Returns a `value format => value` request coercion function\")\n  (-response-coercer [this model] \"Returns a `value format => value` response coercion function\"))\n\n#?(:clj\n   (defmethod print-method ::coercion [coercion ^Writer w]\n     (.write w (str \"#Coercion{:name \" (-get-name coercion) \"}\"))))\n\n(defrecord CoercionError [])\n\n(defn error? [x]\n  (instance? CoercionError x))\n\n;;\n;; coercer\n;;\n\n(defrecord ParameterCoercion [in style keywordize? open?])\n\n(def ^:no-doc default-parameter-coercion\n  {:query (->ParameterCoercion :query-params :string true true)\n   :body (->ParameterCoercion :body-params :body false false)\n   :form (->ParameterCoercion :form-params :string true true)\n   :header (->ParameterCoercion :headers :string true true)\n   :path (->ParameterCoercion :path-params :string true true)})\n\n(defn ^:no-doc request-coercion-failed! [result coercion value in request]\n  (throw\n    (ex-info\n      (str \"Request coercion failed: \" (pr-str result))\n      (merge\n        (into {} result)\n        {:type ::request-coercion\n         :coercion coercion\n         :value value\n         :in [:request in]\n         :request request}))))\n\n(defn ^:no-doc response-coercion-failed! [result coercion value request response]\n  (throw\n    (ex-info\n      (str \"Response coercion failed: \" (pr-str result))\n      (merge\n        (into {} result)\n        {:type ::response-coercion\n         :coercion coercion\n         :value value\n         :in [:response :body]\n         :request request\n         :response response}))))\n\n(defn extract-request-format-default [request]\n  (-> request :muuntaja/request :format))\n\n;; TODO: support faster key walking, walk/keywordize-keys is quite slow...\n(defn request-coercer [coercion type model {::keys [extract-request-format parameter-coercion]\n                                            :or {extract-request-format extract-request-format-default\n                                                 parameter-coercion default-parameter-coercion}}]\n  (if coercion\n    (if-let [{:keys [keywordize? open? in style]} (parameter-coercion type)]\n      (let [transform (comp (if keywordize? walk/keywordize-keys identity) in)\n            model (if open? (-open-model coercion model) model)]\n        (if-let [coercer (-request-coercer coercion style model)]\n          (fn [request]\n            (let [value (transform request)\n                  format (extract-request-format request)\n                  result (coercer value format)]\n              (if (error? result)\n                (request-coercion-failed! result coercion value in request)\n                result))))))))\n\n(defn extract-response-format-default [request _]\n  (-> request :muuntaja/response :format))\n\n(defn response-coercer [coercion body {:keys [extract-response-format]\n                                       :or {extract-response-format extract-response-format-default}}]\n  (if coercion\n    (if-let [coercer (-response-coercer coercion body)]\n      (fn [request response]\n        (let [format (extract-response-format request response)\n              value (:body response)\n              result (coercer value format)]\n          (if (error? result)\n            (response-coercion-failed! result coercion value request response)\n            result))))))\n\n(defn encode-error [data]\n  (-> data\n      (dissoc :request :response)\n      (update :coercion -get-name)\n      (->> (-encode-error (:coercion data)))))\n\n(defn coerce-request [coercers request]\n  (reduce-kv\n    (fn [acc k coercer]\n      (impl/fast-assoc acc k (coercer request)))\n    {} coercers))\n\n(defn coerce-response [coercers request response]\n  (if response\n    (if-let [coercer (or (coercers (:status response)) (coercers :default))]\n      (impl/fast-assoc response :body (coercer request response))\n      response)))\n\n(defn request-coercers [coercion parameters opts]\n  (some->> (for [[k v] parameters\n                 :when v]\n             [k (request-coercer coercion k v opts)])\n           (filter second)\n           (seq)\n           (into {})))\n\n(defn response-coercers [coercion responses opts]\n  (some->> (for [[status {:keys [body]}] responses :when body]\n             [status (response-coercer coercion body opts)])\n           (filter second)\n           (seq)\n           (into {})))\n\n;;\n;; api-docs\n;;\n\n(defn get-apidocs [coercion specification data]\n  (let [swagger-parameter {:query :query\n                           :body :body\n                           :form :formData\n                           :header :header\n                           :path :path\n                           :multipart :formData}]\n    (case specification\n      :swagger (->> (update\n                      data\n                      :parameters\n                      (fn [parameters]\n                        (->> parameters\n                             (map (fn [[k v]] [(swagger-parameter k) v]))\n                             (filter first)\n                             (into {}))))\n                    (-get-apidocs coercion specification)))))\n\n;;\n;; integration\n;;\n\n(defn compile-request-coercers\n  \"A router :compile implementation which reads the `:parameters`\n  and `:coercion` data to create compiled coercers into Match under\n  `:result. A pre-requisite to use [[coerce!]].\"\n  [[_ {:keys [parameters coercion]}] opts]\n  (if (and parameters coercion)\n    (request-coercers coercion parameters opts)))\n\n(defn coerce!\n  \"Returns a map of coerced input parameters using pre-compiled\n  coercers under `:result` (provided by [[compile-request-coercers]].\n  Throws `ex-info` if parameters can't be coerced\n  If coercion or parameters are not defined, return `nil`\"\n  [match]\n  (if-let [coercers (:result match)]\n    (coerce-request coercers match)))\n"]}