{"version":3,"sources":["ajax/core.cljc"],"mappings":";AA6BA,AAAKA,AAAeC;AAEpB,AAAA,AAAMC,AAAOC;AAAb,AAAA;AAEE,AAACC,AAAUD;;AAIb,AAAKE,AAAoBC;AACzB,AAAKC,AAAqBC;AAE1B,AAAKC,AAAuBC;AAC5B,AAAKC,AAAwBC;AAE7B,AAAKC,AAAqBC;AAE1B,AAAKC,AAAmBC;AAExB,AAAKC,AAAoBC;AACzB,AAAKC,AAAqBC;AAE1B,AAAKC,AAAoBC;AAEzB,AAAKC,AAASC;AAId,AAAKC,AAAqBC;AAE1B,AAAKC,AAAaC;AAIlB,AAAKC,AAAgBC;AAQrB,AAAKC,AAAuBC;AAE5B,AAAA;;;;;;;;;;;;;AAAA,AAAAC,AAAYM;AAAZ,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAYF;AAAZ,AAAA,AAAAG,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAJ,AAAA,AAAA,AAAA,AAAAE,AAAAG,AAAA,AAAAC,AAAAC,AAAAN,AAAAC;;;AAAA,AAAA,AAAA,AAAYH;;AAAZ;AAAA,AAAA,AAAA,AAAAS,AAAYT;AAAZ,AAAA,AAAAU,AAAA,AAAAN,AAAAK;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAF,AAAAD;;;AAAA,AACA,AAAA;;;;;;;;;;;;;AAAA,AAAAf,AAAYmB;AAAZ,AAAA,AAAAlB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAAf;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAYW;AAAZ,AAAA,AAAAV,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAJ,AAAA,AAAA,AAAA,AAAAE,AAAAG,AAAA,AAAAC,AAAAC,AAAAN,AAAAC;;;AAAA,AAAA,AAAA,AAAYU;;AAAZ;AAAA,AAAA,AAAA,AAAAC,AAAYD;AAAZ,AAAA,AAAAE,AAAA,AAAAX,AAAAU;AAAAA,AAAA,AAAAH,AAAAG;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAAA,AAAAG,AAAAD;;;AAAA,AACA,AAAA;;;;;;;;;;;;;AAAA,AAAApB,AAAYsB;AAAZ,AAAA,AAAArB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAAlB;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAYc;AAAZ,AAAA,AAAAb,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAJ,AAAA,AAAA,AAAA,AAAAE,AAAAG,AAAA,AAAAC,AAAAC,AAAAN,AAAAC;;;AAAA,AAAA,AAAA,AAAYa;;AAAZ;AAAA,AAAA,AAAA,AAAAC,AAAYD;AAAZ,AAAA,AAAAE,AAAA,AAAAd,AAAAa;AAAAA,AAAA,AAAAN,AAAAM;AAAA,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAA,AAAAM,AAAAD;;;AAAA,AACA,AAAA;;;;;;;;;;;;;AAAA,AAAAvB,AAAYyB;AAAZ,AAAA,AAAAxB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwB,AAAA,AAAA,AAAA,AAAArB;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAYiB;AAAZ,AAAA,AAAAhB,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAJ,AAAA,AAAA,AAAA,AAAAE,AAAAG,AAAA,AAAAC,AAAAC,AAAAN,AAAAC;;;AAAA,AAAA,AAAA,AAAYgB;;AAAZ;AAAA,AAAA,AAAA,AAAAC,AAAYD;AAAZ,AAAA,AAAAE,AAAA,AAAAjB,AAAAgB;AAAAA,AAAA,AAAAT,AAAAS;AAAA,AAAA,AAAAR,AAAA;AAAA,AAAA,AAAAA,AAAAS,AAAAD;;;AAAA,AACA,AAAA;;;;;;;;;;;;;AAAA,AAAA1B,AAAY4B;AAAZ,AAAA,AAAA3B,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2B,AAAA,AAAA,AAAA,AAAAxB;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAYoB;AAAZ,AAAA,AAAAnB,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAJ,AAAA,AAAA,AAAA,AAAAE,AAAAG,AAAA,AAAAC,AAAAC,AAAAN,AAAAC;;;AAAA,AAAA,AAAA,AAAYmB;;AAAZ;AAAA,AAAA,AAAA,AAAAC,AAAYD;AAAZ,AAAA,AAAAE,AAAA,AAAApB,AAAAmB;AAAAA,AAAA,AAAAZ,AAAAY;AAAA,AAAA,AAAAX,AAAA;AAAA,AAAA,AAAAA,AAAAY,AAAAD;;;AAAA,AACA,AAAA;;;;;;;;;;;;;AAAA,AAAA7B,AAAY+B;AAAZ,AAAA,AAAA9B,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8B,AAAA,AAAA,AAAA,AAAA3B;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAYuB;AAAZ,AAAA,AAAAtB,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAJ,AAAA,AAAA,AAAA,AAAAE,AAAAG,AAAA,AAAAC,AAAAC,AAAAN,AAAAC;;;AAAA,AAAA,AAAA,AAAYsB;;AAAZ;AAAA,AAAA,AAAA,AAAAC,AAAYD;AAAZ,AAAA,AAAAE,AAAA,AAAAvB,AAAAsB;AAAAA,AAAA,AAAAf,AAAAe;AAAA,AAAA,AAAAd,AAAA;AAAA,AAAA,AAAAA,AAAAe,AAAAD;;;AAAA,AACA,AAAA;;;;;;;;;;;;;AAAA,AAAAhC,AAAYkC;AAAZ,AAAA,AAAAjC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiC,AAAA,AAAA,AAAA,AAAA9B;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAY0B;AAAZ,AAAA,AAAAzB,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAJ,AAAA,AAAA,AAAA,AAAAE,AAAAG,AAAA,AAAAC,AAAAC,AAAAN,AAAAC;;;AAAA,AAAA,AAAA,AAAYyB;;AAAZ;AAAA,AAAA,AAAA,AAAAC,AAAYD;AAAZ,AAAA,AAAAE,AAAA,AAAA1B,AAAAyB;AAAAA,AAAA,AAAAlB,AAAAkB;AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAA,AAAAA,AAAAkB,AAAAD;;;AAAA,AACA,AAAA;;;;;;;;;;;;;AAAA,AAAAnC,AAAYqC;AAAZ,AAAA,AAAApC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoC,AAAA,AAAA,AAAA,AAAAjC;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAY6B;AAAZ,AAAA,AAAA5B,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAJ,AAAA,AAAA,AAAA,AAAAE,AAAAG,AAAA,AAAAC,AAAAC,AAAAN,AAAAC;;;AAAA,AAAA,AAAA,AAAY4B;;AAAZ;AAAA,AAAA,AAAA,AAAAC,AAAYD;AAAZ,AAAA,AAAAE,AAAA,AAAA7B,AAAA4B;AAAAA,AAAA,AAAArB,AAAAqB;AAAA,AAAA,AAAApB,AAAA;AAAA,AAAA,AAAAA,AAAAqB,AAAAD;;;AAAA,AACA,AAAA;;;;;;;;;;;;;AAAA,AAAAtC,AAAYwC;AAAZ,AAAA,AAAAvC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuC,AAAA,AAAA,AAAA,AAAApC;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAYgC;AAAZ,AAAA,AAAA/B,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAJ,AAAA,AAAA,AAAA,AAAAE,AAAAG,AAAA,AAAAC,AAAAC,AAAAN,AAAAC;;;AAAA,AAAA,AAAA,AAAY+B;;AAAZ;AAAA,AAAA,AAAA,AAAAC,AAAYD;AAAZ,AAAA,AAAAE,AAAA,AAAAhC,AAAA+B;AAAAA,AAAA,AAAAxB,AAAAwB;AAAA,AAAA,AAAAvB,AAAA;AAAA,AAAA,AAAAA,AAAAwB,AAAAD;;;AAAA","names":["ajax.core/to-interceptor","ajax.interceptors/to-interceptor","ajax.core/abort","this","ajax.protocols/-abort","ajax.core/json-request-format","ajax.json/json-request-format","ajax.core/json-response-format","ajax.json/json-response-format","ajax.core/transit-request-format","ajax.transit/transit-request-format","ajax.core/transit-response-format","ajax.transit/transit-response-format","ajax.core/ring-response-format","ajax.ring/ring-response-format","ajax.core/url-request-format","ajax.url/url-request-format","ajax.core/text-request-format","ajax.formats/text-request-format","ajax.core/text-response-format","ajax.formats/text-response-format","ajax.core/raw-response-format","ajax.formats/raw-response-format","ajax.core/success?","ajax.util/success?","ajax.core/default-interceptors","ajax.simple/default-interceptors","ajax.core/ajax-request","ajax.simple/ajax-request","ajax.core/default-formats","ajax.easy/default-formats","ajax.core/detect-response-format","ajax.easy/detect-response-format","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","ajax.core/GET","uri","opts","f__75486__auto__","cljs.core/first","ajax.easy/easy-ajax-request","cljs.core/Keyword","cljs.core.apply","cljs.core/hash-map","seq75944","G__75945","cljs.core/next","self__4723__auto__","ajax.core/HEAD","seq75946","G__75947","ajax.core/POST","seq75948","G__75949","ajax.core/PUT","seq75950","G__75951","ajax.core/DELETE","seq75952","G__75953","ajax.core/OPTIONS","seq75954","G__75955","ajax.core/TRACE","seq75960","G__75961","ajax.core/PATCH","seq75972","G__75973","ajax.core/PURGE","seq75989","G__75990"],"sourcesContent":["(ns ajax.core\n  \"This is the documented API for cljs-ajax. The only functions not\n   exposed here that are documented are the deprecated features.\"\n  (:require [clojure.string :as str]\n            [ajax.url :as url]\n            [ajax.json :as json]\n            [ajax.transit :as transit]\n            [ajax.ring :as ring]\n            [ajax.formats :as f]\n            [ajax.util :as u]\n            [ajax.interceptors :as i]\n            [ajax.simple :as simple]\n            [ajax.easy :as easy]\n            [ajax.protocols :as pr]\n            #?@ (:clj  [[ajax.macros :as m]\n                        [ajax.apache]]\n                 :cljs [[ajax.xhrio]\n                        [ajax.xml-http-request]]))\n  #? (:cljs\n      (:require-macros [ajax.macros :as m])))\n\n;;; NB As a matter of policy, this file shouldn't reference any\n;;; google closure files. That functionality should be off in\n;;; specific namespaces and exposed here in a platform indepdent\n;;; way\n\n;;; Ideally this would be true of all functionality, but it's\n;;; an ongoing project.\n\n(def to-interceptor i/to-interceptor)\n\n(defn abort [this]\n  \"Call this on the result of `ajax-request` to cancel the request.\"\n  (pr/-abort this))\n\n;;; Standard Formats\n\n(def json-request-format json/json-request-format)\n(def json-response-format json/json-response-format)\n\n(def transit-request-format transit/transit-request-format)\n(def transit-response-format transit/transit-response-format)\n\n(def ring-response-format ring/ring-response-format)\n\n(def url-request-format url/url-request-format)\n\n(def text-request-format f/text-request-format)\n(def text-response-format f/text-response-format)\n; There's no raw-request-format because it's handled by the DirectSubmission code\n(def raw-response-format f/raw-response-format)\n\n(def success? u/success?)\n\n;;; Here's the entire \"simple\" API.\n\n(def default-interceptors simple/default-interceptors)\n\n(def ajax-request simple/ajax-request)\n\n;;; \"Easy\" API beyond this point\n\n(def default-formats easy/default-formats)\n\n;;; NB detect-response-format with no parameters will pull\n;;; in every non-deprecated format in the code and so is\n;;; considered part of the \"easy\" API. However,\n;;; using your own vector specification works with the\n;;; simple API and allows you to control what formats you\n;;; want to support.\n(def detect-response-format easy/detect-response-format)\n\n(m/easy-api GET)\n(m/easy-api HEAD)\n(m/easy-api POST)\n(m/easy-api PUT)\n(m/easy-api DELETE)\n(m/easy-api OPTIONS)\n(m/easy-api TRACE)\n(m/easy-api PATCH)\n(m/easy-api PURGE)\n"]}