{"version":3,"sources":["vega/frontend/data/seattle_weather.cljs"],"mappings":";AAUA,AAAA,AAACA,AAEC,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASG;AAAT,AAAAF,AAAAD,AAAA,AAAA,AAAWI;AAAX,AACE,AAAA,AAACC;;AACGH,AAEA,AAAA,AAAA,AAAA,AAAA,AAACI,AAA4C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA8BH,AAAsBI,AAClG,AAAA,AAAA,AAAA,AAAA,AAACF,AAAwC,AAAA,AAAOF;;AAExD,AAAA,AAACN,AAEC,AAAAW,AAAKP;AAAL,AAAA,AAAAQ,AAAAD;AAAA,AAAAR,AAAAS,AAAA,AAAA,AAASP;AAAT,AAAAF,AAAAS,AAAA,AAAA,AAAWN;AAAX,AACE,AAAA,AAACC,AAAkCH;;AACnC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACI,AAASJ,AAEM,AAAA,AAAA,AAAA,AAACS,AAAOP;;AAE5B,AAAA,AAACQ,AAEC,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAab;AAAbkB,AAAAN;AAAA,AAAAb,AAAAmB,AAAA,AAAA,AAAmBjB;AAAnB,AACE,AAAA,AAACE;;AACD,AAAA,AAAA,AAAA,AAACgB,AAAgBnB,AAAG;;AAExB,AAAA,AAACoB,AAEC,AAAKpB;AAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAIA","names":["re_frame.core.reg_event_db","p__80858","vec__80859","cljs.core.nth","db","_","res-body","vega.frontend.util.clog","cljs.core/assoc-in","cljs.core.update_in","cljs.core/dissoc","p__80862","vec__80863","cljs.core.get_in","re_frame.core.reg_event_fx","p__80866","p__80867","map__80869","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__80870","vega.frontend.http/http-get","re_frame.core.reg_sub"],"sourcesContent":["(ns vega.frontend.data.seattle-weather\n  (:require\n    [re-frame.core :as re-frame]\n    [re-frame.db]\n    [vega.frontend.util :as v-util]\n    [vega.frontend.http :as v-http]\n    [day8.re-frame.http-fx] ; Needed to register :http-xhrio to re-frame.\n    [hashp.core :include-macros true]\n    ))\n\n(re-frame/reg-event-db\n  ::ret-ok-data-seattle-weather\n  (fn [db [_ res-body]]\n    (v-util/clog \"reg-event-db ok\")\n    (-> db\n        ; Dissoc config not being in two places.\n        (assoc-in [:data :seattle-weather :response] (update-in {:ret :ok :res-body res-body} [:res-body] dissoc :data))\n        (assoc-in [:data :seattle-weather :data] (:data res-body)))))\n\n(re-frame/reg-event-db\n  ::ret-failed-data-seattle-weather\n  (fn [db [_ res-body]]\n    (v-util/clog \"reg-event-db failed\" db)\n    (assoc-in db [:data :seattle-weather :response]\n              {:ret :failed\n               :msg (get-in res-body [:response :msg])})))\n\n(re-frame/reg-event-fx\n  ::get-data-seattle-weather\n  (fn [{:keys [db]} [_]]\n    (v-util/clog \"get-data-seattle-weather\")\n    (v-http/http-get db (str \"/vega/api/data/seattle-weather/\") nil ::ret-ok-data-seattle-weather ::ret-failed-data-seattle-weather)))\n\n(re-frame/reg-sub\n  ::data-seattle-weather\n  (fn [db]\n    (-> db\n        :data\n        :seattle-weather\n        :data)))\n"]}