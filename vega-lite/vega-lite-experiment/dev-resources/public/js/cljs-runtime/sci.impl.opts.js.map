{"version":3,"sources":["sci/impl/opts.cljc"],"mappings":"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","names":["sci.impl.opts/init-env!","env","bindings","aliases","namespaces","imports","load-fn","cljs.core.swap_BANG_","cljs.core.merge_with","cljs.core/merge","sci.impl.namespaces/namespaces","cljs.core.assoc","sci.impl.vars/user-ns","cljs.core.merge","sci.impl.namespaces/aliases","cljs.core.get_in","cljs.core.update","cljs.core/assoc","sci.impl.vars/->SciVar","cljs.core/make-hierarchy","cljs.core/not","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","sci.impl.opts/process-permissions","seq58312","self__4724__auto__","cljs.core/seq","permissions","cljs.core/not-empty","cljs.core.into","cljs.core.comp","cljs.core/cat","cljs.core.map","sci.impl.utils/strip-core-ns","p1__58313#","p1__58314#","sci.impl.opts/default-classes","js/Error","msg","filename","line","cljs.core/Delay","goog.string/StringBuffer","sci.impl.opts/default-imports","sci.impl.opts/normalize-classes","classes","class->opts","cljs.core/transient","cljs.core/select-keys","kvs","temp__5733__auto__","vec__58315","cljs.core.nth","sym","class-opts","cljs.core/first","cljs.core.assoc_BANG_","cljs.core/map?","cljs.core/rest","cljs.core/persistent!","sci.impl.opts/default-reify","sci.impl.opts/->ctx","features","readers","p__58318","map__58319","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","reify","disable-arity-checks","allow","uberscript","deny","sci.impl.opts/init","or__4126__auto__","cljs.core.atom","_","ctx","sci.impl.opts.process_permissions"],"sourcesContent":["(ns sci.impl.opts\n  {:no-doc true}\n  (:require\n   #?(:cljs [goog.string])\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.utils :as utils :refer [strip-core-ns]]\n   [sci.impl.vars :as vars]\n   [sci.lang]))\n\n#?(:clj\n   (defrecord Env [namespaces imports load-fn]))\n\n(defn init-env! [env bindings aliases namespaces imports load-fn]\n  (swap! env (fn [env]\n               (let [namespaces (merge-with merge\n                                            namespaces/namespaces\n                                            {'user (assoc bindings\n                                                          :obj vars/user-ns)}\n                                            namespaces\n                                            (:namespaces env))\n                     aliases (merge namespaces/aliases aliases\n                                    (get-in env [:namespaces 'user :aliases]))\n                     namespaces (-> namespaces\n                                    (update 'user assoc :aliases aliases)\n                                    (update 'clojure.core assoc 'global-hierarchy\n                                            (vars/->SciVar (make-hierarchy) 'global-hierarchy nil false)))]\n                 (if-not env\n                   #?(:clj (->Env namespaces imports load-fn)\n                      :cljs {:namespaces namespaces\n                             :imports imports\n                             :load-fn load-fn})\n                   (assoc env\n                          :namespaces namespaces\n                          :imports imports\n                          :load-fn load-fn))))))\n\n(defn process-permissions [& permissions]\n  (not-empty (into #{} (comp cat (map strip-core-ns)) permissions)))\n\n(def default-classes\n  #?(:clj {'java.lang.AssertionError AssertionError\n           'java.lang.Exception {:class Exception}\n           'java.lang.IllegalArgumentException java.lang.IllegalArgumentException\n           'clojure.lang.Delay clojure.lang.Delay\n           'clojure.lang.ExceptionInfo clojure.lang.ExceptionInfo\n           'clojure.lang.LineNumberingPushbackReader clojure.lang.LineNumberingPushbackReader\n           'java.lang.String {:class String}\n           'java.io.StringWriter java.io.StringWriter\n           'java.io.StringReader java.io.StringReader\n           'java.lang.Integer Integer\n           'java.lang.Number Number\n           'java.lang.Double Double\n           'java.lang.ArithmeticException ArithmeticException\n           'java.lang.Object Object\n           'sci.lang.IVar sci.lang.IVar}\n     :cljs {'Error {:class js/Error :constructor (fn\n                                                   ([msg] (js/Error. msg))\n                                                   ([msg filename] (js/Error. msg filename))\n                                                   ([msg filename line] (js/Error. msg filename line)))}\n            'cljs.core.Delay {:class cljs.core/Delay\n                              :constructor #(cljs.core/Delay. % nil)}\n            'goog.string.StringBuffer {:class goog.string/StringBuffer\n                                       :constructor #(goog.string/StringBuffer. %)}}))\n\n(def default-imports\n  #?(:clj '{AssertionError java.lang.AssertionError\n            Exception java.lang.Exception\n            String java.lang.String\n            ArithmeticException java.lang.ArithmeticException\n            Integer java.lang.Integer\n            Number java.lang.Number\n            Double java.lang.Double\n            Object java.lang.Object}\n     :cljs {}))\n\n(defn normalize-classes [classes]\n  (loop [class->opts (transient (select-keys classes [:allow]))\n         kvs classes]\n    (if-let [[sym class-opts] (first kvs)]\n      (recur ;; storing the physical class as key didn't work well with\n       ;; GraalVM\n       (assoc! class->opts sym (if (map? class-opts)\n                                 class-opts\n                                 {:class class-opts}))\n       (rest kvs))\n      {:public-class (:public-class classes)\n       :class->opts (persistent! class->opts)})))\n\n(def default-reify\n  #?(:clj {'#{java.lang.Object}\n           (fn [methods]\n             (reify Object\n               (toString [this]\n                 ((get-in methods '[java.lang.Object toString]) this))))}\n     :cljs {}))\n\n#?(:clj (defrecord Ctx [bindings env\n                        features readers]))\n\n(defn ->ctx [bindings env features readers]\n  #?(:cljs {:bindings bindings\n            :env env\n            :features features\n            :readers readers}\n     :clj (->Ctx bindings env features readers)))\n\n(defn init\n  \"Initializes options\"\n  [{:keys [:bindings :env\n           :allow :deny\n           :aliases\n           :namespaces\n           :classes\n           :imports\n           :features\n           :load-fn\n           :uberscript ;; used by babashka, not public!\n           :readers\n           :reify\n           :disable-arity-checks]}]\n  (let [env (or env (atom {}))\n        imports (merge default-imports imports)\n        bindings bindings\n        _ (init-env! env bindings aliases namespaces imports load-fn)\n        classes (normalize-classes (merge default-classes classes))\n        ctx (assoc (->ctx {} env features readers)\n                   :allow (process-permissions allow)\n                   :deny (process-permissions deny)\n                   :uberscript uberscript\n                   :reify (merge default-reify reify)\n                   :disable-arity-checks disable-arity-checks\n                   :public-class (:public-class classes)\n                   :class->opts (:class->opts classes))]\n    ctx))\n"]}