{"version":3,"sources":["shadow/json.cljs"],"mappings":";AAGA,AAAA;;;AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEFE;AAFJ,AAEO,AAAA,AAACC,AAAOD;;;AAFf,AAAA,AAAA,AAAMF,AAGFE,AAAEE;AAHN,AAIG,AACE,AAAA,AAAMF;AACNA;;AAFF,AAIE,AAASA;AACTA;;AALF,AAOE,AAASA;AACTA;;AARF,AAUE,AAACG,AAASH;AACVA;;AAXF,AAaE,AAACI,AAAOJ;AACR,AAAA,AAACK,AAAQ,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAACL,AAASC;AAAO,AAACM,AAAUR;;AAd7C,AAiBE,AAAMS,AAAO,AAAA,AAACC,AAAIR,AAAaS;AAA/B,AAEO,AAACE,AACC,AAAKC,AAAOC,AAQd,AAACK;AARC,AACE,AAAMJ,AAAM,AAACC,AAASjB,AAAEe;AAAxB,AACE,AAACG,AAAOJ,AACN,AAAI,AAASC,AACX,AAACN,AAAAA,AAAAA,AAAOM,AAAAA,AACR,AAACd,AAAOc,AAAIb,AACd,AAACD,AAAOe,AAAMd;AARtB,AAACU,AAAaZ,AASZ,AAAA,AAACmB;;;;;;;;;AA/Bf,AAAA,AAAA,AAAMrB;;AAAN,AAkCA,AAAA,AAAMuB,AAAUC,AAAIpB;AAApB,AACE,AAACD,AAAO,AAACsB,AAAcD,AAAKpB;;AAE9B,AAAA,AAAMsB,AAAWC;AAAjB,AACM,AAACC,AAAQD,AACT,AAACE","names":["var_args","G__59749","shadow.json/to-clj","js/Error","x","shadow.json.to_clj","opts","cljs.core/boolean?","cljs.core/array?","cljs.core.into","p1__59747#","cljs.core.map","cljs.core.array_seq","key-fn","cljs.core.get","cljs.core/keyword","goog.object/getKeys","cljs.core.reduce","result","key","value","goog.object/get","cljs.core.assoc_BANG_","cljs.core/transient","cljs.core/persistent!","shadow.json/read-str","str","js/JSON.parse","shadow.json/write-str","obj","cljs.core/clj->js","js/JSON.stringify"],"sourcesContent":["(ns shadow.json\n  (:require [goog.object :as gobj]))\n\n(defn to-clj\n  \"simplified js->clj for JSON data, :key-fn default to keyword\"\n  ([x] (to-clj x {}))\n  ([x opts]\n   (cond\n     (nil? x)\n     x\n\n     (number? x)\n     x\n\n     (string? x)\n     x\n\n     (boolean? x)\n     x\n\n     (array? x)\n     (into [] (map #(to-clj % opts)) (array-seq x))\n\n     :else ;; object\n     (let [key-fn (get opts :key-fn keyword)]\n       (->> (gobj/getKeys x)\n            (reduce\n              (fn [result key]\n                (let [value (gobj/get x key)]\n                  (assoc! result\n                    (if (string? key)\n                      (key-fn key)\n                      (to-clj key opts))\n                    (to-clj value opts))))\n              (transient {}))\n            (persistent!))))))\n\n(defn read-str [str opts]\n  (to-clj (js/JSON.parse str) opts))\n\n(defn write-str [obj]\n  (-> (clj->js obj)\n      (js/JSON.stringify)))"]}