{"version":3,"sources":["sci/impl/doseq_macro.cljc"],"mappings":"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AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAU,AAAA,AAAAZ,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAU,AAAA,AAAAZ,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAU,AAAA,AAAAZ,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAF,AAAA,AAAAX,AAAA,AAAAY,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAcMqB,AAAeV,AAAWT,AAAKW,AAChBE,AAAWC,AACnBA,AAAID,AACHd,AAAQY,AAAQG,AACpBI,AACC,AAAA,AAAA,AAAA,AAAMb,AAASW,AACZP,AAAWA,AACPA,AACWA,AACMA,AACnBM,AAA2BN,AAExBV,AAAUU,AACdH,AACC,AAAA,AAAA,AAAA,AAAMD,AAASZ;;;;AA/ClD,AAgDE,AAAA,AAAC2B,AAAI,AAAA,AAAC5B,AAAS,AAACP,AAAIT","names":["sci.impl.doseq-macro/assert-args","seq-exprs","_body-exprs","cljs.core/vector?","js/Error","cljs.core/even?","cljs.core/count","p__49121","vec__49122","seq__49123","cljs.core/seq","first__49124","cljs.core/first","cljs.core/next","sci.impl.doseq-macro/expand-doseq","_","body","step","recform","exprs","cljs.core/not","cljs.core.sequence","cljs.core.concat","cljs.core/List","k","v","cljs.core/second","cljs.core/Keyword","steppair","cljs.core/nnext","needrec","subform","cljs.core._EQ_","cljs.core/vec","seq-","cljs.core.gensym","chunk-","cljs.core/with-meta","count-","i-","sci.impl.utils/allowed-recur","recform-chunk","steppair-chunk","subform-chunk","sci.impl.utils/allowed-loop","cljs.core.nth"],"sourcesContent":["(ns sci.impl.doseq-macro\n  {:no-doc true}\n  (:require [sci.impl.utils :refer [allowed-loop allowed-recur]]))\n\n;; based on the source of clojure.core/doseq\n\n(defn assert-args [seq-exprs _body-exprs]\n  (when-not (vector? seq-exprs)\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"doseq requires a vector for its binding\")))\n  (when-not (even? (count seq-exprs))\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"doseq requires an even number of forms in binding vector\"))))\n\n(defn expand-doseq\n  [_ [_ seq-exprs & body]]\n  (assert-args seq-exprs body)\n  (let [step (fn step [recform exprs]\n               (if-not exprs\n                 [true `(~'do ~@body)]\n                 (let [k (first exprs)\n                       v (second exprs)]\n                   (if (keyword? k)\n                     (let [steppair (step recform (nnext exprs))\n                           needrec (steppair 0)\n                           subform (steppair 1)]\n                       (cond\n                         (= k :let) [needrec `(let ~v ~subform)]\n                         (= k :while) [false `(~'when ~v\n                                               ~subform\n                                               ~@(when needrec [recform]))]\n                         (= k :when) [false `(if ~v\n                                               (do\n                                                 ~subform\n                                                 ~@(when needrec [recform]))\n                                               ~recform)]))\n                     (let [seq- (gensym \"seq_\")\n                           chunk- (with-meta (gensym \"chunk_\")\n                                    {:tag 'clojure.lang.IChunk})\n                           count- (gensym \"count_\")\n                           i- (gensym \"i_\")\n                           recform `(~allowed-recur (next ~seq-) nil 0 0)\n                           steppair (step recform (nnext exprs))\n                           needrec (steppair 0)\n                           subform (steppair 1)\n                           recform-chunk\n                           `(~allowed-recur ~seq- ~chunk- ~count- (unchecked-inc ~i-))\n                           steppair-chunk (step recform-chunk (nnext exprs))\n                           subform-chunk (steppair-chunk 1)]\n                       [true\n                        `(~allowed-loop [~seq- (seq ~v), ~chunk- nil,\n                                         ~count- 0, ~i- 0]\n                          (if (< ~i- ~count-)\n                            (let [~k (nth ~chunk- ~i-)]\n                              ~subform-chunk\n                              ~@(when needrec [recform-chunk]))\n                            (let [~seq- (seq ~seq-)]\n                              (~'when ~seq-\n                               (if (chunked-seq? ~seq-)\n                                 (let [c# (chunk-first ~seq-)]\n                                   (~allowed-recur (chunk-rest ~seq-) c#\n                                          (int (count c#)) (int 0)))\n                                 (let [~k (first ~seq-)]\n                                   ~subform\n                                   ~@(when needrec [recform])))))))])))))]\n    (nth (step nil (seq seq-exprs)) 1)))\n"]}