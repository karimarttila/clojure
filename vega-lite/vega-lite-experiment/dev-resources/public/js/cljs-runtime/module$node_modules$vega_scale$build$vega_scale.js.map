{
"version":3,
"file":"module$node_modules$vega_scale$build$vega_scale.js",
"lineCount":43,
"mappings":"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",
"sources":["node_modules/vega-scale/build/vega-scale.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_scale$build$vega_scale\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('d3-array'), require('d3-scale'), require('d3-interpolate'), require('vega-time')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'd3-array', 'd3-scale', 'd3-interpolate', 'vega-time'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.d3, global.d3, global.d3, global.vega));\n}(this, (function (exports, vegaUtil, d3Array, $, $$1, vegaTime) { 'use strict';\n\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n      Object.keys(e).forEach(function (k) {\n        if (k !== 'default') {\n          var d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: function () {\n              return e[k];\n            }\n          });\n        }\n      });\n    }\n    n['default'] = e;\n    return Object.freeze(n);\n  }\n\n  var $__namespace = /*#__PURE__*/_interopNamespace($$1);\n\n  function bandSpace (count, paddingInner, paddingOuter) {\n    const space = count - paddingInner + paddingOuter * 2;\n    return count ? space > 0 ? space : 1 : 0;\n  }\n\n  const Identity = 'identity';\n  const Linear = 'linear';\n  const Log = 'log';\n  const Pow = 'pow';\n  const Sqrt = 'sqrt';\n  const Symlog = 'symlog';\n  const Time = 'time';\n  const UTC = 'utc';\n  const Sequential = 'sequential';\n  const Diverging = 'diverging';\n  const Quantile = 'quantile';\n  const Quantize = 'quantize';\n  const Threshold = 'threshold';\n  const Ordinal = 'ordinal';\n  const Point = 'point';\n  const Band = 'band';\n  const BinOrdinal = 'bin-ordinal'; // categories\n\n  const Continuous = 'continuous';\n  const Discrete = 'discrete';\n  const Discretizing = 'discretizing';\n  const Interpolating = 'interpolating';\n  const Temporal = 'temporal';\n\n  function invertRange (scale) {\n    return function (_) {\n      let lo = _[0],\n          hi = _[1],\n          t;\n\n      if (hi < lo) {\n        t = lo;\n        lo = hi;\n        hi = t;\n      }\n\n      return [scale.invert(lo), scale.invert(hi)];\n    };\n  }\n\n  function invertRangeExtent (scale) {\n    return function (_) {\n      const range = scale.range();\n      let lo = _[0],\n          hi = _[1],\n          min = -1,\n          max,\n          t,\n          i,\n          n;\n\n      if (hi < lo) {\n        t = lo;\n        lo = hi;\n        hi = t;\n      }\n\n      for (i = 0, n = range.length; i < n; ++i) {\n        if (range[i] >= lo && range[i] <= hi) {\n          if (min < 0) min = i;\n          max = i;\n        }\n      }\n\n      if (min < 0) return undefined;\n      lo = scale.invertExtent(range[min]);\n      hi = scale.invertExtent(range[max]);\n      return [lo[0] === undefined ? lo[1] : lo[0], hi[1] === undefined ? hi[0] : hi[1]];\n    };\n  }\n\n  function band() {\n    const scale = $.scaleOrdinal().unknown(undefined),\n          domain = scale.domain,\n          ordinalRange = scale.range;\n    let range = [0, 1],\n        step,\n        bandwidth,\n        round = false,\n        paddingInner = 0,\n        paddingOuter = 0,\n        align = 0.5;\n    delete scale.unknown;\n\n    function rescale() {\n      const n = domain().length,\n            reverse = range[1] < range[0],\n            stop = range[1 - reverse],\n            space = bandSpace(n, paddingInner, paddingOuter);\n      let start = range[reverse - 0];\n      step = (stop - start) / (space || 1);\n\n      if (round) {\n        step = Math.floor(step);\n      }\n\n      start += (stop - start - step * (n - paddingInner)) * align;\n      bandwidth = step * (1 - paddingInner);\n\n      if (round) {\n        start = Math.round(start);\n        bandwidth = Math.round(bandwidth);\n      }\n\n      const values = d3Array.range(n).map(i => start + step * i);\n      return ordinalRange(reverse ? values.reverse() : values);\n    }\n\n    scale.domain = function (_) {\n      if (arguments.length) {\n        domain(_);\n        return rescale();\n      } else {\n        return domain();\n      }\n    };\n\n    scale.range = function (_) {\n      if (arguments.length) {\n        range = [+_[0], +_[1]];\n        return rescale();\n      } else {\n        return range.slice();\n      }\n    };\n\n    scale.rangeRound = function (_) {\n      range = [+_[0], +_[1]];\n      round = true;\n      return rescale();\n    };\n\n    scale.bandwidth = function () {\n      return bandwidth;\n    };\n\n    scale.step = function () {\n      return step;\n    };\n\n    scale.round = function (_) {\n      if (arguments.length) {\n        round = !!_;\n        return rescale();\n      } else {\n        return round;\n      }\n    };\n\n    scale.padding = function (_) {\n      if (arguments.length) {\n        paddingOuter = Math.max(0, Math.min(1, _));\n        paddingInner = paddingOuter;\n        return rescale();\n      } else {\n        return paddingInner;\n      }\n    };\n\n    scale.paddingInner = function (_) {\n      if (arguments.length) {\n        paddingInner = Math.max(0, Math.min(1, _));\n        return rescale();\n      } else {\n        return paddingInner;\n      }\n    };\n\n    scale.paddingOuter = function (_) {\n      if (arguments.length) {\n        paddingOuter = Math.max(0, Math.min(1, _));\n        return rescale();\n      } else {\n        return paddingOuter;\n      }\n    };\n\n    scale.align = function (_) {\n      if (arguments.length) {\n        align = Math.max(0, Math.min(1, _));\n        return rescale();\n      } else {\n        return align;\n      }\n    };\n\n    scale.invertRange = function (_) {\n      // bail if range has null or undefined values\n      if (_[0] == null || _[1] == null) return;\n      const reverse = range[1] < range[0],\n            values = reverse ? ordinalRange().reverse() : ordinalRange(),\n            n = values.length - 1;\n      let lo = +_[0],\n          hi = +_[1],\n          a,\n          b,\n          t; // bail if either range endpoint is invalid\n\n      if (lo !== lo || hi !== hi) return; // order range inputs, bail if outside of scale range\n\n      if (hi < lo) {\n        t = lo;\n        lo = hi;\n        hi = t;\n      }\n\n      if (hi < values[0] || lo > range[1 - reverse]) return; // binary search to index into scale range\n\n      a = Math.max(0, d3Array.bisectRight(values, lo) - 1);\n      b = lo === hi ? a : d3Array.bisectRight(values, hi) - 1; // increment index a if lo is within padding gap\n\n      if (lo - values[a] > bandwidth + 1e-10) ++a;\n\n      if (reverse) {\n        // map + swap\n        t = a;\n        a = n - b;\n        b = n - t;\n      }\n\n      return a > b ? undefined : domain().slice(a, b + 1);\n    };\n\n    scale.invert = function (_) {\n      const value = scale.invertRange([_, _]);\n      return value ? value[0] : value;\n    };\n\n    scale.copy = function () {\n      return band().domain(domain()).range(range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);\n    };\n\n    return rescale();\n  }\n\n  function pointish(scale) {\n    const copy = scale.copy;\n    scale.padding = scale.paddingOuter;\n    delete scale.paddingInner;\n\n    scale.copy = function () {\n      return pointish(copy());\n    };\n\n    return scale;\n  }\n\n  function point() {\n    return pointish(band().paddingInner(1));\n  }\n\n  var map = Array.prototype.map;\n  function numbers(_) {\n    return map.call(_, vegaUtil.toNumber);\n  }\n\n  const slice = Array.prototype.slice;\n\n  function scaleBinOrdinal() {\n    let domain = [],\n        range = [];\n\n    function scale(x) {\n      return x == null || x !== x ? undefined : range[(d3Array.bisect(domain, x) - 1) % range.length];\n    }\n\n    scale.domain = function (_) {\n      if (arguments.length) {\n        domain = numbers(_);\n        return scale;\n      } else {\n        return domain.slice();\n      }\n    };\n\n    scale.range = function (_) {\n      if (arguments.length) {\n        range = slice.call(_);\n        return scale;\n      } else {\n        return range.slice();\n      }\n    };\n\n    scale.tickFormat = function (count, specifier) {\n      return $.tickFormat(domain[0], vegaUtil.peek(domain), count == null ? 10 : count, specifier);\n    };\n\n    scale.copy = function () {\n      return scaleBinOrdinal().domain(scale.domain()).range(scale.range());\n    };\n\n    return scale;\n  }\n\n  const scales = {};\n  /**\n   * Augment scales with their type and needed inverse methods.\n   */\n\n  function create(type, constructor, metadata) {\n    const ctr = function scale() {\n      const s = constructor();\n\n      if (!s.invertRange) {\n        s.invertRange = s.invert ? invertRange(s) : s.invertExtent ? invertRangeExtent(s) : undefined;\n      }\n\n      s.type = type;\n      return s;\n    };\n\n    ctr.metadata = vegaUtil.toSet(vegaUtil.array(metadata));\n    return ctr;\n  }\n\n  function scale(type, scale, metadata) {\n    if (arguments.length > 1) {\n      scales[type] = create(type, scale, metadata);\n      return this;\n    } else {\n      return isValidScaleType(type) ? scales[type] : undefined;\n    }\n  } // identity scale\n\n  scale(Identity, $.scaleIdentity); // continuous scales\n\n  scale(Linear, $.scaleLinear, Continuous);\n  scale(Log, $.scaleLog, [Continuous, Log]);\n  scale(Pow, $.scalePow, Continuous);\n  scale(Sqrt, $.scaleSqrt, Continuous);\n  scale(Symlog, $.scaleSymlog, Continuous);\n  scale(Time, $.scaleTime, [Continuous, Temporal]);\n  scale(UTC, $.scaleUtc, [Continuous, Temporal]); // sequential scales\n\n  scale(Sequential, $.scaleSequential, [Continuous, Interpolating]); // backwards compat\n\n  scale(`${Sequential}-${Linear}`, $.scaleSequential, [Continuous, Interpolating]);\n  scale(`${Sequential}-${Log}`, $.scaleSequentialLog, [Continuous, Interpolating, Log]);\n  scale(`${Sequential}-${Pow}`, $.scaleSequentialPow, [Continuous, Interpolating]);\n  scale(`${Sequential}-${Sqrt}`, $.scaleSequentialSqrt, [Continuous, Interpolating]);\n  scale(`${Sequential}-${Symlog}`, $.scaleSequentialSymlog, [Continuous, Interpolating]); // diverging scales\n\n  scale(`${Diverging}-${Linear}`, $.scaleDiverging, [Continuous, Interpolating]);\n  scale(`${Diverging}-${Log}`, $.scaleDivergingLog, [Continuous, Interpolating, Log]);\n  scale(`${Diverging}-${Pow}`, $.scaleDivergingPow, [Continuous, Interpolating]);\n  scale(`${Diverging}-${Sqrt}`, $.scaleDivergingSqrt, [Continuous, Interpolating]);\n  scale(`${Diverging}-${Symlog}`, $.scaleDivergingSymlog, [Continuous, Interpolating]); // discretizing scales\n\n  scale(Quantile, $.scaleQuantile, [Discretizing, Quantile]);\n  scale(Quantize, $.scaleQuantize, Discretizing);\n  scale(Threshold, $.scaleThreshold, Discretizing); // discrete scales\n\n  scale(BinOrdinal, scaleBinOrdinal, [Discrete, Discretizing]);\n  scale(Ordinal, $.scaleOrdinal, Discrete);\n  scale(Band, band, Discrete);\n  scale(Point, point, Discrete);\n  function isValidScaleType(type) {\n    return vegaUtil.hasOwnProperty(scales, type);\n  }\n\n  function hasType(key, type) {\n    const s = scales[key];\n    return s && s.metadata[type];\n  }\n\n  function isContinuous(key) {\n    return hasType(key, Continuous);\n  }\n  function isDiscrete(key) {\n    return hasType(key, Discrete);\n  }\n  function isDiscretizing(key) {\n    return hasType(key, Discretizing);\n  }\n  function isLogarithmic(key) {\n    return hasType(key, Log);\n  }\n  function isTemporal(key) {\n    return hasType(key, Temporal);\n  }\n  function isInterpolating(key) {\n    return hasType(key, Interpolating);\n  }\n  function isQuantile(key) {\n    return hasType(key, Quantile);\n  }\n\n  const scaleProps = ['clamp', 'base', 'constant', 'exponent'];\n  function interpolateRange(interpolator, range) {\n    const start = range[0],\n          span = vegaUtil.peek(range) - start;\n    return function (i) {\n      return interpolator(start + i * span);\n    };\n  }\n  function interpolateColors(colors, type, gamma) {\n    return $$1.piecewise(interpolate(type || 'rgb', gamma), colors);\n  }\n  function quantizeInterpolator(interpolator, count) {\n    const samples = new Array(count),\n          n = count + 1;\n\n    for (let i = 0; i < count;) samples[i] = interpolator(++i / n);\n\n    return samples;\n  }\n  function scaleCopy(scale) {\n    const t = scale.type,\n          s = scale.copy();\n    s.type = t;\n    return s;\n  }\n  function scaleFraction(scale$1, min, max) {\n    const delta = max - min;\n    let i, t, s;\n\n    if (!delta || !Number.isFinite(delta)) {\n      return vegaUtil.constant(0.5);\n    } else {\n      i = (t = scale$1.type).indexOf('-');\n      t = i < 0 ? t : t.slice(i + 1);\n      s = scale(t)().domain([min, max]).range([0, 1]);\n      scaleProps.forEach(m => scale$1[m] ? s[m](scale$1[m]()) : 0);\n      return s;\n    }\n  }\n  function interpolate(type, gamma) {\n    const interp = $__namespace[method(type)];\n    return gamma != null && interp && interp.gamma ? interp.gamma(gamma) : interp;\n  }\n\n  function method(type) {\n    return 'interpolate' + type.toLowerCase().split('-').map(s => s[0].toUpperCase() + s.slice(1)).join('');\n  }\n\n  const continuous = {\n    blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',\n    greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',\n    greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',\n    oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',\n    purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',\n    reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',\n    blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',\n    bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',\n    greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',\n    orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',\n    purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',\n    purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',\n    purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',\n    redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',\n    yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',\n    yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',\n    yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',\n    blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',\n    brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',\n    purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',\n    purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',\n    redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',\n    redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',\n    yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',\n    redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',\n    redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',\n    pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',\n    spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',\n    viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',\n    magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',\n    inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',\n    plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',\n    cividis: '00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647',\n    rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',\n    sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',\n    turbo: '23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00',\n    browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',\n    tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',\n    teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',\n    warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',\n    goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',\n    goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',\n    goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',\n    lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',\n    lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',\n    lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',\n    lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',\n    lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',\n    darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',\n    darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',\n    darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',\n    darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',\n    darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'\n  };\n  const discrete = {\n    category10: '1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf',\n    category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',\n    category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',\n    category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',\n    tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',\n    tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5',\n    accent: '7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666',\n    dark2: '1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666',\n    paired: 'a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928',\n    pastel1: 'fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2',\n    pastel2: 'b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc',\n    set1: 'e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999',\n    set2: '66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3',\n    set3: '8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f'\n  };\n\n  function colors(palette) {\n    const n = palette.length / 6 | 0,\n          c = new Array(n);\n\n    for (let i = 0; i < n;) {\n      c[i] = '#' + palette.slice(i * 6, ++i * 6);\n    }\n\n    return c;\n  }\n\n  function apply(_, f) {\n    for (const k in _) scheme(k, f(_[k]));\n  }\n\n  const schemes = {};\n  apply(discrete, colors);\n  apply(continuous, _ => interpolateColors(colors(_)));\n  function scheme(name, scheme) {\n    name = name && name.toLowerCase();\n\n    if (arguments.length > 1) {\n      schemes[name] = scheme;\n      return this;\n    } else {\n      return schemes[name];\n    }\n  }\n\n  const SymbolLegend = 'symbol';\n  const DiscreteLegend = 'discrete';\n  const GradientLegend = 'gradient';\n\n  const defaultFormatter = value => vegaUtil.isArray(value) ? value.map(v => String(v)) : String(value);\n\n  const ascending = (a, b) => a[1] - b[1];\n\n  const descending = (a, b) => b[1] - a[1];\n  /**\n   * Determine the tick count or interval function.\n   * @param {Scale} scale - The scale for which to generate tick values.\n   * @param {*} count - The desired tick count or interval specifier.\n   * @param {number} minStep - The desired minimum step between tick values.\n   * @return {*} - The tick count or interval function.\n   */\n\n\n  function tickCount(scale, count, minStep) {\n    let step;\n\n    if (vegaUtil.isNumber(count)) {\n      if (scale.bins) {\n        count = Math.max(count, scale.bins.length);\n      }\n\n      if (minStep != null) {\n        count = Math.min(count, Math.floor(vegaUtil.span(scale.domain()) / minStep || 1));\n      }\n    }\n\n    if (vegaUtil.isObject(count)) {\n      step = count.step;\n      count = count.interval;\n    }\n\n    if (vegaUtil.isString(count)) {\n      count = scale.type === Time ? vegaTime.timeInterval(count) : scale.type == UTC ? vegaTime.utcInterval(count) : vegaUtil.error('Only time and utc scales accept interval strings.');\n      if (step) count = count.every(step);\n    }\n\n    return count;\n  }\n  /**\n   * Filter a set of candidate tick values, ensuring that only tick values\n   * that lie within the scale range are included.\n   * @param {Scale} scale - The scale for which to generate tick values.\n   * @param {Array<*>} ticks - The candidate tick values.\n   * @param {*} count - The tick count or interval function.\n   * @return {Array<*>} - The filtered tick values.\n   */\n\n  function validTicks(scale, ticks, count) {\n    let range = scale.range(),\n        lo = range[0],\n        hi = vegaUtil.peek(range),\n        cmp = ascending;\n\n    if (lo > hi) {\n      range = hi;\n      hi = lo;\n      lo = range;\n      cmp = descending;\n    }\n\n    lo = Math.floor(lo);\n    hi = Math.ceil(hi); // filter ticks to valid values within the range\n    // additionally sort ticks in range order (#2579)\n\n    ticks = ticks.map(v => [v, scale(v)]).filter(_ => lo <= _[1] && _[1] <= hi).sort(cmp).map(_ => _[0]);\n\n    if (count > 0 && ticks.length > 1) {\n      const endpoints = [ticks[0], vegaUtil.peek(ticks)];\n\n      while (ticks.length > count && ticks.length >= 3) {\n        ticks = ticks.filter((_, i) => !(i % 2));\n      }\n\n      if (ticks.length < 3) {\n        ticks = endpoints;\n      }\n    }\n\n    return ticks;\n  }\n  /**\n   * Generate tick values for the given scale and approximate tick count or\n   * interval value. If the scale has a 'ticks' method, it will be used to\n   * generate the ticks, with the count argument passed as a parameter. If the\n   * scale lacks a 'ticks' method, the full scale domain will be returned.\n   * @param {Scale} scale - The scale for which to generate tick values.\n   * @param {*} [count] - The approximate number of desired ticks.\n   * @return {Array<*>} - The generated tick values.\n   */\n\n  function tickValues(scale, count) {\n    return scale.bins ? validTicks(scale, scale.bins) : scale.ticks ? scale.ticks(count) : scale.domain();\n  }\n  /**\n   * Generate a label format function for a scale. If the scale has a\n   * 'tickFormat' method, it will be used to generate the formatter, with the\n   * count and specifier arguments passed as parameters. If the scale lacks a\n   * 'tickFormat' method, the returned formatter performs simple string coercion.\n   * If the input scale is a logarithmic scale and the format specifier does not\n   * indicate a desired decimal precision, a special variable precision formatter\n   * that automatically trims trailing zeroes will be generated.\n   * @param {Scale} scale - The scale for which to generate the label formatter.\n   * @param {*} [count] - The approximate number of desired ticks.\n   * @param {string} [specifier] - The format specifier. Must be a legal d3\n   *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or\n   *   time multi-format specifier object.\n   * @return {function(*):string} - The generated label formatter.\n   */\n\n  function tickFormat(locale, scale, count, specifier, formatType, noSkip) {\n    const type = scale.type;\n    let format = defaultFormatter;\n\n    if (type === Time || formatType === Time) {\n      format = locale.timeFormat(specifier);\n    } else if (type === UTC || formatType === UTC) {\n      format = locale.utcFormat(specifier);\n    } else if (isLogarithmic(type)) {\n      const varfmt = locale.formatFloat(specifier);\n\n      if (noSkip || scale.bins) {\n        format = varfmt;\n      } else {\n        const test = tickLog(scale, count, false);\n\n        format = _ => test(_) ? varfmt(_) : '';\n      }\n    } else if (scale.tickFormat) {\n      // if d3 scale has tickFormat, it must be continuous\n      const d = scale.domain();\n      format = locale.formatSpan(d[0], d[d.length - 1], count, specifier);\n    } else if (specifier) {\n      format = locale.format(specifier);\n    }\n\n    return format;\n  }\n  function tickLog(scale, count, values) {\n    const ticks = tickValues(scale, count),\n          base = scale.base(),\n          logb = Math.log(base),\n          k = Math.max(1, base * count / ticks.length); // apply d3-scale's log format filter criteria\n\n    const test = d => {\n      let i = d / Math.pow(base, Math.round(Math.log(d) / logb));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k;\n    };\n\n    return values ? ticks.filter(test) : test;\n  }\n\n  const symbols = {\n    [Quantile]: 'quantiles',\n    [Quantize]: 'thresholds',\n    [Threshold]: 'domain'\n  };\n  const formats = {\n    [Quantile]: 'quantiles',\n    [Quantize]: 'domain'\n  };\n  function labelValues(scale, count) {\n    return scale.bins ? binValues(scale.bins) : scale.type === Log ? tickLog(scale, count, true) : symbols[scale.type] ? thresholdValues(scale[symbols[scale.type]]()) : tickValues(scale, count);\n  }\n  function thresholdFormat(locale, scale, specifier) {\n    const _ = scale[formats[scale.type]](),\n          n = _.length;\n\n    let d = n > 1 ? _[1] - _[0] : _[0],\n        i;\n\n    for (i = 1; i < n; ++i) {\n      d = Math.min(d, _[i] - _[i - 1]);\n    } // tickCount = 3 ticks times 10 for increased resolution\n\n\n    return locale.formatSpan(0, d, 3 * 10, specifier);\n  }\n\n  function thresholdValues(thresholds) {\n    const values = [-Infinity].concat(thresholds);\n    values.max = +Infinity;\n    return values;\n  }\n\n  function binValues(bins) {\n    const values = bins.slice(0, -1);\n    values.max = vegaUtil.peek(bins);\n    return values;\n  }\n\n  const isDiscreteRange = scale => symbols[scale.type] || scale.bins;\n\n  function labelFormat(locale, scale, count, type, specifier, formatType, noSkip) {\n    const format = formats[scale.type] && formatType !== Time && formatType !== UTC ? thresholdFormat(locale, scale, specifier) : tickFormat(locale, scale, count, specifier, formatType, noSkip);\n    return type === SymbolLegend && isDiscreteRange(scale) ? formatRange(format) : type === DiscreteLegend ? formatDiscrete(format) : formatPoint(format);\n  }\n\n  const formatRange = format => (value, index, array) => {\n    const limit = get(array[index + 1], get(array.max, +Infinity)),\n          lo = formatValue(value, format),\n          hi = formatValue(limit, format);\n    return lo && hi ? lo + ' \\u2013 ' + hi : hi ? '< ' + hi : '\\u2265 ' + lo;\n  };\n\n  const get = (value, dflt) => value != null ? value : dflt;\n\n  const formatDiscrete = format => (value, index) => index ? format(value) : null;\n\n  const formatPoint = format => value => format(value);\n\n  const formatValue = (value, format) => Number.isFinite(value) ? format(value) : null;\n\n  function labelFraction(scale) {\n    const domain = scale.domain(),\n          count = domain.length - 1;\n    let lo = +domain[0],\n        hi = +vegaUtil.peek(domain),\n        span = hi - lo;\n\n    if (scale.type === Threshold) {\n      const adjust = count ? span / count : 0.1;\n      lo -= adjust;\n      hi += adjust;\n      span = hi - lo;\n    }\n\n    return value => (value - lo) / span;\n  }\n\n  function format(locale, scale, specifier, formatType) {\n    const type = formatType || scale.type; // replace abbreviated time specifiers to improve screen reader experience\n\n    if (vegaUtil.isString(specifier) && isTemporal(type)) {\n      specifier = specifier.replace(/%a/g, '%A').replace(/%b/g, '%B');\n    }\n\n    return !specifier && type === Time ? locale.timeFormat('%A, %d %B %Y, %X') : !specifier && type === UTC ? locale.utcFormat('%A, %d %B %Y, %X UTC') : labelFormat(locale, scale, 5, null, specifier, formatType, true);\n  }\n\n  function domainCaption(locale, scale, opt) {\n    opt = opt || {};\n    const max = Math.max(3, opt.maxlen || 7),\n          fmt = format(locale, scale, opt.format, opt.formatType); // if scale breaks domain into bins, describe boundaries\n\n    if (isDiscretizing(scale.type)) {\n      const v = labelValues(scale).slice(1).map(fmt),\n            n = v.length;\n      return `${n} boundar${n === 1 ? 'y' : 'ies'}: ${v.join(', ')}`;\n    } // if scale domain is discrete, list values\n    else if (isDiscrete(scale.type)) {\n        const d = scale.domain(),\n              n = d.length,\n              v = n > max ? d.slice(0, max - 2).map(fmt).join(', ') + ', ending with ' + d.slice(-1).map(fmt) : d.map(fmt).join(', ');\n        return `${n} value${n === 1 ? '' : 's'}: ${v}`;\n      } // if scale domain is continuous, describe value range\n      else {\n          const d = scale.domain();\n          return `values from ${fmt(d[0])} to ${fmt(vegaUtil.peek(d))}`;\n        }\n  }\n\n  Object.defineProperty(exports, 'scaleImplicit', {\n    enumerable: true,\n    get: function () {\n      return $.scaleImplicit;\n    }\n  });\n  exports.Band = Band;\n  exports.BinOrdinal = BinOrdinal;\n  exports.DiscreteLegend = DiscreteLegend;\n  exports.Diverging = Diverging;\n  exports.GradientLegend = GradientLegend;\n  exports.Identity = Identity;\n  exports.Linear = Linear;\n  exports.Log = Log;\n  exports.Ordinal = Ordinal;\n  exports.Point = Point;\n  exports.Pow = Pow;\n  exports.Quantile = Quantile;\n  exports.Quantize = Quantize;\n  exports.Sequential = Sequential;\n  exports.Sqrt = Sqrt;\n  exports.SymbolLegend = SymbolLegend;\n  exports.Symlog = Symlog;\n  exports.Threshold = Threshold;\n  exports.Time = Time;\n  exports.UTC = UTC;\n  exports.bandSpace = bandSpace;\n  exports.domainCaption = domainCaption;\n  exports.interpolate = interpolate;\n  exports.interpolateColors = interpolateColors;\n  exports.interpolateRange = interpolateRange;\n  exports.isContinuous = isContinuous;\n  exports.isDiscrete = isDiscrete;\n  exports.isDiscretizing = isDiscretizing;\n  exports.isInterpolating = isInterpolating;\n  exports.isLogarithmic = isLogarithmic;\n  exports.isQuantile = isQuantile;\n  exports.isTemporal = isTemporal;\n  exports.isValidScaleType = isValidScaleType;\n  exports.labelFormat = labelFormat;\n  exports.labelFraction = labelFraction;\n  exports.labelValues = labelValues;\n  exports.quantizeInterpolator = quantizeInterpolator;\n  exports.scale = scale;\n  exports.scaleCopy = scaleCopy;\n  exports.scaleFraction = scaleFraction;\n  exports.scheme = scheme;\n  exports.tickCount = tickCount;\n  exports.tickFormat = tickFormat;\n  exports.tickValues = tickValues;\n  exports.validTicks = validTicks;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","d3","vegaUtil","d3Array","$","$$1","vegaTime","bandSpace","count","paddingInner","paddingOuter","space","invertRange","scale","_","lo","hi","t","invert","invertRangeExtent","range","min","n","i","length","max","invertExtent","undefined","band","rescale","domain","reverse","stop","start","step","round","Math","floor","align","bandwidth","values","map","ordinalRange","scaleOrdinal","unknown","scale.domain","arguments","scale.range","slice","rangeRound","scale.rangeRound","scale.bandwidth","scale.step","scale.round","padding","scale.padding","scale.paddingInner","scale.paddingOuter","scale.align","scale.invertRange","a","bisectRight","b","scale.invert","value","copy","scale.copy","pointish","scaleBinOrdinal","x","bisect","call","toNumber","tickFormat","scale.tickFormat","specifier","peek","create","type","constructor","metadata","ctr","s","toSet","array","scales","isValidScaleType","hasOwnProperty","hasType","key","isDiscrete","Discrete","isDiscretizing","Discretizing","isLogarithmic","Log","isTemporal","Temporal","interpolateColors","colors","gamma","piecewise","interpolate","interp","$__namespace","method","toLowerCase","split","toUpperCase","join","palette","c","Array","apply","f","k","scheme","name","schemes","validTicks","ticks","cmp","ascending","descending","ceil","v","filter","sort","endpoints","tickValues","bins","locale","formatType","noSkip","format","defaultFormatter","Time","timeFormat","UTC","utcFormat","varfmt","formatFloat","test","tickLog","d","formatSpan","base","logb","log","pow","labelValues","Infinity","concat","thresholds","labelFormat","formats","SymbolLegend","symbols","formatRange","DiscreteLegend","formatDiscrete","formatPoint","_interopNamespace","e","__esModule","Object","keys","forEach","getOwnPropertyDescriptor","defineProperty","get","enumerable","freeze","prototype","Identity","scaleIdentity","Linear","scaleLinear","Continuous","scaleLog","Pow","scalePow","Sqrt","scaleSqrt","Symlog","scaleSymlog","scaleTime","scaleUtc","Sequential","scaleSequential","Interpolating","scaleSequentialLog","scaleSequentialPow","scaleSequentialSqrt","scaleSequentialSymlog","scaleDiverging","scaleDivergingLog","scaleDivergingPow","scaleDivergingSqrt","scaleDivergingSymlog","Quantile","scaleQuantile","Quantize","scaleQuantize","Threshold","scaleThreshold","BinOrdinal","Ordinal","Band","Point","point","scaleProps","discrete","category10","category20","category20b","category20c","tableau10","tableau20","accent","dark2","paired","pastel1","pastel2","set1","set2","set3","continuous","blues","greens","greys","oranges","purples","reds","blueGreen","bluePurple","greenBlue","orangeRed","purpleBlue","purpleBlueGreen","purpleRed","redPurple","yellowGreen","yellowOrangeBrown","yellowOrangeRed","blueOrange","brownBlueGreen","purpleGreen","purpleOrange","redBlue","redGrey","yellowGreenBlue","redYellowBlue","redYellowGreen","pinkYellowGreen","spectral","viridis","magma","inferno","plasma","cividis","rainbow","sinebow","turbo","browns","tealBlues","teals","warmGreys","goldGreen","goldOrange","goldRed","lightGreyRed","lightGreyTeal","lightMulti","lightOrange","lightTealBlue","darkBlue","darkGold","darkGreen","darkMulti","darkRed","isArray","String","index","dflt","Number","isFinite","limit","scaleImplicit","Diverging","GradientLegend","domainCaption","opt","maxlen","isString","replace","fmt","interpolateRange","interpolator","span","isContinuous","isInterpolating","isQuantile","labelFraction","adjust","quantizeInterpolator","samples","scaleCopy","scaleFraction","scale$1","delta","indexOf","m","constant","tickCount","minStep","isNumber","isObject","interval","timeInterval","utcInterval","error","every"]
}
