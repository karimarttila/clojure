{"version":3,"sources":["re_frame/settings.cljc"],"mappings":";AAKA,AAAA,AAAA,AAAA,AAAA,AAAKA,AAEmBC;AAExB,AAAKC,AACH,AAACC,AAAKH;AAER,AAAA,AAACI;AAAD,AACG,AAACC,AAAMH,AAAM,AAAKI;AAAL,AAAQ,AAAA,AAAA,AAACC,AAAMD;;;AAE/B,AAAA,AAAME;AAAN,AAEE,AAAA,AAAA,AAAAC,AAAWP;;AAEb,AAAA,AAAMQ,AACHC,AAAoBC;AADvB,AAEE,AAACC,AACC,AAAKC,AAAIC;AAAT,AACE,AAAI,AAACC,AAAE,AAAA,AAAKJ,AACL,AAAA,AAAKG;AACV,AACE,AAAME;AAAN,AACE,AAAM,AAACC,AAAI,AAACV;AAAZ,AACE,AAAA,AAAA,AAACW,AAAsE,AAAA,AAAKP;;AAD9E;;AADF;;AAGA,AAACQ,AAAKN,AAAIF;;AACZ,AAACQ,AAAKN,AAAIC;;AACdd,AACAU;;AAEJ,AAAA,AAAAU,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AACmBV;AADnB,AAAAc,AAAAJ,AAAA,AACWM;AADX,AAEE,AAAA,AAACvB,AAAMH,AAAM2B,AACN,AAAKlB;AAAL,AACE,AAAMmB,AAAI,AAAA,AAACC,AAAQpB;AAAnB,AACE,AAAI,AAAA,AAACqB,AAAOJ,AAAIE;AAGd,AAACpB,AAA4BC,AAAoBC;;AACjD,AAACQ,AAAKT,AAAoBC;;;;AAEzC,AAAA,AAAMqB;AAAN,AAEE,AAAA,AAAA,AAAAxB,AAAuBP;;AAEzB,AAAA,AAAA,AAAAgC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAEG,AAAA,AAAC/B,AAAMH,AAAMoC,AAA2BrC;;;AAF3C,AAAA,AAAA,AAAMmC,AAGFR;AAHJ,AAIG,AAAA,AAACvB,AAAMH,AAAM2B,AACN,AAAKlB;AAAL,AACE,AAAC4B,AAAKtC,AAAoB,AAAA,AAAAuC,AAACC;AAAD,AAAS,AAACzB,AAAEY,AAAG,AAAA,AAAAY;AAAS7B;;;;AAN9D,AAAA,AAAA,AAAMyB;;AAAN","names":["re-frame.settings/defaults","re-frame.interop/empty-queue","re-frame.settings/store","cljs.core.atom","re-frame.interop/on-load","cljs.core.swap_BANG_","m","cljs.core.assoc","re-frame.settings/loaded?","cljs.core/deref","re-frame.settings/-replace-global-interceptor","global-interceptors","interceptor","cljs.core.reduce","ret","existing-interceptor","cljs.core._EQ_","re-frame.interop/debug-enabled?","cljs.core/not","re_frame.loggers.console","cljs.core.conj","p__74895","map__74896","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re-frame.settings/reg-global-interceptor","id","cljs.core/update","ids","cljs.core.map","cljs.core/some","re-frame.settings/get-global-interceptors","var_args","G__74907","re-frame.settings/clear-global-interceptors","js/Error","cljs.core/assoc","cljs.core.into","p1__74901#","cljs.core.remove"],"sourcesContent":["(ns re-frame.settings\n  (:require\n    [re-frame.interop :as interop]\n    [re-frame.loggers :refer [console]]))\n\n(def defaults\n  {:loaded?             false\n   :global-interceptors interop/empty-queue})\n\n(def store\n  (atom defaults))\n\n(interop/on-load\n  #(swap! store (fn [m] (assoc m :loaded? true))))\n\n(defn loaded?\n  []\n  (:loaded? @store))\n\n(defn -replace-global-interceptor\n  [global-interceptors interceptor]\n  (reduce\n    (fn [ret existing-interceptor]\n      (if (= (:id interceptor)\n             (:id existing-interceptor))\n        (do\n          (when interop/debug-enabled?\n            (when (not (loaded?))\n              (console :warn \"re-frame: replacing duplicate global interceptor id: \" (:id interceptor))))\n          (conj ret interceptor))\n        (conj ret existing-interceptor)))\n    interop/empty-queue\n    global-interceptors))\n\n(defn reg-global-interceptor\n  [{:keys [id] :as interceptor}]\n  (swap! store update :global-interceptors\n         (fn [global-interceptors]\n           (let [ids (map :id global-interceptors)]\n             (if (some #{id} ids)\n               ;; If the id already exists we replace it in-place to maintain the ordering of\n               ;; global interceptors esp during hot-code reloading in development.\n               (-replace-global-interceptor global-interceptors interceptor)\n               (conj global-interceptors interceptor))))))\n\n(defn get-global-interceptors\n  []\n  (:global-interceptors @store))\n\n(defn clear-global-interceptors\n  ([]\n   (swap! store assoc :global-interceptors interop/empty-queue))\n  ([id]\n   (swap! store update :global-interceptors\n          (fn [global-interceptors]\n            (into interop/empty-queue (remove #(= id (:id %)) global-interceptors))))))\n"]}