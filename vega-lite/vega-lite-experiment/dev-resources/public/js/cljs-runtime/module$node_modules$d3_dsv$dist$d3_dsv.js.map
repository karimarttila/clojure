{
"version":3,
"file":"module$node_modules$d3_dsv$dist$d3_dsv.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/d3-dsv/dist/d3-dsv.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_dsv$dist$d3_dsv\"] = function(global,require,module,exports) {\n// https://d3js.org/d3-dsv/ v2.0.0 Copyright 2020 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(global = global || self, factory(global.d3 = global.d3 || {}));\n}(this, function (exports) { 'use strict';\n\nvar EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear()) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nfunction dsv(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n\nvar csv = dsv(\",\");\n\nvar csvParse = csv.parse;\nvar csvParseRows = csv.parseRows;\nvar csvFormat = csv.format;\nvar csvFormatBody = csv.formatBody;\nvar csvFormatRows = csv.formatRows;\nvar csvFormatRow = csv.formatRow;\nvar csvFormatValue = csv.formatValue;\n\nvar tsv = dsv(\"\\t\");\n\nvar tsvParse = tsv.parse;\nvar tsvParseRows = tsv.parseRows;\nvar tsvFormat = tsv.format;\nvar tsvFormatBody = tsv.formatBody;\nvar tsvFormatRows = tsv.formatRows;\nvar tsvFormatRow = tsv.formatRow;\nvar tsvFormatValue = tsv.formatValue;\n\nfunction autoType(object) {\n  for (var key in object) {\n    var value = object[key].trim(), number, m;\n    if (!value) value = null;\n    else if (value === \"true\") value = true;\n    else if (value === \"false\") value = false;\n    else if (value === \"NaN\") value = NaN;\n    else if (!isNaN(number = +value)) value = number;\n    else if (m = value.match(/^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/)) {\n      if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, \"/\").replace(/T/, \" \");\n      value = new Date(value);\n    }\n    else continue;\n    object[key] = value;\n  }\n  return object;\n}\n\n// https://github.com/d3/d3-dsv/issues/45\nconst fixtz = new Date(\"2019-01-01T00:00\").getHours() || new Date(\"2019-07-01T00:00\").getHours();\n\nexports.autoType = autoType;\nexports.csvFormat = csvFormat;\nexports.csvFormatBody = csvFormatBody;\nexports.csvFormatRow = csvFormatRow;\nexports.csvFormatRows = csvFormatRows;\nexports.csvFormatValue = csvFormatValue;\nexports.csvParse = csvParse;\nexports.csvParseRows = csvParseRows;\nexports.dsvFormat = dsv;\nexports.tsvFormat = tsvFormat;\nexports.tsvFormatBody = tsvFormatBody;\nexports.tsvFormatRow = tsvFormatRow;\nexports.tsvFormatRows = tsvFormatRows;\nexports.tsvFormatValue = tsvFormatValue;\nexports.tsvParse = tsvParse;\nexports.tsvParseRows = tsvParseRows;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","self","d3","objectConverter","columns","Function","map","name","i","JSON","stringify","join","customConverter","f","object","row","inferColumns","rows","columnSet","Object","create","forEach","column","push","pad","value","width","s","length","Array","dsv","delimiter","parseRows","text","token","eof","EOF","eol","EOL","j","I","c","QUOTE","charCodeAt","N","NEWLINE","RETURN","slice","replace","DELIMITER","n","t","preformatBody","formatValue","formatRow","hours","date","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","isNaN","year","reFormat","RegExp","parse","convert","format","concat","formatBody","formatRows","csv","csvParse","csvParseRows","csvFormat","csvFormatBody","csvFormatRows","csvFormatRow","csvFormatValue","tsv","tsvParse","tsvParseRows","tsvFormat","tsvFormatBody","tsvFormatRows","tsvFormatRow","tsvFormatValue","fixtz","Date","getHours","autoType","key","trim","number","NaN","m","match","dsvFormat","defineProperty"]
}
