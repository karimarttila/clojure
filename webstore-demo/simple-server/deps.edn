{
 ;; NOTE: In IntelliJ IDEA you have to add the dev-src root like this:
 ;; Open Clojure Deps (right side below Maven, Leiningen...),
 ;; In the aliases tree check "dev-src".
 ;; ... or you get an "is not under a source root" warning in IntelliJ IDEA editor window.
 ;; NOTE: You can check the classpath in REPL: (println (seq (.getURLs (java.lang.ClassLoader/getSystemClassLoader))))


 ;; ************* NOTE: Use new Cognitect AWS library! ***************


 ; Let's keep static content in static which will be baked to jar.
 ; Let's keep resources out of the jar so that we can change
 ; e.g. configuration easier.
 :paths   ["src" "static"]

 :deps    {
           org.clojure/clojure             {:mvn/version "1.10.0"}
           org.clojure/core.async          {:mvn/version "0.4.490"}
           org.clojure/spec.alpha          {:mvn/version "0.2.176"}
           org.clojure/tools.logging       {:mvn/version "0.4.1"}
           org.clojure/data.json           {:mvn/version "0.2.6"}
           org.clojure/data.csv            {:mvn/version "0.1.4"}
           org.clojure/data.codec          {:mvn/version "0.1.1"}
           clj-time/clj-time               {:mvn/version "0.14.2"}
           commons-logging/commons-logging {:mvn/version "1.2"}
           ch.qos.logback/logback-classic  {:mvn/version "1.2.3"}
           ; Ring web app library: https://github.com/ring-clojure
           ring/ring-core                  {:mvn/version "1.7.1"}
           ; Conflict with com.cognitect.aws/api
           ; Later on added jetty client with the same
           ; version com.cognitect.aws/api server uses.
           ; And excluded jetty client from AWS api dependency.
           ring/ring-jetty-adapter         {:mvn/version "1.7.1"}
           ring-cors/ring-cors             {:mvn/version "0.1.13"}
           ring/ring-json                  {:mvn/version "0.4.0"}
           ring/ring-defaults              {:mvn/version "0.3.2"}
           metosin/reitit                  {:mvn/version "0.3.10"}
           metosin/maailma                 {:mvn/version "1.1.0"}
           buddy/buddy-sign                {:mvn/version "3.0.0"}
           ; Cognitect AWS library. https://github.com/cognitect-labs/aws-api
           com.cognitect.aws/api           {:mvn/version "0.8.305"
                                            :exclusions  [org.eclipse.jetty/jetty-client]}
           com.cognitect.aws/endpoints     {:mvn/version "1.1.11.549"}
           com.cognitect.aws/dynamodb      {:mvn/version "697.2.391.0"}
           org.eclipse.jetty/jetty-client  {:mvn/version "9.4.12.v20180830"}
           clj-http/clj-http               {:mvn/version "3.10.0"}
           }

 :aliases {

           ;; Test src.
           :test                   {:extra-paths ["test"]}

           ;; Test runner in console.
           :test-runner            {:extra-paths ["test"]
                                    :extra-deps  {com.cognitect/test-runner {:git/url "https://github.com/cognitect-labs/test-runner.git"
                                                                             :sha     "209b64504cb3bd3b99ecfec7937b358a879f55c1"}}
                                    :main-opts   ["-m" "cognitect.test-runner"]}

           ;; Development src and dependencies.
           ;; In IntelliJ IDEA / Cursive you have to create a Run configuration
           ;; and check "Run with deps" and use aliases: dev-src,env-dev-single-node
           :dev-src                {:extra-paths ["dev-src"]
                                    :extra-deps  {
                                                  org.clojure/tools.namespace {:mvn/version "0.2.11"}
                                                  clj-http/clj-http           {:mvn/version "3.10.0"}
                                                  }
                                    }
           ;; Depstar for building fat jar.
           :depstar
                                   {:extra-deps
                                    {seancorfield/depstar {:mvn/version "0.5.1"}}}

           :clj-kondo
                                   {:extra-deps {clj-kondo/clj-kondo {:mvn/version "RELEASE"}}
                                    :main-opts  ["-m" "clj-kondo.main"]}


           ;; Cider specific.
           :cider-clj              {:extra-deps {org.clojure/clojure {:mvn/version "1.10.1"}
                                                 cider/cider-nrepl   {:mvn/version "0.22.4"}}
                                    :main-opts  ["-m" "nrepl.cmdline" "--middleware" "[cider.nrepl/cider-middleware]"]}

           ;; Environments. Only for development. When baking jar these are not
           ;; included - provide these in classpath when starting jar
           ;; (see build-jar and run-jar.sh).
           :env-dev                {:extra-paths ["resources/config/dev"]}
           :env-prod               {:extra-paths ["resources/config/prod"]}
           ;; For running tests with different configurations
           :env-dev-single-node    {:extra-paths ["resources/config/dev-single-node"]}
           :env-dev-local-dynamodb {:extra-paths ["resources/config/dev-local-dynamodb"]}
           :env-dev-real-aws       {:extra-paths ["resources/config/dev-real-aws"]}
           ; Used in repl, less log to see repl output better.
           :myrepl                 {:extra-paths ["resources/config/myrepl"]}

           ;; Test.check lib.
           :check                  {:extra-deps {org.clojure/test.check {:mvn/version "0.9.0"}}}

           ;; Benchmarking.
           :bench                  {:extra-deps {criterium/criterium {:mvn/version "0.4.4"}}}

           }
 }
